<?xml version="1.0" encoding="UTF-8"?>
<?xfa generator="AdobeLiveCycleDesignerES_V10.0.2.20120224.1.869952" APIVersion="3.5.12002.0"?>
<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/" timeStamp="2016-02-01T19:54:30Z" uuid="32dd589b-6750-4ed5-a305-752a05d0250b">
<template xmlns="http://www.xfa.org/schema/xfa-template/3.0/">
   <?formServer defaultPDFRenderFormat acrobat9.1static?>
   <?formServer allowRenderCaching 0?>
   <?formServer formModel both?>
   <subform name="form1" locale="en_CA" layout="tb">
      <pageSet>
         <pageArea>
            <contentArea w="203.2mm" h="249.476mm" x="6.351mm" y="16.198mm" name="contentArea"/>
            <medium stock="default" short="612pt" long="792pt"/>
            <?templateDesigner expand 1?></pageArea>
         <?templateDesigner expand 1?></pageSet>
      <subform>
         <variables>
            <script contentType="application/x-javascript" name="AddressUtil">
/* This script object should contain ONLY utility functions used by address blocks*/


/*dependencies should only be core or config or resource*/

var cLog = script.core.util.Log;
var cControllerUtil = script.core.util.ControllerUtil;
var cResourceManager = script.core.lang.ResourceManager;
var cFormNodeManager = script.core.model.FormNodeManager;
var cInstanceManagerUtil = script.core.util.InstanceManagerUtil; 
var cTypeEnforcer=script.core.util.TypeEnforcer;
var cTypeChecker=script.core.util.TypeChecker;
var cUiUtil=script.core.util.UiUtil;
var cStringUtil=script.core.util.StringUtil;
var cException = script.core.util.Exception;
var cConfigurationManager = script.core.util.ConfigurationManager;



//Config Variables
var CANADA=	cConfigurationManager.get("CANADA");
var  USA=	cConfigurationManager.get("USA");
var LABEL_START=cConfigurationManager.get("LabelStart");


/*
*	relies on the core delegate for updating  province droplist and postal code labels based on Country
*	@param province_formNode- the province droplist to update
*	@param postal_formNode- the postal code textbox to update
*	@returns null
*
*
*
**/
function countryChanged(provinceDdl_formNode,postal_formNode,provinceDdlInstance,postalTxtInstance){
	// Update correct labels to province/state and postal/state code and
	// clear the value entered in the postal/state code field
	provinceDdl_formNode.updateUI(provinceDdlInstance);
	postal_formNode.updateUI(postalTxtInstance);
}//end fun


/*
*	Toggles between the state textbox and the province droplist
*   When the country is Canada or the US, shows the droplist, otherwise shows the textbox
* 	@param countryValue- the value of the country to test against
*	@param provinceDdlInstance- the adobe node of the province/state droplist
*	@param provinceTextInstance- the adobe node of the state textbox
*	@returns null
*	@requires: CANADA and USA as configuration variables in the form
*
*
**/
function setProvinceUIState(countryValue,provinceDdlInstance,provinceTextInstance){
	if(countryValue===CANADA || countryValue===USA){
		//make droplist instance visible
		provinceTextInstance.rawValue="";
		cUiUtil.hide(provinceTextInstance);
		cUiUtil.show(provinceDdlInstance);
		cUiUtil.setFocus(provinceDdlInstance);	
	}else{
		//make text box visible
		provinceDdlInstance.rawValue=null;
		cUiUtil.show(provinceTextInstance);
		cUiUtil.hide(provinceDdlInstance);
		cUiUtil.setFocus(provinceTextInstance);	
	}

}//end fn



               
function updateAllFieldTooltips(startNode, textToAdd,position){

	_walkFields(startNode, updatToolTipIndicator,textToAdd,position);

}//end fn


/*
* Appends a tooltip with provided text. Assumes the component can add a tooltip
*@param nodeInstance- the adobe node instance to update
*@param textToAdd- a string containing the text to append to a tooltip
*
*/
function  updatToolTipIndicator(nodeInstance,textToAdd,position){

	//get the form node
	var fieldFormNode=cFormNodeManager.getFormNodeForSom(nodeInstance.somExpression);
	if(fieldFormNode){
		var fieldNumber=fieldFormNode.getFieldNumber();
		var labelText=fieldFormNode.getLabel();
		var textTT="";
		if(fieldNumber){
			 textTT=fieldNumber+". "+labelText;
		}else{
			 textTT=labelText;
		}
		
		if(position===LABEL_START){
			textTT=textToAdd+" "+textTT;	
		}else{
		
			textTT+=" "+textToAdd;
		}
		
		cUiUtil.setToolTip(nodeInstance,textTT);
	}
}

/*Walks the tree of form nodes and calls in the passed in function. Applies to fields
*@param oNode - an adobe Node to process
*@param func- a pointer to the function to call
*@param param1- an optional parameter to pass to the function
*
*/
function _walkFields(oNode, func, param1,param2)
{	
	var count = 0;	
	if(oNode.isPropertySpecified("presence") &amp;&amp; oNode.presence!=="visible") return count;
	
	if ((oNode.className == "exclGroup" 
	|| oNode.className == "subform"  
	|| oNode.className == "subformSet" 
	|| oNode.className == "area"))
	{
		
		for (var i = 0; i &lt; oNode.nodes.length; i++)
		{
			var oChildNode = oNode.nodes.item(i);
			count += _walkFields(oChildNode, func, param1,param2);
		}
	}
	else if (oNode.className == "field")
	{
		if(func(oNode, param1,param2))
		{
			count++;
		}
	}
	
	return count;
}               

/*
* Sets the passed in adobe node to readonly and sets the value of the field
*@param- countryValue- the saved (rawValue) to set
*@param- countryInstance- the country Instance to process
*/
function setCountryReadonly(countryValue,countryInstance){

	countryInstance.rawValue=countryValue;
	var country_FN=cFormNodeManager.getFormNodeForSom(countryInstance.somExpression);		
	country_FN.lock(countryInstance);
}               
               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               <?templateDesigner isFragment yes?>
               <?templateDesigner fragmentTitle AddressUtil?>
               <?templateDesigner fragmentDescription Utility functions for address. 
Place this fragment under the util subform?></script>
            <?templateDesigner expand 1?></variables>
         <?templateDesigner expand 1?></subform>
      <?templateDesigner Hyphenation excludeInitialCap:1, excludeAllCaps:1, wordCharCnt:7, remainCharCnt:3, pushCharCnt:3?>
      <?templateDesigner expand 1?>
   </subform>
   <?originalXFAVersion http://www.xfa.org/schema/xfa-template/3.0/?>
   <?templateDesigner DefaultLanguage JavaScript?>
   <?templateDesigner DefaultRunAt client?>
   <?acrobat JavaScript strictScoping?>
   <?PDFPrintOptions embedViewerPrefs 0?>
   <?PDFPrintOptions embedPrintOnFormOpen 0?>
   <?PDFPrintOptions scalingPrefs 0?>
   <?PDFPrintOptions enforceScalingPrefs 0?>
   <?PDFPrintOptions paperSource 0?>
   <?PDFPrintOptions duplexMode 0?>
   <?templateDesigner DefaultPreviewType interactive?>
   <?templateDesigner DefaultPreviewPagination simplex?>
   <?templateDesigner XDPPreviewFormat 19?>
   <?templateDesigner DefaultCaptionFontSettings face:Myriad Pro;size:10;weight:normal;style:normal?>
   <?templateDesigner DefaultValueFontSettings face:Myriad Pro;size:10;weight:normal;style:normal?>
   <?templateDesigner FormTargetVersion 30?>
   <?templateDesigner Zoom 122?>
   <?templateDesigner Rulers horizontal:1, vertical:1, guidelines:1, crosshairs:0?></template>
<config xmlns="http://www.xfa.org/schema/xci/3.0/">
   <agent name="designer">
      <!--  [0..n]  -->
      <destination>pdf</destination>
      <pdf>
         <!--  [0..n]  -->
         <fontInfo/>
      </pdf>
   </agent>
   <present>
      <!--  [0..n]  -->
      <destination>pdf</destination>
      <pdf>
         <!--  [0..n]  -->
         <fontInfo/>
         <version>1.7</version>
         <adobeExtensionLevel>5</adobeExtensionLevel>
      </pdf>
      <xdp>
         <packets>*</packets>
      </xdp>
   </present>
</config>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2011/06/07-10:39:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about="">
         <xmp:MetadataDate>2016-02-01T19:54:30Z</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe LiveCycle Designer ES 10.0</xmp:CreatorTool>
      </rdf:Description>
      <rdf:Description xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about="">
         <pdf:Producer>Adobe LiveCycle Designer ES 10.0</pdf:Producer>
      </rdf:Description>
      <rdf:Description xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/" rdf:about="">
         <xmpMM:DocumentID>uuid:32dd589b-6750-4ed5-a305-752a05d0250b</xmpMM:DocumentID>
      </rdf:Description>
      <rdf:Description xmlns:lcd="http://ns.adobe.com/livecycle/designer/" xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about="">
         <lcd:fragmentCatalog>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <dc:title>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default">AddressUtil</rdf:li>
                     </rdf:Alt>
                  </dc:title>
                  <dc:description>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default">Utility functions for address. 
Place this fragment under the util subform</rdf:li>
                     </rdf:Alt>
                  </dc:description>
                  <dc:identifier>$template.form1.#subform.#variables.AddressUtil</dc:identifier>
                  <lcd:fragmentRole>ScriptObject</lcd:fragmentRole>
               </rdf:li>
            </rdf:Seq>
         </lcd:fragmentCatalog>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
<localeSet xmlns="http://www.xfa.org/schema/xfa-locale-set/2.7/">
   <locale name="en_CA" desc="English (Canada)">
      <calendarSymbols name="gregorian">
         <monthNames>
            <month>January</month>
            <month>February</month>
            <month>March</month>
            <month>April</month>
            <month>May</month>
            <month>June</month>
            <month>July</month>
            <month>August</month>
            <month>September</month>
            <month>October</month>
            <month>November</month>
            <month>December</month>
         </monthNames>
         <monthNames abbr="1">
            <month>Jan</month>
            <month>Feb</month>
            <month>Mar</month>
            <month>Apr</month>
            <month>May</month>
            <month>Jun</month>
            <month>Jul</month>
            <month>Aug</month>
            <month>Sep</month>
            <month>Oct</month>
            <month>Nov</month>
            <month>Dec</month>
         </monthNames>
         <dayNames>
            <day>Sunday</day>
            <day>Monday</day>
            <day>Tuesday</day>
            <day>Wednesday</day>
            <day>Thursday</day>
            <day>Friday</day>
            <day>Saturday</day>
         </dayNames>
         <dayNames abbr="1">
            <day>Sun</day>
            <day>Mon</day>
            <day>Tue</day>
            <day>Wed</day>
            <day>Thu</day>
            <day>Fri</day>
            <day>Sat</day>
         </dayNames>
         <meridiemNames>
            <meridiem>AM</meridiem>
            <meridiem>PM</meridiem>
         </meridiemNames>
         <eraNames>
            <era>BC</era>
            <era>AD</era>
         </eraNames>
      </calendarSymbols>
      <datePatterns>
         <datePattern name="full">EEEE, MMMM D, YYYY</datePattern>
         <datePattern name="long">MMMM D, YYYY</datePattern>
         <datePattern name="med">D-MMM-YY</datePattern>
         <datePattern name="short">DD/MM/YY</datePattern>
      </datePatterns>
      <timePatterns>
         <timePattern name="full">h:MM:SS A Z</timePattern>
         <timePattern name="long">h:MM:SS A Z</timePattern>
         <timePattern name="med">h:MM:SS A</timePattern>
         <timePattern name="short">h:MM A</timePattern>
      </timePatterns>
      <dateTimeSymbols>GyMdkHmsSEDFwWahKzZ</dateTimeSymbols>
      <numberPatterns>
         <numberPattern name="numeric">z,zz9.zzz</numberPattern>
         <numberPattern name="currency">$z,zz9.99</numberPattern>
         <numberPattern name="percent">z,zz9%</numberPattern>
      </numberPatterns>
      <numberSymbols>
         <numberSymbol name="decimal">.</numberSymbol>
         <numberSymbol name="grouping">,</numberSymbol>
         <numberSymbol name="percent">%</numberSymbol>
         <numberSymbol name="minus">-</numberSymbol>
         <numberSymbol name="zero">0</numberSymbol>
      </numberSymbols>
      <currencySymbols>
         <currencySymbol name="symbol">$</currencySymbol>
         <currencySymbol name="isoname">CAD</currencySymbol>
         <currencySymbol name="decimal">.</currencySymbol>
      </currencySymbols>
      <typefaces>
         <typeface name="Myriad Pro"/>
         <typeface name="Minion Pro"/>
         <typeface name="Courier Std"/>
         <typeface name="Adobe Pi Std"/>
         <typeface name="Adobe Hebrew"/>
         <typeface name="Adobe Arabic"/>
         <typeface name="Adobe Thai"/>
         <typeface name="Kozuka Gothic Pro-VI M"/>
         <typeface name="Kozuka Mincho Pro-VI R"/>
         <typeface name="Adobe Ming Std L"/>
         <typeface name="Adobe Song Std L"/>
         <typeface name="Adobe Myungjo Std M"/>
      </typefaces>
   </locale>
</localeSet></xdp:xdp>
