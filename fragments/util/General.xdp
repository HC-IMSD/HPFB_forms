<?xml version="1.0" encoding="UTF-8"?>
<?xfa generator="AdobeLiveCycleDesignerES_V10.0.2.20120224.1.869952" APIVersion="3.5.12002.0"?>
<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">
<template xmlns="http://www.xfa.org/schema/xfa-template/3.0/">
   <subform name="form1" locale="en_CA" layout="tb">
      <pageSet>
         <pageArea>
            <contentArea w="203.2mm" h="249.476mm" x="6.351mm" y="16.198mm" name="contentArea"/>
            <medium stock="default" short="612pt" long="792pt"/>
         </pageArea>
      </pageSet>
      <subform>
         <variables>
            <script contentType="application/x-javascript" name="General">
//globals
var cInstanceManagerUtil = script.core.util.InstanceManagerUtil;
var cLog =						script.core.util.Log;
var cUiUtil=					script.core.util.UiUtil;
var cFailureReporter=			script.core.validation.FailureReporter;
var cInstanceManagerUtil =		script.core.util.InstanceManagerUtil;
var cFormNodeManager = 		script.core.model.FormNodeManager;

/*
* If a node has a delegate, calls the delegate code. On errors, displays a dialog
* @param - aFormNode - the framework defined form node
* @param - a_adobeNode- the object instance that matches the form node
* @returns -true if validation was successful
*/
function  validateField(a_FormNode,a_adobeNode,a_focusNode){
		
	if(a_adobeNode.isNull) return true; //do not validate empty field
	var validationFailures=a_FormNode.validateNode(a_adobeNode,false); //do not update the display
		
	if(validationFailures!==null){
		xfa.host.messageBox(cFailureReporter.getFailureSummary(validationFailures));
		if(a_focusNode){
			cUiUtil.setFocus(a_focusNode);
		}else{
			cUiUtil.setFocus(a_adobeNode);
		}
		cUiUtil.moveFocus(); 
		return false;
	}
	return true
}//end fn


/*
*	Generic Instance manager checker. Core does not check if it allowed to add an instance
*	This should really be part of core
*	@param instanceManager- the instanceManager to check
*
*/

function addSubformInstance(instanceManager){
	var createdInstance=null;
	//TO DO check if instance manager exists and is an instanceManager
	if((instanceManager.count&lt;instanceManager.max) || instanceManager.max&lt;0){
		 createdInstance=cInstanceManagerUtil.addInstance(instanceManager);

	}
	return(createdInstance);
}


/*
*  Deletes a subform instance from the form
*@param sfInstance- the adobe node instance to process
*@returns true if the deletion was sucessful, false if the subform could not be deleted (violates min instances)
*
*
*/

function removeSubformInstance(sfInstance){

	var fieldFormNode=			cFormNodeManager.getFormNodeForSom(sfInstance.somExpression);
	var instanceManager=		fieldFormNode.getInstanceManager();
	return(removeSpecificSubformInstance(instanceManager,fieldFormNode));

}


/*
*  Deletes a subform, given the adobe instancemanager and instance
*@param sfInstance- the adobe node instance to process
*@param instanceManager- the adobe instance manager used to check that the delete doesn't violate the min number of instances
*@returns true if the deletion was sucessful, false if the subform could not be deleted (violates min instances)
*
*
*/

function removeSpecificSubformInstance(instanceManager,sfInstance){
	
	//TO DO check if instance manager exists and is an instanceManager
	if(instanceManager.count&gt;instanceManager.min){
				cInstanceManagerUtil.removeSpecificInstance(sfInstance);
				return true;
	}
	return false;
}


/*
* Hides the passed in node and clears any values of it and it's children
*@param nodeInstance- the adobe node to process
*
*
*
*/
function hideAndClearNodeInstance(nodeInstance){

	//to do error check for adobe node
	cUiUtil.hide(nodeInstance);
	xfa.host.resetData(nodeInstance.somExpression);
}//end fn



//pads a string s, to length len, with character chr
//padding is done in front of the string
function pad(s, len, chr)
{		
	if(s.length &gt; len)
	{
		return s.substr(s.length - len, len);
	}
	else if(s.length &lt; len)
	{
		var tmp = "";
		var i = 0;
		for(i = s.length; i &lt; len; i++)
		{
			tmp += chr;
		}
		return tmp + s;
	}
	return s;
}//end fn


               
               
               
               <?templateDesigner isFragment yes?>
               <?templateDesigner fragmentTitle GeneralUtil?>
               <?templateDesigner fragmentDescription Contains general UI utilitites?></script>
         </variables>
      </subform>
   </subform>
</template>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2011/06/07-10:39:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description xmlns:lcd="http://ns.adobe.com/livecycle/designer/" xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about="">
         <lcd:fragmentCatalog>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <dc:title>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default">GeneralUtil</rdf:li>
                     </rdf:Alt>
                  </dc:title>
                  <dc:description>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default">Contains general UI utilitites</rdf:li>
                     </rdf:Alt>
                  </dc:description>
                  <dc:identifier>$template.form1.#subform.#variables.General</dc:identifier>
                  <lcd:fragmentRole>ScriptObject</lcd:fragmentRole>
               </rdf:li>
            </rdf:Seq>
         </lcd:fragmentCatalog>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta></xdp:xdp>
