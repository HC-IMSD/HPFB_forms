<?xml version="1.0" encoding="UTF-8"?>
<?xfa generator="AdobeLiveCycleDesignerES_V10.0.2.20120224.1.869952" APIVersion="3.5.12002.0"?>
<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/" timeStamp="2014-05-12T17:33:50Z" uuid="666e175e-61a7-42ed-986f-5edc5de84439">
<template xmlns="http://www.xfa.org/schema/xfa-template/3.0/">
   <?formServer defaultPDFRenderFormat acrobat9.1static?>
   <subform name="form1" locale="en_US" layout="tb">
      <pageSet>
         <pageArea>
            <contentArea w="203.2mm" h="252.336mm" x="6.35mm" y="13.508mm"/>
            <medium stock="default" short="612pt" long="792pt"/>
         </pageArea>
      </pageSet>
      <subform w="100mm" h="50mm" name="RegulatoryAddresses">
         <subform w="100mm" h="50mm" name="control">
            <variables>
               <script contentType="application/x-javascript" name="RegulatoryAddressHandler">
//imports
var cLog = script.core.util.Log;


var cControllerUtil = script.core.util.ControllerUtil;
var cResourceManager = script.core.lang.ResourceManager;
var cFormNodeManager = script.core.model.FormNodeManager;
var cInstanceManagerUtil = script.core.util.InstanceManagerUtil; 
var cTypeEnforcer=script.core.util.TypeEnforcer;
var cTypeChecker=script.core.util.TypeChecker;
var cUiUtil=script.core.util.UiUtil;
var cStringUtil=script.core.util.StringUtil;
var cException = script.core.util.Exception;


//Globals
var YES="Yes";
var NO="No";
var COUNTRY_CANADA="CA";


//Handler name
var SCRIPT_OBJECT_NAME=					"RegulatoryAddressHandler";

//Action Globals
var PART1A_COUNTRY_CHANGED_ACTION=		"parta_country_changed";
var PART1B_COUNTRY_CHANGED_ACTION=		"partb_country_changed";
var PART1C_COUNTRY_CHANGED_ACTION=		"partc_country_changed";
var SAME_AS_ACTION=						"same_as_above";
var ADDRESS_NA_ACTION=					"address_na";
var REGULATORY_CONTACT_SAMEAS_ACTION=	"same_as_reg_contact";
var COMPANYNAME_SAMEAS_ACTION=			"company_name_sameas";
var COMPANYCONTACT_SAMEAS_ACTION=		"company_contact_sameas";
var IMPORTER_ADDRESS_SAMEAS_ACTION=		"importer_sameas";




//FORM NODES (FN)

//Part A Form Nodes
var PART1A_MANUFACT_COUNTRY_DDL_FN=cFormNodeManager.getFormNodeForKey("manufactCountry");
var PART1A_PROVINCE_FN=cFormNodeManager.getFormNodeForKey("manufactProvince");
var PART1A_POSTAL_CODE_FN=cFormNodeManager.getFormNodeForKey("manufactPostalCode");

//PartB FormNoes
var PART1B_PROVINCE_FN=cFormNodeManager.getFormNodeForKey("companyProvince");
var PART1B_POSTAL_CODE_FN=cFormNodeManager.getFormNodeForKey("companyPostalCode");

var PART1C_NOTAPPLICABLE_FN=cFormNodeManager.getFormNodeForKey("part1CNotApplicable");
var PART1C_PROVINCE_FN=cFormNodeManager.getFormNodeForKey("provinceRegMail");
var PART1C_POSTAL_CODE_FN=cFormNodeManager.getFormNodeForKey("postalCodeRegMail");

//Company nodes
var COMPANY_CONTACT_SAMEAS_CHK_FN=cFormNodeManager.getFormNodeForKey("companyContactSameAsManufact");
var COMPANY_ADDRESS_SAMEAS_CHK_FN=cFormNodeManager.getFormNodeForKey("companyAddressSameAsManufact");
var COMPANYADDRESS_SF_FN=cFormNodeManager.getFormNodeForKey("sfPart1BCompanyDetail");
var COMPANYCONTACT_SF_FN=cFormNodeManager.getFormNodeForKey("sfPart1BContactDetail");
//regulatory address nodes (1C)
var REG_ADDRESS_SF_FN=cFormNodeManager.getFormNodeForKey("sfPart1CCompanyDetail");
var REGMAIL_COUNTRY_DDL_FN=cFormNodeManager.getFormNodeForKey("countryRegMail");
var REGADDRESS_SAMEAS_CHK_FN=cFormNodeManager.getFormNodeForKey("regAddressSameAsManufacturer");
//reg mailing address contact
var NOTAPPL_CHK_FN=cFormNodeManager.getFormNodeForKey("part1CNotApplicable");
var REGCONTACT_SF_FN=cFormNodeManager.getFormNodeForKey("part1CContactDetail");
var REGCONTACT_SAMEAS_CHK_FN=cFormNodeManager.getFormNodeForKey("regContactSameAs");
//Importer address nodes
//var PART1D_IMPORTER_SF_FN=cFormNodeManager.getFormNodeForKey("sfPart1D");
var IMPORTER_ADDRESS_SF_FN=cFormNodeManager.getFormNodeForKey("sfPart1DCompanyDetail");
var IMPORTER_SAMEAS_CHK_FN=cFormNodeManager.getFormNodeForKey("importerSameRegulatory");   




_initialize();


/* Action Handler
*
*
*
*/
function actionPerformed(anEvent)
{
	switch(anEvent.getActionCommand())
	{
		
		case PART1A_COUNTRY_CHANGED_ACTION:
				_manufacturerCountryChanged(PART1A_PROVINCE_FN,PART1A_POSTAL_CODE_FN);					
			break;
		case PART1B_COUNTRY_CHANGED_ACTION:
				_applicantCountryChanged(PART1B_PROVINCE_FN,PART1B_POSTAL_CODE_FN);		
			break;
			
		case PART1C_COUNTRY_CHANGED_ACTION:
				_regulatoryAddressCountryChanged(PART1C_PROVINCE_FN,PART1C_POSTAL_CODE_FN);
			break;			
		case SAME_AS_ACTION:
				_regulatoryAddressStatusChanged(anEvent.getValue(),NOTAPPL_CHK_FN);
			break;
		case ADDRESS_NA_ACTION:
				_regulatoryAddressStatusChanged(anEvent.getValue(),REGADDRESS_SAMEAS_CHK_FN);
			break;
		case REGULATORY_CONTACT_SAMEAS_ACTION:		
				_contactStatusChanged(anEvent.getValue(),REGCONTACT_SF_FN);		
			break;
		case COMPANYNAME_SAMEAS_ACTION:
			 	_contactStatusChanged(anEvent.getValue(),COMPANYADDRESS_SF_FN);
			 break;	
			 
		case COMPANYCONTACT_SAMEAS_ACTION:
				
				_contactStatusChanged(anEvent.getValue(),COMPANYCONTACT_SF_FN);
			 break;	
			 
		case IMPORTER_ADDRESS_SAMEAS_ACTION:
		
				_contactStatusChanged(anEvent.getValue(),IMPORTER_ADDRESS_SF_FN);
			break;	 	 
						
		default:
			throw cException.createInstance(SCRIPT_OBJECT_NAME
				  + ".actionPerformed() - unrecognized event '" 
				  + anEvent.getActionCommand() + "'.", "UnsupportedAction");
	}//switch
}//end fn


/*
* updates the UI based on the submission type that has been selected
*
*
*
*
*/



function initialize(){
	
	cLog.trace("Starting initialize of adddress");
	//Company Address
	_contactStatusChanged(COMPANY_ADDRESS_SAMEAS_CHK_FN.getNodeInstance().rawValue, COMPANYADDRESS_SF_FN);
	//company Address contact
	_contactStatusChanged(COMPANY_CONTACT_SAMEAS_CHK_FN.getNodeInstance().rawValue,COMPANYCONTACT_SF_FN);
	
	
	//initialize the regulatory contact
	_contactStatusChanged(REGCONTACT_SAMEAS_CHK_FN.getNodeInstance().rawValue, REGCONTACT_SF_FN);
	
	//initialize the regulatory Mailing address, need to check for NA or same as values

	var sameAsValue=REGADDRESS_SAMEAS_CHK_FN.getNodeInstance().rawValue;
	if( sameAsValue===YES){
		//clear out
		_contactStatusChanged(sameAsValue,REG_ADDRESS_SF_FN);	
	}else{
		_contactStatusChanged(NOTAPPL_CHK_FN.getNodeInstance().rawValue,REG_ADDRESS_SF_FN);
	}
	
}

//process the rules for importer address
/*function updateImporterAddressState(){

	//check Manufacturer address
	var manufact_country_node=PART1A_MANUFACT_COUNTRY_DDL_FN.getNodeInstance();
	var instManager=PART1D_IMPORTER_SF_FN.getInstanceManager();
	if(manufact_country_node.rawValue!=COUNTRY_CANADA){		
		if(instManager.count&lt;instManager.max || instManager.max&lt;0){
			cInstanceManagerUtil.addInstance(instManager);	
			cLog.trace("add an instance");
			_updateImporterSameAsState();
		}
	}else{
		
		cInstanceManagerUtil.clearInstances(instManager);		
	}
	if(instManager.count&gt;0){
		//check if the regulatory country has changed
		var regCountry_node=REGMAIL_COUNTRY_DDL_FN.getNodeInstance();
			if(regCountry_node.rawValue===COUNTRY_CANADA){
			_updateImporterSameAsState();	
		}else{
			//force the form to show by forcing the status to NO
			cLog.trace("beforeContactStatusChanged");
			_contactStatusChanged(NO,IMPORTER_ADDRESS_SF_FN);	
			cLog.trace("after ContactStatusChanged")
		}
	}


}*/


/************ Private functions ***************************************/

function _initialize(){

	try{
	
		cControllerUtil.checkFormNode(COMPANY_ADDRESS_SAMEAS_CHK_FN, SCRIPT_OBJECT_NAME ,"COMPANY_ADDRESS_SAMEAS_CHK_FN");
		cControllerUtil.checkFormNode(PART1A_PROVINCE_FN, SCRIPT_OBJECT_NAME ,"PART1A_PROVINCE_FN");
		cControllerUtil.checkFormNode(PART1A_POSTAL_CODE_FN, SCRIPT_OBJECT_NAME ,"PART1A_POSTAL_CODE_FN");
		cControllerUtil.checkFormNode(PART1A_MANUFACT_COUNTRY_DDL_FN, SCRIPT_OBJECT_NAME ,"PART1A_MANUFACT_COUNTRY_DDL_FN");
		cControllerUtil.checkFormNode(PART1C_NOTAPPLICABLE_FN, SCRIPT_OBJECT_NAME ,"PART1C_NOTAPPLICABLE_FN");
		cControllerUtil.checkFormNode(PART1C_PROVINCE_FN, SCRIPT_OBJECT_NAME ,"PART1C_PROVINCE_FN");
		cControllerUtil.checkFormNode(PART1C_POSTAL_CODE_FN, SCRIPT_OBJECT_NAME ,"PART1C_POSTAL_CODE_FN");
		cControllerUtil.checkFormNode(REG_ADDRESS_SF_FN, SCRIPT_OBJECT_NAME ,"REG_ADDRESS_SF_FN");	
		cControllerUtil.checkFormNode(REGADDRESS_SAMEAS_CHK_FN, SCRIPT_OBJECT_NAME ,"REGADDRESS_SAMEAS_CHK_FN");	
		cControllerUtil.checkFormNode(NOTAPPL_CHK_FN, SCRIPT_OBJECT_NAME ,"NOTAPPL_CHK_FN");	
		cControllerUtil.checkFormNode(REGCONTACT_SF_FN, SCRIPT_OBJECT_NAME ,"REGCONTACT_SF_FN");
		cControllerUtil.checkFormNode(COMPANYADDRESS_SF_FN, SCRIPT_OBJECT_NAME ,"COMPANYADDRESS_SF_FN");
		cControllerUtil.checkFormNode(REGCONTACT_SAMEAS_CHK_FN, SCRIPT_OBJECT_NAME ,"REGCONTACT_SAMEAS_CHK_FN");
		cControllerUtil.checkFormNode(COMPANYCONTACT_SF_FN, SCRIPT_OBJECT_NAME ,"COMPANYCONTACT_SF_FN");
		cControllerUtil.checkFormNode(COMPANY_CONTACT_SAMEAS_CHK_FN, SCRIPT_OBJECT_NAME ,"COMPANY_CONTACT_SAMEAS_CHK_FN");  
		cControllerUtil.checkFormNode(IMPORTER_ADDRESS_SF_FN, SCRIPT_OBJECT_NAME ,"IMPORTER_ADDRESS_SF_FN"); 
		//cControllerUtil.checkFormNode(PART1D_IMPORTER_SF_FN, SCRIPT_OBJECT_NAME ,"PART1D_IMPORTER_SF_FN");
		cControllerUtil.checkFormNode(IMPORTER_SAMEAS_CHK_FN, SCRIPT_OBJECT_NAME ,"IMPORTER_SAMEAS_CHK_FN");
		cControllerUtil.checkFormNode(REGMAIL_COUNTRY_DDL_FN, SCRIPT_OBJECT_NAME ,"REGMAIL_COUNTRY_DDL_FN");
		
				
	}
	catch (exception)
	{
		cLog.critical(SCRIPT_OBJECT_NAME+"._initialize()", exception);
	}
}


/*
*	relies on core delegate for updating address and state based on County
*	@param province_formNode- the province droplist to update
*	@param postal_formNode- the postal code textbox to update
*	@returns null
*
*
*
**/
function _applicantCountryChanged(province_formNode,postal_formNode){
	// Update correct labels to province/state and postal/state code and
	// clear the value entered in the postal/state code field
	province_formNode.getNodeInstance().rawValue = " ";	
	province_formNode.updateUI();
	postal_formNode.updateUI();
	postal_formNode.getNodeInstance().rawValue = null;	
	
}//end fun



function _manufacturerCountryChanged(province_formNode,postal_formNode){

	//update the province, postal code labels
	_applicantCountryChanged(province_formNode,postal_formNode);
	//todelete
	//updateImporterAddressState();		
}//end fn




/*
*	updates the regulatory mailing address 
*	@param sameAs- if yes (Y) the mailing address is deleted, if No the mailing address is added
					Any other values are ignored
*
*
**/

function _regulatoryAddressStatusChanged(sameAsValue,checkbox_formNode){

	checkbox_formNode.getNodeInstance().rawValue=NO;
	_contactStatusChanged(sameAsValue,REG_ADDRESS_SF_FN);
	
	
}//end fn

/*
*	Updates the regulatory addres country
*
*
*/
function _regulatoryAddressCountryChanged(province_formNode,postal_formNode){


	_applicantCountryChanged(province_formNode,postal_formNode);
	_updateImporterSameAsState();
	//updateImporterAddressState();
	
}

/*
* For the Importer same As 1D checkbox make it hidden if iC country is not canada
*
*
*
**/

function _updateImporterSameAsState(){

	var regMailCountry_node=REGMAIL_COUNTRY_DDL_FN.getNodeInstance();
	var importerSameAs_node=IMPORTER_SAMEAS_CHK_FN.getNodeInstance();
	
	//if node does not exist do not proceed
	if(!cTypeChecker.isNode(importerSameAs_node)){
		return;
	}
	
	if(regMailCountry_node.rawValue!==COUNTRY_CANADA){
		importerSameAs_node.rawValue=NO; //reset the value
		cUiUtil.hide(importerSameAs_node);
	}else{
		cUiUtil.show(importerSameAs_node);
	}
}



/*
* Updates the passed node, if sameAsValue is yes, removes the subform, otherwise addit
*
*
*
*
**/
function _contactStatusChanged(sameAsValue,src_FormNode){

	cLog.trace("starting ContactStatusChanged "+src_FormNode.getSomExpression());
	var sfInstanceManager=cInstanceManagerUtil.getInstanceManagerForSom(src_FormNode.getFullSomExpression());
	cLog.trace("Same as value is: "+sameAsValue);
	if(sameAsValue===YES){
		
		if(sfInstanceManager.count&gt;sfInstanceManager.min){
			cInstanceManagerUtil.clearInstances(sfInstanceManager);
		}
	}
	else if(sameAsValue===NO){
	
		cLog.trace("count: "+sfInstanceManager.count+"max: "+sfInstanceManager.max)
		if(sfInstanceManager.count&lt;sfInstanceManager.max || sfInstanceManager.max&lt;0){
			var temp=cInstanceManagerUtil.addInstance(sfInstanceManager);
			cLog.trace(temp);
		}
	}	
	//TO DO add a log message?
}//end fn

</script>
               <?templateDesigner expand 1?></variables>
            <?templateDesigner expand 1?></subform>
         <subform w="100mm" h="50mm" name="nodeDefinitions">
            <variables>
               <script contentType="application/x-javascript" name="Addresses">
var content={

		sfAddresses: {
			somExpression: "sfAddresses",
			parentNodeKey: "sfPage1"},
		
		sfPart1A: {
			somExpression: "sfPart1A",
			parentNodeKey: "sfAddresses"},
		
		lblPart1: {
			somExpression:	"lblPart1",
			parentNodeKey:	"sfPart1A",
			labelKey:		"part1DrugInfo"},
		
		sfPart1ACompanyHeader: {
			somExpression: "sfPart1ACompanyHeader",
			parentNodeKey: "sfPart1A"},
		
		part1ASubHeading: {
			somExpression: "lblContactAddress",
			parentNodeKey: "sfPart1ACompanyHeader",
			labelKey:		"manufactMailingHeading"},
		
		sfPart1ACompanyDetail: {
			somExpression: "sfPart1ACompanyDetail",
			parentNodeKey: "sfAuthSignOfficial"},
		
		sNameAndAddress: {
			somExpression: "sNameAndAddress",
			parentNodeKey: "sfPart1ACompanyDetail"},
		
		companyNamePart1A: {
			somExpression:	"txtCompanyName",
			parentNodeKey:	"sNameAndAddress",
			labelKey:		"lbCompanyName"},
		
		manufactAddress: {
			somExpression: "txtAddress",
			parentNodeKey: "sNameAndAddress",
			labelKey:		"streetAddress"},
		
		manufactCity: {
			somExpression: "txtCity",
			parentNodeKey: "sNameAndAddress",
			labelKey:		"cityTown"},
		
		manufactCountry: {
			somExpression:	"ddlCountry",
			parentNodeKey:	"sNameAndAddress",
			labelKey:		"country",
			pickListKey:	"countryList"
			},
		
		manufactProvince: {
			somExpression: "ddlProvince",
			parentNodeKey: "sNameAndAddress",
			delegate:		"script.core.model.delegate.ProvinceStateDelegate"
			},
		
		manufactPostalCode: {
			somExpression: "txtPostalCode",
			parentNodeKey: "sNameAndAddress",
			delegate:		"script.core.model.delegate.PostalZipDelegate"},
		
		part1AContactHeader: {
			somExpression:	"sfPart1AContactHeader",
			parentNodeKey:	"sfPart1A"},
		
		manufactSponserHeading: {
			somExpression:	"lblContactPersonMS",
			parentNodeKey:	"sfPart1ACompanyDetail",
			labelKey:		"manufactSponser"},
		
		sfPart1AContactDetail: {
			somExpression: "sfPart1AContactDetail",
			parentNodeKey: "sfPart1A"},	
		
		ddl: {
			somExpression: "ddlSalutation",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:		"salutation",
			//pickListKey:	"salutationList"},
			pickListKey: "listSalutation"},
		
		givenNamePart1A: {
			somExpression:	"txtGivenName",
			parentNodeKey:	"sfPart1ACompanyDetail",
			labelKey:		"givenName"},
		
		initialsPart1A: {
			somExpression:	"txtInitials",
			parentNodeKey:	"sfPart1ACompanyDetail",
			labelKey:		"nameInitials"},
		
		surnamePart1A: {
			somExpression:	"txtSurname",
			parentNodeKey:	"sfPart1ACompanyDetail",
			labelKey:		"surname"},
		
		txtTitle: {
			somExpression: "txtTitle",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:		"title"},
		
		ddlLangPref: {
			somExpression:	"ddlLangPref",
			parentNodeKey:	"sfPart1ACompanyDetail",
			labelKey:		"language",
			pickListKey:	"languageList"},
		
		telephonePart1AContact: {
			somExpression: "txtTelephone",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:		"telephone"},
		
		extensionPart1A: {
			somExpression: "txtExtension",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:		"extension",
			toolTipKey:		"phoneExtension_tip"},
		
		faxPart1A: {
			somExpression: 	"txtFax",
			parentNodeKey: 	"sfPart1ACompanyDetail",
			labelKey:		"faxNumber"},
		
		emailPart1A: {
			somExpression: "txtEmail",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:		"email",
			delegate:		"script.core.model.delegate.EmailDelegate"
			},
		
		sfPart1B: {
			somExpression: "sfPart1B",
			parentNodeKey: "sfAddresses"},
		
		sfPart1BCompanyHeader: {
			somExpression: "sfPart1BCompanyHeader",
			parentNodeKey: "sfPart1B"},
		
		part1BSubHeading: {
			somExpression: "lblContactAddress",
			parentNodeKey: "sfPart1BCompanyHeader",
			labelKey:		"companyNameHeading"},
			
		companyAddressSameAsManufact: {
			somExpression: "chkSameManufacturer",
			parentNodeKey: "sfPart1BCompanyHeader",
			labelKey:		"manufactAddressSameAs"},
		
		sfPart1BCompanyDetail: {
			somExpression: "sfPart1BCompanyDetail",
			parentNodeKey: "sfPart1B"},
		
		companyNamePart1B: {
			somExpression:	"txtCompanyName",
			parentNodeKey:	"sfPart1BCompanyDetail",
			fieldNumber:	"",
			labelKey:		"lbCompanyName"},
		
		companyAddress: {
			somExpression: "txtAddress",
			parentNodeKey: "sfPart1BCompanyDetail",
			fieldNumber:	"",
			labelKey:		"streetAddress"},
		
		companyCity: {
			somExpression: "txtCity",
			parentNodeKey: "sfPart1BCompanyDetail",
			fieldNumber:	"",
			labelKey:		"cityTown"},
		
		companyCountry: {
			somExpression:	"ddlCountry",
			parentNodeKey:	"sfPart1BCompanyDetail",
			pickListKey:	"countryList"
			},
		
		companyProvince: {
			somExpression:	"ddlProvince",
			parentNodeKey:	"sfPart1BCompanyDetail",
			fieldNumber:		"",
			delegate:		"script.core.model.delegate.ProvinceStateDelegate"
			},
		
		companyPostalCode: {
			somExpression:	"txtPostalCode",
			parentNodeKey:	"sfPart1BCompanyDetail",
			fieldNumber:		"",
			delegate:		"script.core.model.delegate.PostalZipDelegate"},
		
		sfPart1BContactHeader: {
			somExpression: "sfPart1BContactHeader",
			parentNodeKey: "sfPart1B"},
		
		companyContactPerson: {
			somExpression:	"lblContactPersonMS",
			parentNodeKey:	"sfPart1BContactHeader",
			labelKey:		"contact1BHeading"},
		
		companyContactSameAsManufact: {
			somExpression: "chkSameManufacturer",
			parentNodeKey: "sfPart1BContactHeader",
			labelKey:		"manufactContactSameAs"},
		
		sfPart1BContactDetail: {
			somExpression: "sfPart1BContactDetail",
			parentNodeKey: "sfPart1B"},
		
		salutationPart1BContact: {
			somExpression: "ddlSalutation",
			parentNodeKey: "sfPart1BContactDetail",
			labelKey:		"salutation",
			//pickListKey:	"salutationList"},
			pickListKey: "listSalutation"},
		
		givenNamePart1BContact: {
			somExpression:	"txtGivenName",
			parentNodeKey:	"sfPart1BContactDetail",
			labelKey:		"givenName"},
		
		initialsPart1BContact: {
			somExpression: "txtInitials",
			parentNodeKey: "sfPart1BContactDetail",
			labelKey:		"nameInitials"},
		
		surnamePart1BContact: {
			somExpression: "txtSurname",
			parentNodeKey: "sfPart1BContactDetail",
			fieldNumber:	"",
			labelKey:		"surname"},
		
		titlePart1BContact: {
			somExpression: "txtTitle",
			parentNodeKey: "sfPart1BContactDetail",
			fieldNumber:	"",
			labelKey:		"title"},
		
		langPrefPart1BContact: {
			somExpression: "ddlLangPref",
			parentNodeKey: "sfPart1BContactDetail",
			fieldNumber:	"",
			labelKey:		"language",
			pickListKey:	"languageList"},
		
		telephonePart1BContact: {
			somExpression: "txtTelephone",
			parentNodeKey: "sfPart1BContactDetail",
			fieldNumber:	"",
			labelKey:		"telephone"},
		
		extensionPart1B: {
			somExpression:	"txtExtension",
			parentNodeKey:	"sfPart1BContactDetail",
			labelKey:		"extension"},
		
		faxPart1BContact: {
			somExpression: "txtFax",
			parentNodeKey: "sfPart1BContactDetail",
			fieldNumber:	"",
			labelKey:		"faxNumber"},
		
		mailPart1BContact: {
			somExpression: "txtEmail",
			parentNodeKey: "sfPart1BContactDetail",
			fieldNumber:	"",
			//labelKey:		"email"
			delegate:		"script.core.model.delegate.EmailDelegate"},
		
		sfPart1C: {
			somExpression: "sfPart1C",
			parentNodeKey: "sfAddresses"},
		
		sfPart1CCompanyHeader: {
			somExpression: "sfPart1CCompanyHeader",
			parentNodeKey: "sfPart1C"},
		
		part1CContactHeading: {
			somExpression: "lblContactAddress",
			parentNodeKey: "sfPart1CCompanyHeader",
			labelKey:		"regMailHeading"},
		
		regAddressSameAsManufacturer: {
			somExpression:	"chkRegAddrSameManufactr",
			parentNodeKey:	"sfPart1CCompanyHeader",
			labelKey:		"manufactAddressSameAs"},
		
		part1CNotApplicable: {
			somExpression:	"chkNotApplicable",
			parentNodeKey:	"sfPart1CCompanyHeader",
			labelKey:		"notApplicable"},
		
		sfPart1CCompanyDetail: {
			somExpression: "sfPart1CCompanyDetail",
			parentNodeKey: "sfPart1C"},
		
		companyNameRegMail: {
			somExpression:	"txtCompanyName",
			parentNodeKey:	"sfPart1CCompanyDetail",
			fieldNumber:	"",
			labelKey:		"lbCompanyName"},
		
		addressRegMail: {
			somExpression:	"txtAddress",
			parentNodeKey:	"sfPart1CCompanyDetail",
			labelKey:		"streetAddress"},
		
		cityRegMail: {
			somExpression: "txtCity",
			parentNodeKey: "sfPart1CCompanyDetail",
			fieldNumber:	"37"},
		
		countryRegMail: {
			somExpression:	"ddlCountry",
			parentNodeKey:	"sfPart1CCompanyDetail",
			fieldNumber:		"39",
			pickListKey:		"countryList"
			},
		
		provinceRegMail: {
			somExpression:	"ddlProvince",
			parentNodeKey:	"sfPart1CCompanyDetail",
			fieldNumber:		"",
			delegate:		"script.core.model.delegate.ProvinceStateDelegate"
			},
		
		postalCodeRegMail: {
			somExpression:	"txtPostalCode",
			parentNodeKey:	"sfPart1CCompanyDetail",
			fieldNumber:		"",
			delegate:		"script.core.model.delegate.PostalZipDelegate"
			},
		
		//Part 1C Regulatory Contact
		sfPart1CContactHeader: {
			somExpression: "sfPart1CContactHeader",
			parentNodeKey: "sfPart1C"},
		
		contactPersonRegMail: {
			somExpression: "lblContactPersonMS",
			parentNodeKey: "sfPart1CContactHeader",
			labelKey:		"regContactHeading"},
		
		regContactSameAs: {
			somExpression: "chkRegContactSameAs",
			parentNodeKey: "sfPart1CContactHeader",
			labelKey:		"manufactContactSameAs"},
			
		part1CContactDetail: {
			somExpression: "sfPart1CContactDetail",
			parentNodeKey: "sfPart1C"},
		
		salutationRegMail: {
			somExpression: "ddlSalutation",
			parentNodeKey: "part1CContactDetail",
			labelKey:		"salutation",
			//pickListKey:	"salutationList"},
			pickListKey: "listSalutation"},
		
		givenNameRegMail: {
			somExpression: "txtGivenName",
			parentNodeKey: "part1CContactDetail",
			labelKey:		"givenName"},
		
		initialsRegMail: {
			somExpression: "txtInitials",
			parentNodeKey: "part1CContactDetail",
			labelKey:		"nameInitials"},
		
		surnameRegMail: {
			somExpression: "txtSurname",
			parentNodeKey: "part1CContactDetail",
			fieldNumber:	"",
			labelKey:		"surname"},
		
		titleRegMail: {
			somExpression: "txtTitle",
			parentNodeKey: "part1CContactDetail",
			fieldNumber:	"",
			labelKey:		"title"},
		
		langPrefRegMail: {
			somExpression: "ddlLangPref",
			parentNodeKey: "part1CContactDetail",
			fieldNumber:	"",
			labelKey:		"language",
			pickListKey:	"languageList"},
		
		telephoneRegMail: {
			somExpression: 	"txtTelephone",
			parentNodeKey:	"part1CContactDetail",
			fieldNumber:	"",
			labelKey:		"telephone"},
		
		extensionRegMail: {
			somExpression: "txtExtension",
			parentNodeKey: "part1CContactDetail",
			labelKey:		"extension",
			toolTipKey:		"phoneExtension_tip"},
		
		faxRegMail: {
			somExpression:	"txtFax",
			parentNodeKey:	"part1CContactDetail",
			fieldNumber:	"",
			labelKey:		"faxNumber"},
		
		emailRegMail: {
			somExpression:	"txtEmail",
			parentNodeKey:	"part1CContactDetail",
			fieldNumber:	"",
			//labelKey:		"email",
			delegate:		"script.core.model.delegate.EmailDelegate"},
		
		sfPart1D: {
			somExpression: "sfPart1D",
			parentNodeKey: "sfAddresses"},
		
		sfPart1DCompanyHeader: {
			somExpression: "sfPart1DCompanyHeader",
			parentNodeKey: "sfPart1D"},
		
		part1DSubHeading: {
			somExpression:	"lblContactAddress",
			parentNodeKey:	"sfPart1DCompanyHeader",
			labelKey:		"importerHeading"},
		
		importerSameRegulatory: {
			somExpression: "chkSameRegulatory",
			parentNodeKey: "sfPart1DCompanyHeader",
			labelKey:		"regMailSameAs"},
		
		sfPart1DCompanyDetail: {
			somExpression:	"sfPart1DCompanyDetail",
			parentNodeKey:	"sfPart1D"},
		
		companyNameImporter: {
			somExpression: "txtCompanyName",
			parentNodeKey: "sfPart1DCompanyDetail",
			fieldNumber:	"",
			labelKey:		"lbCompanyName"},
		
		addressImporter: {
			somExpression: "txtAddress",
			parentNodeKey: "sfPart1DCompanyDetail",
			fieldNumber:	"",
			labelKey:		"streetAddress"},
		
		cityImporter: {
			somExpression: "txtCity",
			parentNodeKey: "sfPart1DCompanyDetail",
			fieldNumber:	"",
			labelKey:		"cityTown"},
		
		countryImporter: {
			somExpression:	"txtCountry",
			parentNodeKey:	"sfPart1DCompanyDetail",
			fieldNumber:	"",
			labelKey:		"country"},
		
		provinceImporter: {
			somExpression: "ddlProvince",
			parentNodeKey: "sfPart1DCompanyDetail",
			labelKey:		"province",
			pickListKey:	"provinceList"},
		
		postalCodeImporter: {
			somExpression: "txtPostalCode",
			parentNodeKey: "sfPart1DCompanyDetail",
			labelKey:		"postalCode"},
			
		
		lblRationale: {
			somExpression: "lblRationale",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:      "lbAttest"},
		
		ddlCertSalutation: {
			somExpression: "ddlCertSalutation",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:      "salutation",
			//pickListKey:   "salutationList"},
			pickListKey: "listSalutation"},
		
		txtCertGivenName: {
			somExpression: "txtCertGivenName",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:      "lbCertGivenName"},
		
		txtCertSurname: {
			somExpression: "txtCertSurname",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:      "lbCertSurname"},
			
		txtInitialsCert: {
			somExpression: "txtInitialsCert",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:		"nameInitials"},
		
		txtCertTitle: {
			somExpression: "posTitle",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:      "lbCertTitle"},
		
		sigCertSignature: {
			somExpression: "sigSignature",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:      "lbCertSignature"},
		
		ddtCertSignedOn: {
			somExpression: "ddtSignedOn",
			parentNodeKey: "sfPart1ACompanyDetail"},

		lblCertHeader: {
			somExpression: "lblCertification",
			parentNodeKey: "sfPart1ACompanyDetail",
			labelKey:      "lbCertHeader"}

}//end var content
</script>
               <?templateDesigner expand 1?></variables>
            <?templateDesigner expand 1?></subform>
         <subform w="100mm" h="50mm" name="resources">
            <variables>
               <script contentType="application/x-javascript" name="addressLabels_en">
var content={


	
	part1DrugInfo:			"Part 4 - Manufacturer Information",
	manufactMailingHeading:	"A)  MANUFACTURINGO INFORMATION AND CERTIFICATON",
	manufactSponser:		"Manufacturer Contact",
	regMailHeading:			"C) REGULATORY MAILING ADDRESS",
	companyNameHeading:		"B)  COMPANY NAME &amp; ADDRESS  (For THIS Drug Submission)",
	importerHeading:		"D)  CANADIAN IMPORTER MAILING ADDRESS",
	manufactAddressSameAs:	"Same as A Above (i.e. Manufacturer/Sponsor Mailing Address)",
	manufactContactSameAs:	"Same as A Above (i.e. Manufacturer/Sponsor Contact)",
	regMailSameAs:			"Same as C Above (i.e. Regulatory Mailing Address)",
	contact1BHeading:		"Contact (for THIS Drug Submission)",
	regContactHeading:		"Regulatory Contact",
	notApplicable:			"Not Applicable",
	lbCompanyName:			"Company Name",	
	streetAddress:			"Street/Suite/PO Box",
	cityTown:				"City - Town",
	country:				"Country",
	salutation:				"Salutation",
	givenName:				"Given Name",
	nameInitials:			"Initials",
	surname:				"Surname",
	title:					"Title",
	language:				"Language",
	telephone:				"Telephone No.",
	extension:				"Ext.",
	faxNumber:				"Fax No.",
	email:					"Email",
	title:					"Title",
	lbCertHeader:           "Certification",
	lbAttest:			    "I certify that the information included in this Declaration is accurate and relevant to the Patented Medicines (Notice of Compliance) Regulations.",
	lbCertSalutation:       "Salutation",
	lbCertGivenName:        "Given Name",
	lbCertSurname:		    "Surname",
	lbCertTitle:            "Title",
	lbCertSignature:        "Signature",
	listSalutation:	[
				["MR","Mr."],
				["MRS","Mrs."],
				["MS","Ms."],
				["DR","Dr."],
	
	],	
	
  
	
	//add comma if adding more

}

</script>
               <script contentType="application/x-javascript" name="addressLabels_fr">
var content={


	
	part1DrugInfo:			"fr_Part 4 - Renseignements sur le fabricant",
	manufactMailingHeading:	"fr_A)  Information et de la certification maufacturing",
	manufactSponser:		"Personne-ressource du fabricant",
	regMailHeading:			"fr_C) REGULATORY MAILING ADDRESS",
	companyNameHeading:		"fr_B)  COMPANY NAME &amp; ADDRESS  (For THIS Drug Submission)",
	importerHeading:		"fr_D)  CANADIAN IMPORTER MAILING ADDRESS",
	manufactAddressSameAs:	"fr_Same as A Above (i.e. Manufacturer/Sponsor Mailing Address)",
	manufactContactSameAs:	"fr_Same as A Above (i.e. Manufacturer/Sponsor Contact)",
	regMailSameAs:			"fr_Same as C Above (i.e. Regulatory Mailing Address)",
	contact1BHeading:		"fr_Contact (for THIS Drug Submission)",
	regContactHeading:		"fr_Regulatory Contact",
	notApplicable:			"fr_Not Applicable",
	lbCompanyName:			"Nom de l'entreprise",	
	streetAddress:			"Rue/Bureau/C. P.",
	cityTown:				"Ville",
	country:				"Pays",
	salutation:				"Le titre de civilité",
	givenName:				"Prénom",
	nameInitials:			"Initiales",
	surname:				"Nom",
	title:					"Titre",
	language:				"Langue de préférence",
	telephone:				"No de téléphone",
	extension:				"No de poste",
	faxNumber:				"No de télécopieur",
	email:					"Courriel",
	title:					"Titre",
	lbCertHeader:           "Attestation",
	lbAttest:				"Je certifie que les renseignements contenus dans la présente déclaration sont exacts et pertinents quant au Règlement sur les médicaments brevetés (avis de conformité).",
	lbCertSalutation:       "Appel",
	lbCertGivenName:        "Prénom",
	lbCertSurname:		    "Nom",
	lbCertTitle:            "Titre",
	lbCertSignature:        "Signature",
	listSalutation:	[
				["MR","M."],
				["MRS","Mme"],
				["MS","Mlle"],
				["DR","Dr."],
	
	],	
	
	
	//add comma if adding more

}
</script>
               <script contentType="application/x-javascript" name="addressTooltips_en">
var content={


	phoneExtension_tip:		"Provide the telephone extension number, if it exists",



}

</script>
               <script contentType="application/x-javascript" name="addressTooltips_fr">var content={


	phoneExtension_tip:		"Indiquez le numéro de poste téléphonique, si elle existe",



}

</script>
               <?templateDesigner expand 1?></variables>
            <?templateDesigner expand 1?></subform>
         <?templateDesigner expand 1?>
         <?templateDesigner isFragment yes?>
         <?templateDesigner fragmentTitle RegulatoryAddresses?></subform>
   </subform>
   <?templateDesigner SaveTaggedPDF 1?>
   <?templateDesigner SavePDFWithEmbeddedFonts 1?>
   <?templateDesigner FormTargetVersion 30?>
   <?templateDesigner Rulers horizontal:1, vertical:1, guidelines:1, crosshairs:0?>
   <?templateDesigner Zoom 114?></template>
<config xmlns="http://www.xfa.org/schema/xci/3.0/">
   <agent name="designer">
      <!--  [0..n]  -->
      <destination>pdf</destination>
      <pdf>
         <!--  [0..n]  -->
         <fontInfo/>
      </pdf>
   </agent>
   <present>
      <!--  [0..n]  -->
      <destination>pdf</destination>
      <pdf>
         <!--  [0..n]  -->
         <fontInfo/>
         <version>1.7</version>
         <adobeExtensionLevel>5</adobeExtensionLevel>
      </pdf>
      <xdp>
         <packets>*</packets>
      </xdp>
   </present>
</config>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.398682, 2009/08/10-13:00:47        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about="">
         <xmp:MetadataDate>2014-05-12T17:33:50Z</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe LiveCycle Designer ES 10.0</xmp:CreatorTool>
      </rdf:Description>
      <rdf:Description xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about="">
         <pdf:Producer>Adobe LiveCycle Designer ES 10.0</pdf:Producer>
      </rdf:Description>
      <rdf:Description xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/" rdf:about="">
         <xmpMM:DocumentID>uuid:666e175e-61a7-42ed-986f-5edc5de84439</xmpMM:DocumentID>
      </rdf:Description>
      <rdf:Description xmlns:lcd="http://ns.adobe.com/livecycle/designer/" xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about="">
         <lcd:fragmentCatalog>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <dc:title>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default">RegulatoryAddresses</rdf:li>
                     </rdf:Alt>
                  </dc:title>
                  <dc:description>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default"/>
                     </rdf:Alt>
                  </dc:description>
                  <dc:identifier>$template.form1.RegulatoryAddresses</dc:identifier>
                  <lcd:fragmentRole>Subform</lcd:fragmentRole>
               </rdf:li>
            </rdf:Seq>
         </lcd:fragmentCatalog>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
<localeSet xmlns="http://www.xfa.org/schema/xfa-locale-set/2.7/">
   <locale name="en_US" desc="English (United States)">
      <calendarSymbols name="gregorian">
         <monthNames>
            <month>January</month>
            <month>February</month>
            <month>March</month>
            <month>April</month>
            <month>May</month>
            <month>June</month>
            <month>July</month>
            <month>August</month>
            <month>September</month>
            <month>October</month>
            <month>November</month>
            <month>December</month>
         </monthNames>
         <monthNames abbr="1">
            <month>Jan</month>
            <month>Feb</month>
            <month>Mar</month>
            <month>Apr</month>
            <month>May</month>
            <month>Jun</month>
            <month>Jul</month>
            <month>Aug</month>
            <month>Sep</month>
            <month>Oct</month>
            <month>Nov</month>
            <month>Dec</month>
         </monthNames>
         <dayNames>
            <day>Sunday</day>
            <day>Monday</day>
            <day>Tuesday</day>
            <day>Wednesday</day>
            <day>Thursday</day>
            <day>Friday</day>
            <day>Saturday</day>
         </dayNames>
         <dayNames abbr="1">
            <day>Sun</day>
            <day>Mon</day>
            <day>Tue</day>
            <day>Wed</day>
            <day>Thu</day>
            <day>Fri</day>
            <day>Sat</day>
         </dayNames>
         <meridiemNames>
            <meridiem>AM</meridiem>
            <meridiem>PM</meridiem>
         </meridiemNames>
         <eraNames>
            <era>BC</era>
            <era>AD</era>
         </eraNames>
      </calendarSymbols>
      <datePatterns>
         <datePattern name="full">EEEE, MMMM D, YYYY</datePattern>
         <datePattern name="long">MMMM D, YYYY</datePattern>
         <datePattern name="med">MMM D, YYYY</datePattern>
         <datePattern name="short">M/D/YY</datePattern>
      </datePatterns>
      <timePatterns>
         <timePattern name="full">h:MM:SS A Z</timePattern>
         <timePattern name="long">h:MM:SS A Z</timePattern>
         <timePattern name="med">h:MM:SS A</timePattern>
         <timePattern name="short">h:MM A</timePattern>
      </timePatterns>
      <dateTimeSymbols>GyMdkHmsSEDFwWahKzZ</dateTimeSymbols>
      <numberPatterns>
         <numberPattern name="numeric">z,zz9.zzz</numberPattern>
         <numberPattern name="currency">$z,zz9.99|($z,zz9.99)</numberPattern>
         <numberPattern name="percent">z,zz9%</numberPattern>
      </numberPatterns>
      <numberSymbols>
         <numberSymbol name="decimal">.</numberSymbol>
         <numberSymbol name="grouping">,</numberSymbol>
         <numberSymbol name="percent">%</numberSymbol>
         <numberSymbol name="minus">-</numberSymbol>
         <numberSymbol name="zero">0</numberSymbol>
      </numberSymbols>
      <currencySymbols>
         <currencySymbol name="symbol">$</currencySymbol>
         <currencySymbol name="isoname">USD</currencySymbol>
         <currencySymbol name="decimal">.</currencySymbol>
      </currencySymbols>
      <typefaces>
         <typeface name="Myriad Pro"/>
         <typeface name="Minion Pro"/>
         <typeface name="Courier Std"/>
         <typeface name="Adobe Pi Std"/>
         <typeface name="Adobe Hebrew"/>
         <typeface name="Adobe Arabic"/>
         <typeface name="Adobe Thai"/>
         <typeface name="Kozuka Gothic Pro-VI M"/>
         <typeface name="Kozuka Mincho Pro-VI R"/>
         <typeface name="Adobe Ming Std L"/>
         <typeface name="Adobe Song Std L"/>
         <typeface name="Adobe Myungjo Std M"/>
      </typefaces>
   </locale>
</localeSet></xdp:xdp>
