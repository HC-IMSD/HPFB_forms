<?xml version="1.0" encoding="UTF-8"?>
<?xfa generator="AdobeLiveCycleDesignerES_V10.5.0.20120807.1.873223" APIVersion="3.6.12219.0"?>
<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/" timeStamp="2020-06-23T15:47:20Z" uuid="4102209d-19f9-40cf-813a-3822261f027a">
<template xmlns="http://www.xfa.org/schema/xfa-template/3.0/">
   <?formServer defaultPDFRenderFormat acrobat9.1static?>
   <subform name="form1" locale="en_US" layout="tb">
      <pageSet>
         <pageArea>
            <contentArea x="12.7mm" y="15.24mm" w="190.5mm" h="243.84mm"/>
            <medium stock="letter" short="215.9mm" long="279.4mm"/>
         </pageArea>
      </pageSet>
      <subform>
         <variables>
            <script contentType="application/x-javascript" name="Core">
/** Document ready handler. */
function initializeDocument()
{
	// Which language should be displayed?
	var sLanguage = Util.getFormLanguage();
	//console.println(sLanguage);
	// The form is opened for the first time. Just show the content.
	sLanguage == "en" ? _EN.setInstances(1) : _FR.setInstances(1);	
	hideButtonsOnLockedForm(sLanguage);
}

function hideButtonsOnLockedForm()
{
	
	var oSignatureBlock = _EN.count &gt; 0 ? xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.SignatureBlock") : xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.SignatureBlock");
	if (oSignatureBlock != null){
		if (_EN.count &gt; 0){
			if (xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.SignatureBlock.SignatureOption.signatureOption").rawValue == "IMG_SIG")
			{
				if (xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.SignatureBlock.DigitalImage.signDate").rawValue != null)
				{
					xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.FinalizeModify")._Modify.setInstances(1);
					Util.lockAllFields(xfa.form.resolveNode("#subform"));
					//June 11th, 2020 - 
					xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.SignatureBlock.DigitalImage.imgSignature").access = "readOnly";
					xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.FinalizeModify").access = "protected";
					xfa.form.resolveNode("HC.EN.Instructions.InstructionButtons").access = "protected";
					
					
					//Ensure users can export the data after its signed
					//Util.unLockAllFields(xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.FinalizeModify.FormXML"));
				//June 11th, 2020						
				}else if(checkSignature() != 0)
				{	
					xfa.form.resolveNode("HC.EN.Instructions.InstructionButtons").access = "protected";			
					xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.Finalize.FinalizeModify").access = "protected";
					xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.SignatureBlock.DigitalImage.imgSignature").access = "readOnly";
				}
			}
		}else{//French
			if (xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.SignatureBlock.SignatureOption.signatureOption").rawValue == "IMG_SIG"){
				if (xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.SignatureBlock.DigitalImage.signDate").rawValue != null){
					xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.FinalizeModify")._Modify.setInstances(1);
					Util.lockAllFields(xfa.form.resolveNode("#subform"));
					//June 11th, 2020 - 
					xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.SignatureBlock.DigitalImage.imgSignature").access = "readOnly";
					xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.FinalizeModify").access = "protected";
					xfa.form.resolveNode("HC.FR.Instructions.InstructionButtons").access = "protected";
					
					//Ensure users can export the data after its signed
					//Util.unLockAllFields(xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.FinalizeModify.FormXML"));
				//June 11th, 2020						
				}else if(checkSignature() != 0)
				{	
					xfa.form.resolveNode("HC.FR.Instructions.InstructionButtons").access = "protected";			
					xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.FinalizeModify").access = "protected";
					xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.SignatureBlock.DigitalImage.imgSignature").access = "readOnly";
				}
							
			}
		}
			
	}
}

/** Validates the form  from the custom script. */
function execValidateForm()
{
	// Finalize the form validation including business rules,
	// mandatory fields, attachements, etc. This function is
	// called during the submission operation.
	var bValid = true;	
	////var language = Util.getFormLanguage();

	// Let the form do its validation first. Use when setting captionless mandatoires etc
	
	bValid = validateForm();	
			
	//Force form validation - Use when not doing captionless mandatories . For this to work, the target version needs to change to 9.0 and up from 10.1 and above		
	//if (bValid){				
	//	bValid = xfa.form.execValidate();				
	//}	
	/**
	if (!bValid){
		setCaption();
	}
	*/
	//This setFocusOnFailedObject must be the last validation before the return.
	if (!bValid){
		setFocusOnFailedObject();
	}

	return bValid;
	
}

//===================================================================

/** Validates the form. Returns true when valid, false otherwise. */
function validateForm()
{
	// Set the mandatory properties.
	// The mandatory propery isn't set at the object level since it generates 
	// warnings at unexpected time. 
	// A bug was logged with Adobe (LCDTN8). Turn off the mandatory setting 
	// as it may trigger unwanted warnings as user fixes the form. 
	
	var oFields = Util.getFormFields();	
	resetMandatoryFields(oFields);
	setMandatoryFields(oFields);
	
	// Warn the user if there are any invalid fields.
	var bValid = xfa.form.resolveNode("#subform").execValidate();	

	// Also, we don't want the to be sent with 
	// mandatory fields so the next user (if any) won't stumble on warning
	// messages
	//Removed June 19th, 2020.
	//if (bValid)
	//	resetMandatoryFields(oFields);

	return bValid;
}


/** 
 * Utility function reseting the mandatory property of the form fields. 
 * @param oFields is an array of fields displayed in this form. 
 */
function resetMandatoryFields(oFields)
{	
	// Now disable the mandatory property.
	var bMandatory = false;
	setMandatory(oFields, bMandatory);
}


/** 
 * Utility function reseting the mandatory property of the form fields.
 * @param oFields is an array of fields displayed in this form. 
 */
function setMandatoryFields(oFields)
{	
	// Now disable the mandatory property.
	var bMandatory = true;
	setMandatory(oFields, bMandatory);
}


/** 
 * Sets the mandatory property of the given fields.
 * @param oMandatoryFields an array storing the list of mandatory fields.
 * @param bMandatory true if the mandatory property is enabled, false otherwise.
 */
function setMandatory(oFields, bMandatory)
{	
	var oOptionalFields = FormScripts.getOptionalFields();
	var nLen = oFields.length;
	
	for (var i = 0; i &lt; nLen; i++)
	{
		// Filter out optional fields when enabling the mandatory property.
		var oField = oFields[i];
		if (bMandatory)
		{
			var bOptional = isOptional(oOptionalFields, oField);
			if (bOptional)
				continue;
		}
				
		oField.mandatory = bMandatory ? "error" : "disabled";
		
		
	}	
	
	// Udpate the layout as it's not always showing the invalid appearance.
	xfa.layout.relayout();	
}  


/** 
 * Returns true if the given field is optional.
 * @param oOptionalFields an array storing the list of optional fields.
 * @param oField reference to the field.
 */
function isOptional(oOptionalFields, oField)
{
	var bIsOptional = false;
	var nLen = oOptionalFields.length;
	for (var i = 0; i &lt; nLen; i++)
	{		
		if (oField == oOptionalFields[i])
		{	
			bIsOptional = true;
			break;
		}	
	}
	
	return bIsOptional;
}
         

/** Global variables holding the generic mandatory messages. */
var sDefaultMandatoryEN = "The following field must contain a value: ";
var sDefaultMandatoryFR = "Le champ suivant doit contenir une valeur : ";

/**
 * Set the mandatory mandatory of the given fields. 
 * @param oFields is a nodelist of fields.
 * @param sHeading is the section's heading text.
 */
function setMandatoryMessage(oFields, sHeading)
{
	var nLen = oFields.length;
	for (var i = 0; i &lt; nLen; i++)
	{
	 	// Skip over barcodes, radio buttons, buttons and floating fields.
	 	var oField = oFields.item(i);
		var sUIClassName = oField.resolveNode("#ui").oneOfChild.className;
		if (sUIClassName == "barcode" || sUIClassName == "button" || sUIClassName == "checkButton" || oField.presence == "hidden") 
			continue;	
			
		// Radio buttons will be set separately.
		if (oField.parent.className == "exclGroup")
			continue;

		// Skip over rich text	
		var oCaption = oField.resolveNode("#caption.#value.#text");
		if (oCaption)
		{
			var sCaption = oCaption.value;
			var sGenericMessage = Util.getFormLanguage() == "en" ? sDefaultMandatoryEN : sDefaultMandatoryFR;
			var sMessage = "- " + sHeading + " -\n" + sGenericMessage + sCaption + ".";
			//var sMessage = sGenericMessage + sCaption + ".";
			oField.mandatoryMessage = cleanupString(sMessage);
		}
	}
}
                           

/**
 * Sets the mandatory message of the given field (fields without caption or rich text caption).
 * @param oField field reference.
 * @param sHeading is the section's heading text.
 * @param sCaption is the text related to the field.
 */
function setCaptionlessMandatoryMessage(oField, sHeading, sCaption)
{
	var sGenericMessage = Util.getFormLanguage() == "en" ? sDefaultMandatoryEN : sDefaultMandatoryFR;
	var sMessage = "- " + sHeading + " -\n" + sGenericMessage + sCaption + ".";   
	oField.mandatoryMessage = cleanupString(sMessage);
}
 
 
/**
 * Sets the mandatory message of the given field (field doesn't have a section heading to display).
 * @param oField field reference.
 * @param sCaption is the text related to the field.
 */
function setHeadinglessMandatoryMessage(oField, sCaption)
{
	var sGenericMessage = Util.getFormLanguage() == "en_CA" ? sDefaultMandatoryEN : sDefaultMandatoryFR;
	var sMessage = sGenericMessage + sCaption + ".";   
	oField.mandatoryMessage = cleanupString(sMessage);
}


/** Remove unwanted characters from the text. */
function cleanupString(sText)
{
	// Some string may end up with '..' or a '?.'
	var sTemp1 = sText.replace("..", ".");
	var sTemp2 = sTemp1.replace("?.", "?");	
	var sTemp3 = sTemp2.replace(" :.", ".");	
	var sClean = sTemp3.replace(":.", ".");	
	return sClean;
} 

/*********************************************************
Set the focus on the first object that failed validation
**********************************************************/
function setFocusOnFailedObject()
{
	var oFields = Util.getFormFields();
	var nLen = oFields.length;
	for (var i = 0; i &lt; nLen; i++)
	{
		if (oFields[i].errorText != "")
		{
			xfa.host.setFocus(oFields[i]);
			return;
		}		
	}
}  

function showSuccessValidateMsg()
{
	var sLanguage = Util.getFormLanguage();
	var sEnTitle = "Validation Successful";			
	var sFrTitle = "Validation réussie";
	var sTitle = sLanguage == "en" ? sEnTitle : sFrTitle ;
	var sENMsg = "This form successfully validated and locked from editing. Please sign the form before submitting to Health Canada. \n\nIn order to modify fields after finalizing, you must press the Modify button at the bottom of the form.";
	var sFRMsg = "Le formulaire a été validé et verrouillé contre l’édition. Il peut maintenant être imprimé et envoyé à Santé Canada \n\nPour pouvoir modifier le formulaire, appuyez sur le bouton « Modifier »";	
	var sFirstMsg = Util.getFormLanguage() == "en" ? sENMsg : sFRMsg;
	
	var sEnSaveMsg ="\n\nWe strongly encourage you to save the form at this point. Once the form is digitally signed, you will not be able to correct it and you will need to re-input all the information again. Please proceed to signing the form after saving it.";
	var sFrSaveMsg ="\n\nNous vous encourageons fortement à sauvegardé le formulaire à ce point-ci. Une fois que le formulaire est signé électroniquement, vous serez incapable de le corriger et vous aurez à entrer à nouveau toutes l’information. Veuillez procéder à la signature du formulaire une fois que vous l’avez sauvegardé.";
	var sSecondMsg = Util.getFormLanguage() == "en" ? sEnSaveMsg: sFrSaveMsg;
	
	var sMessage = sFirstMsg + sSecondMsg;
	//var sMessage = Util.getFormLanguage() == "en" ? sFirstMsg + sSecondMsg  : sFRMsg;
	xfa.host.messageBox(sMessage,sTitle ,3) 
}

/** Checks to see if the form is signed, if its not signed then unlock some sections.
The user has the ability to clear the signature so this will ensure that once they do that they can edit the form.
Called from the Signature objects change event
*/
function checkSignature()
{
	/** signatureValidate() function return codes
	0: cleared??
	1: not signed...
	2: invalid signature...
	3: valid but identity of signer cannot be verified...
	4: valid signature...
	Any Other: error -- unexpected status code
	
	if its not 0 that means it signed
	*/
	//var status = false;
	var oDigSig = _EN.count &gt; 0 ? event.target.getField("HC.EN.Wrapper.FinalBlock.SignatureBlock.DigitalSignature.digSignature") : event.target.getField("HC.FR.Wrapper.FinalBlock.SignatureBlock.DigitalSignature.digSignature");
	if (oDigSig != null){
		var status = oDigSig.signatureValidate();
		status = parseInt(status);
		return status;
		//If the form is not signed Show Modify button
	//	console.println(status);
	//	if (status != 3 || status != 4)
	//	{
	}			

}
//Handles showing and hiding of buttons during signing.
//Called from digSignature::preSign
function signingButtonHandler()
{
	
	if (_EN.count &gt; 0 ){//English
	                          //EN.Wrapper.FinalBlock.FinalizeModify
		xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock")._FinalizeModify.setInstances(1);
		xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.FinalizeModify")._Modify.setInstances(1);
		xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.FinalizeModify")._Final.setInstances(0);
		
	}else{//French
		xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock")._FinalizeModify.setInstances(1);
		xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.FinalizeModify")._Modify.setInstances(1);
		xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.FinalizeModify")._Final.setInstances(0);
	}			
	
}

function checkDigImageType(oImgSig)
{
	if(oImgSig.rawValue !=null){
		var img = oImgSig.value.resolveNode("#image").contentType;
		
		var imgType = img.substr(img.length -3).toLowerCase();
		
		
		var imgFormatSplit = img.split("/");
		var imgFormat = imgFormatSplit[imgFormatSplit.length - 1].toLowerCase();
		
		if (imgFormat != "tif" &amp;&amp; imgFormat != "gif" &amp;&amp; imgFormat != "jpg" &amp;&amp; imgFormat != "png" &amp;&amp; imgFormat != "jpeg") {
			var sEnTitle = "Incorrect Image File Type";			
			var sFrTitle = "Type de fichier image incorrect";
			var sTitle = Util.getFormLanguage() == "en" ? sEnTitle : sFrTitle ;
			var sENMsg = "Please insert one of the following supported image file types: \n\n'tif', 'gif', 'jpg', 'png', 'jpeg'";
			var sFRMsg = "Veuillez insérer l'un des types de fichiers d'image pris en charge suivants: 'tif', 'gif', 'jpg', 'png', 'jpeg'";	
			var sMessage = Util.getFormLanguage() == "en" ? sENMsg : sFRMsg;
			xfa.host.messageBox(sMessage,sTitle ,3)
				
			oImgSig.rawValue = null;
		}
	}
}

function resetFormData()
{
	var sLanguage = _EN.count &gt; 0 ? "en" : "fr";
	var sEnTitle = "Reset Form";			
	var sFrTitle = "Réinitialiser";
	var sTitle = sLanguage == "en" ? sEnTitle : sFrTitle ;
	var sENMsg = "Do you wish to erase all data?";
	var sFRMsg = "Voulez-vous effacer toutes les données?";	
	var sMessage = sLanguage == "en" ? sENMsg : sFRMsg;
	
	//Workaround with imaged signed forms -  if the form is signed with an image, we need to prevent the reset from firing
	var oSignatureBlock = _EN.count &gt; 0 ? xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.SignatureBlock") : xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.SignatureBlock");
	//console.println(oSignatureBlock);
	if (oSignatureBlock !== null){
		if (_EN.count &gt; 0){
			if (xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.SignatureBlock.SignatureOption.signatureOption").rawValue == "IMG_SIG")
			{
				if (xfa.form.resolveNode("HC.EN.Wrapper.FinalBlock.SignatureBlock.DigitalImage.signDate").rawValue != null)
				{
					//Do nothing
					return;
				}else{
					var sResponse=xfa.host.messageBox(sMessage,sTitle,2,2);
					if (sResponse=="4"){		
						xfa.form.resolveNode("HC")._EN.setInstances(0);
						xfa.form.resolveNode("HC")._EN.setInstances(1);	
					}
				}			
			}
		}else{
			if (xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.SignatureBlock.SignatureOption.signatureOption").rawValue == "IMG_SIG")
			{
				if (xfa.form.resolveNode("HC.FR.Wrapper.FinalBlock.SignatureBlock.DigitalImage.signDate").rawValue != null)
				{
					//Do nothing
					return;
				}else{
					var sResponse=xfa.host.messageBox(sMessage,sTitle,2,2);
					if (sResponse=="4"){		
						xfa.form.resolveNode("HC")._FR.setInstances(0);
						xfa.form.resolveNode("HC")._FR.setInstances(1);	
					}
				}			
			}
		}
			
	}else{//Unsigned form allow reset to fire		
		if (_EN.count &gt; 0){
			
			var sResponse=xfa.host.messageBox(sMessage,sTitle,2,2);
			if (sResponse=="4"){		
				xfa.form.resolveNode("HC")._EN.setInstances(0);
				xfa.form.resolveNode("HC")._EN.setInstances(1);
									
				//May 15th, 2020 - Set the focus to the next object - 
				//Removed on June 18th, 2020
				//xfa.host.setFocus(xfa.form.resolveNode("HC.EN.Instructions.InstructionButtons.View.btnViewInstructions"));
				
			}
		}else{
			var sResponse=xfa.host.messageBox(sMessage,sTitle,2,2);
			if (sResponse=="4"){		
				xfa.form.resolveNode("HC")._FR.setInstances(0);
				xfa.form.resolveNode("HC")._FR.setInstances(1);
				
				//May 15th, 2020 - Set the focus to the next object
				//Removed on June 18th, 2020
				//xfa.host.setFocus(xfa.form.resolveNode("HC.FR.Instructions.InstructionButtons.View.btnViewInstructions"));
				
			}
		}
	
	}	
}


/**
	if (_EN.count &gt; 0 ){
		
	}else{
	}
/*


/**
// Set Plus Sign in caption
function setCaption()
{
	var oFields = Util.getFormFields();
	var nLen = oFields.length;
	var plus = "+";
	for (var i = 0; i &lt; nLen; i++)
	{
		if (oFields[i].errorText != "")
		{
			//console.println("Change caption for " + oFields[i].name);
			var oField = oFields[i];
			var sUIClassName = oField.resolveNode("#ui").oneOfChild.className;
			if (sUIClassName == "barcode" || sUIClassName == "button" || sUIClassName == "checkButton" || oField.presence == "hidden") 
				continue;	
			
			// Radio buttons will be set separately.
			if (oField.parent.className == "exclGroup")
				continue;

			//Set plus sign
			oFields[i].caption.value.text.value += plus;
			
		}		
	}
	setFocusOnFailedObject();
}
*/              
 
 /**
 * Set the tootltip of the given fields. (section name - fieldname)
 * @param oFields is a nodelist of fields.
 * @param sHeading is the section's heading text.
 * Objects tootltips must be set to Custom Text for this to work
 */
function setTooltip(oFields, sHeading)
{
	/*JUNE 19, 2020 - Removing because execValidate function bug clears coded tooltips after mandatory failure is satisfied 
	Workaround is to set the header and label in each objects tooltip property
	var nLen = oFields.length;
	for (var i = 0; i &lt; nLen; i++)
	{
	 	// Skip over barcodes, radio buttons, buttons and floating fields.
	 	var oField = oFields.item(i);
		var sUIClassName = oField.resolveNode("#ui").oneOfChild.className;
		if (sUIClassName == "barcode" || sUIClassName == "button" || sUIClassName == "checkButton" || oField.presence == "hidden") 
			continue;	
			
		// Radio buttons will be set separately.
		if (oField.parent.className == "exclGroup")
			continue;

		// Skip over rich text	
		var oCaption = oField.resolveNode("#caption.#value.#text");
		if (oCaption)
		{
			var sCaption = oCaption.value;			
			var sTooltip = sHeading + " - " + sCaption;			

			oField.assist.toolTip.value = Core.cleanupString(sTooltip);
			 
		}
	}*/
	//June 19th,2020 - Return nothing to do aforementioned bug
	return;
}
                           

/**
 * Sets the tooltip of given field (fields without caption (e.g. radio buttons or rich text caption). (section name - fieldname)
 * @param oField field reference.
 * @param sHeading is the section's heading text.
 * @param sCaption is the text related to the field.
 */
function setCaptionlesstoolTip(oField, sHeading, sCaption)
{
	//var sGenericMessage = Util.getFormLanguage() == "en" ? sDefaultMandatoryEN : sDefaultMandatoryFR;
	var sTooltip = sHeading + " - " + sCaption;   
	oField.assist.toolTip.value = Core.cleanupString(sTooltip);
}      

               
               

               
               

               
               

               
               

               
               

               
               

               
               

               
               

               
               

               
               

               
               

               
               

               
               

               
               

               
               

               <?templateDesigner isFragment yes?>
               <?templateDesigner fragmentTitle Core?></script>
         </variables>
      </subform>
   </subform>
   <?templateDesigner FormTargetVersion 30?>
   <?templateDesigner Zoom 126?>
   <?templateDesigner Rulers horizontal:1, vertical:1, guidelines:1, crosshairs:0?></template>
<config xmlns="http://www.xfa.org/schema/xci/3.0/">
   <agent name="designer">
      <!--  [0..n]  -->
      <destination>pdf</destination>
      <pdf>
         <!--  [0..n]  -->
         <fontInfo/>
      </pdf>
   </agent>
   <present>
      <!--  [0..n]  -->
      <destination>pdf</destination>
      <pdf>
         <!--  [0..n]  -->
         <fontInfo/>
         <version>1.7</version>
         <adobeExtensionLevel>5</adobeExtensionLevel>
      </pdf>
      <xdp>
         <packets>*</packets>
      </xdp>
   </present>
</config>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2011/06/07-10:39:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about="">
         <xmp:MetadataDate>2020-06-23T15:47:20Z</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe LiveCycle Designer ES 10.5</xmp:CreatorTool>
      </rdf:Description>
      <rdf:Description xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about="">
         <pdf:Producer>Adobe LiveCycle Designer ES 10.5</pdf:Producer>
      </rdf:Description>
      <rdf:Description xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/" rdf:about="">
         <xmpMM:DocumentID>uuid:4102209d-19f9-40cf-813a-3822261f027a</xmpMM:DocumentID>
      </rdf:Description>
      <rdf:Description xmlns:lcd="http://ns.adobe.com/livecycle/designer/" xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about="">
         <lcd:fragmentCatalog>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <dc:title>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default">Core</rdf:li>
                     </rdf:Alt>
                  </dc:title>
                  <dc:description>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default"/>
                     </rdf:Alt>
                  </dc:description>
                  <dc:identifier>$template.form1.#subform.#variables.Core</dc:identifier>
                  <lcd:fragmentRole>ScriptObject</lcd:fragmentRole>
               </rdf:li>
            </rdf:Seq>
         </lcd:fragmentCatalog>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
<localeSet xmlns="http://www.xfa.org/schema/xfa-locale-set/2.7/">
   <locale name="en_US" desc="English (United States)">
      <calendarSymbols name="gregorian">
         <monthNames>
            <month>January</month>
            <month>February</month>
            <month>March</month>
            <month>April</month>
            <month>May</month>
            <month>June</month>
            <month>July</month>
            <month>August</month>
            <month>September</month>
            <month>October</month>
            <month>November</month>
            <month>December</month>
         </monthNames>
         <monthNames abbr="1">
            <month>Jan</month>
            <month>Feb</month>
            <month>Mar</month>
            <month>Apr</month>
            <month>May</month>
            <month>Jun</month>
            <month>Jul</month>
            <month>Aug</month>
            <month>Sep</month>
            <month>Oct</month>
            <month>Nov</month>
            <month>Dec</month>
         </monthNames>
         <dayNames>
            <day>Sunday</day>
            <day>Monday</day>
            <day>Tuesday</day>
            <day>Wednesday</day>
            <day>Thursday</day>
            <day>Friday</day>
            <day>Saturday</day>
         </dayNames>
         <dayNames abbr="1">
            <day>Sun</day>
            <day>Mon</day>
            <day>Tue</day>
            <day>Wed</day>
            <day>Thu</day>
            <day>Fri</day>
            <day>Sat</day>
         </dayNames>
         <meridiemNames>
            <meridiem>AM</meridiem>
            <meridiem>PM</meridiem>
         </meridiemNames>
         <eraNames>
            <era>BC</era>
            <era>AD</era>
         </eraNames>
      </calendarSymbols>
      <datePatterns>
         <datePattern name="full">EEEE, MMMM D, YYYY</datePattern>
         <datePattern name="long">MMMM D, YYYY</datePattern>
         <datePattern name="med">MMM D, YYYY</datePattern>
         <datePattern name="short">M/D/YY</datePattern>
      </datePatterns>
      <timePatterns>
         <timePattern name="full">h:MM:SS A Z</timePattern>
         <timePattern name="long">h:MM:SS A Z</timePattern>
         <timePattern name="med">h:MM:SS A</timePattern>
         <timePattern name="short">h:MM A</timePattern>
      </timePatterns>
      <dateTimeSymbols>GyMdkHmsSEDFwWahKzZ</dateTimeSymbols>
      <numberPatterns>
         <numberPattern name="numeric">z,zz9.zzz</numberPattern>
         <numberPattern name="currency">$z,zz9.99|($z,zz9.99)</numberPattern>
         <numberPattern name="percent">z,zz9%</numberPattern>
      </numberPatterns>
      <numberSymbols>
         <numberSymbol name="decimal">.</numberSymbol>
         <numberSymbol name="grouping">,</numberSymbol>
         <numberSymbol name="percent">%</numberSymbol>
         <numberSymbol name="minus">-</numberSymbol>
         <numberSymbol name="zero">0</numberSymbol>
      </numberSymbols>
      <currencySymbols>
         <currencySymbol name="symbol">$</currencySymbol>
         <currencySymbol name="isoname">USD</currencySymbol>
         <currencySymbol name="decimal">.</currencySymbol>
      </currencySymbols>
      <typefaces>
         <typeface name="Myriad Pro"/>
         <typeface name="Minion Pro"/>
         <typeface name="Courier Std"/>
         <typeface name="Adobe Pi Std"/>
         <typeface name="Adobe Hebrew"/>
         <typeface name="Adobe Arabic"/>
         <typeface name="Adobe Thai"/>
         <typeface name="Kozuka Gothic Pro-VI M"/>
         <typeface name="Kozuka Mincho Pro-VI R"/>
         <typeface name="Adobe Ming Std L"/>
         <typeface name="Adobe Song Std L"/>
         <typeface name="Adobe Myungjo Std M"/>
      </typefaces>
   </locale>
</localeSet></xdp:xdp>
