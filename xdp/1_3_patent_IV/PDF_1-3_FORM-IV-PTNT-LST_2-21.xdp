<?xml version="1.0" encoding="UTF-8"?>
<?xfa generator="AdobeLiveCycleDesignerES_V10.0.2.20120224.1.869952" APIVersion="3.5.12002.0"?>
<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/" timeStamp="2015-12-22T21:00:44Z" uuid="3a7907a7-254c-4d44-a155-75292dc56b13">
<template xmlns="http://www.xfa.org/schema/xfa-template/3.0/">
   <?formServer defaultPDFRenderFormat acrobat9.1dynamic?>
   <?formServer allowRenderCaching 0?>
   <?formServer formModel client?>
   <subform name="PATENT_LIST" layout="tb" locale="en_CA" restoreState="auto">
      <pageSet>
         <pageArea name="Page1" id="Page1">
            <contentArea w="203.2mm" h="249.476mm" x="6.351mm" y="16.198mm" name="contentArea"/>
            <medium stock="default" short="612pt" long="792pt"/>
            <subform x="6.35mm" y="6.35mm" w="47.625mm" name="sfLogo_en" layout="tb">
               <bind match="none"/>
               <draw h="6.35mm" name="imgHCLogo" w="47.625mm">
                  <ui>
                     <imageEdit/>
                  </ui>
                  <value>
                     <image contentType="image/jpeg" href="..\..\FIP logos\HC-SC.jpg"/>
                  </value>
                  <?templateDesigner expand 1?>
                  <assist>
                     <speak priority="toolTip"/>
                  </assist>
               </draw>
               <event activity="initialize" name="event__initialize">
                  <script contentType="application/x-javascript">

var cFormHandler=script.HCeForm.control.FormHandler;
var cConfigManager=script.core.util.ConfigurationManager;

var FRENCH=			cConfigManager.get("FRENCH");

if(cFormHandler.getCurrentLanguage()===FRENCH){
	this.presence="hidden";
}else{
	this.presence="visible";
}
</script>
               </event>
               <?templateDesigner expand 1?></subform>
            <subform x="6.35mm" y="6.35mm" w="47.625mm" name="sfLogo_fr" layout="tb">
               <bind match="none"/>
               <draw name="imgHCLogo_fr" w="47.625mm" h="6.35mm">
                  <value>
                     <image href="..\..\FIP logos\SC-HC.jpg" contentType="image/jpeg"/>
                  </value>
                  <ui>
                     <imageEdit/>
                  </ui>
                  <assist>
                     <speak priority="toolTip"/>
                  </assist>
               </draw>
               <event activity="initialize" name="event__initialize">
                  <script contentType="application/x-javascript">

var cFormHandler=script.HCeForm.control.FormHandler;
var cConfigManager=script.core.util.ConfigurationManager;

var FRENCH=			cConfigManager.get("FRENCH");

if(cFormHandler.getCurrentLanguage()===FRENCH){
	this.presence="visible";
}else{
	this.presence="hidden";
}

</script>
               </event>
               <?templateDesigner expand 1?></subform>
            <draw h="6.352mm" name="imgCanada" w="20.744mm" y="268.392mm" x="6.136mm">
               <ui>
                  <imageEdit/>
               </ui>
               <value>
                  <image contentType="image/gif" href="..\..\Images\wordmark.gif"/>
               </value>
               <assist>
                  <speak disable="1"/>
               </assist>
            </draw>
            <field name="eventHandler" y="269.349mm" x="61.309mm" w="10.54mm" h="6.35mm" access="protected" presence="invisible">
               <ui>
                  <textEdit>
                     <border presence="hidden">
                        <?templateDesigner StyleID aped0?></border>
                     <margin/>
                  </textEdit>
               </ui>
               <font typeface="Myriad Pro" size="8pt"/>
               <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
               <para vAlign="middle"/>
               <bind match="none"/>
               <assist>
                  <speak disable="1"/>
               </assist>
               <event activity="initialize" name="event__initialize">
                  <script contentType="application/x-javascript">
/*******************************************************************************
 * This updates the FormPage's language when a new instance is created. This is
 * here because there is nowhere to put it on the master page itself.
 */

//imports
var cActionEvent = script.core.event.ActionEvent;
var cMasterPageHandler = script.HCeForm.control.MasterPageHandler;
var cSystem = script.core.System;

try
{
	// set up event object
	var actionName = cMasterPageHandler.INITIALIZE_MASTER_PAGE;
	var anActionEvent = cActionEvent.createInstance(actionName,this, this.parent);

	// deploy event to controller
	cMasterPageHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cSystem.processUnhandledException(exception);
}


</script>
               </event>
            </field>
            <field access="protected" name="Pages" x="93.955mm" y="267.931mm" minW="27.99mm" minH="5.588mm">
               <font typeface="Myriad Pro" size="8pt"/>
               <margin bottomInset="1mm" leftInset="0mm" rightInset="0mm" topInset="1mm"/>
               <para vAlign="middle"/>
               <ui>
                  <textEdit>
                     <border presence="hidden">
                        <?templateDesigner StyleID aped0?></border>
                     <margin/>
                  </textEdit>
               </ui>
               <bind match="none"/>
               <format>
                  <picture>9999999</picture>
               </format>
               <event activity="ready" ref="$layout" name="event__layout_ready">
                  <script contentType="application/x-javascript">
var cResourceManager = 		script.core.lang.ResourceManager;

var textVal="";
textVal="Page "+xfa.layout.page(this)+" "+cResourceManager.get("lbOfLCText")+" " + xfa.layout.pageCount();
this.rawValue=textVal;
</script>
               </event>
               <assist>
                  <speak disable="1"/>
               </assist>
            </field>
            <field name="txtFormVersion" y="267.931mm" x="28.722mm" w="28.707mm" h="5.588mm" access="protected">
               <ui>
                  <textEdit>
                     <border presence="hidden"/>
                     <margin/>
                  </textEdit>
               </ui>
               <font typeface="Myriad Pro" size="8pt"/>
               <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
               <para vAlign="middle"/>
               <caption reserve="15.9508mm">
                  <font size="8pt" typeface="Myriad Pro" baselineShift="0pt"/>
                  <para vAlign="middle" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt"/>
                  <value>
                     <text>Revision No:</text>
                  </value>
               </caption>
               <bind match="dataRef" ref="$.form_version"/>
            </field>
            <draw name="lblMasterTitle" y="267.931mm" x="123.143mm" w="85.581mm" h="5.588mm" hAlign="right">
               <ui>
                  <textEdit/>
               </ui>
               <value>
                  <text>Title</text>
               </value>
               <font size="8pt" typeface="Myriad Pro"/>
               <margin topInset="0.5mm" bottomInset="0.5mm" leftInset="0.5mm" rightInset="0.5mm"/>
               <para vAlign="middle" hAlign="right"/>
               <?renderCache.bounds 239758 13006 0 0 1417 1417 0 0?>
               <?renderCache.textRun 5 Title 0 226783 9920 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
            <?templateDesigner expand 1?></pageArea>
         <?templateDesigner expand 0?></pageSet>
      <subform w="576pt" name="sfPage1" layout="lr-tb">
         <subform w="203.2mm" name="sfMainHeader" layout="lr-tb">
            <draw name="lblFormTitle" w="202.993mm" minH="9.42mm">
               <ui>
                  <textEdit/>
               </ui>
               <value>
                  <text>Title</text>
               </value>
               <font size="16pt" typeface="Myriad Pro" baselineShift="0pt" weight="bold"/>
               <margin topInset="0.5mm" bottomInset="0.5mm" leftInset="0.5mm" rightInset="0.5mm"/>
               <para hAlign="center" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
               <assist role="H1"/>
            </draw>
            <exclGroup name="pageLanguage" layout="lr-tb">
               <field h="6mm" name="chkEnglish" w="23.28mm" locale="en_CA" relevant="-print">
                  <caption placement="right" reserve="16.812mm">
                     <font size="8pt" typeface="Myriad Pro"/>
                     <para vAlign="middle"/>
                     <value>
                        <text>English</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <items>
                     <text>en</text>
                  </items>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <checkButton shape="round" size="3.5278mm">
                        <border>
                           <fill>
                              <color value="255, 255, 255"/>
                           </fill>
                        </border>
                     </checkButton>
                  </ui>
                  <bind match="none"/>
                  <value>
                     <text xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">en</text>
                  </value>
               </field>
               <field h="6mm" name="chkFrancais" w="26.316mm" locale="fr_CA" relevant="-print">
                  <caption placement="right" reserve="19.81mm">
                     <font size="8pt" typeface="Myriad Pro"/>
                     <para vAlign="middle"/>
                     <value>
                        <text>Français</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <items>
                     <text>fr</text>
                  </items>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <checkButton shape="round" size="3.5278mm">
                        <border>
                           <fill>
                              <color value="255, 255, 255"/>
                           </fill>
                        </border>
                        <margin/>
                     </checkButton>
                  </ui>
                  <bind match="none"/>
                  <value>
                     <text xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
                  </value>
               </field>
               <?templateDesigner itemValuesSpecified 1?>
               <event activity="change" name="event__change">
                  <script contentType="application/x-javascript">
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cMainHandler = script.HCeForm.control.FormHandler;

try
{
	// set up event object
	var actionName = cMainHandler.LANGUAGE_CHANGE;
	var anActionEvent = cActionEvent.createInstance(actionName, this, this.rawValue);
	
	// deploy event to controller
	cMainHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with pageLanguage::change", exception);
}
</script>
               </event>
               <validate scriptTest="warning"/>
               <margin leftInset="50.8mm"/>
               <?templateDesigner expand 0?>
               <bind match="dataRef" ref="$.form_lang"/>
            </exclGroup>
            <bind match="none"/>
            <?templateDesigner expand 0?></subform>
         <subform y="15.42mm" w="203.307mm" layout="lr-tb" name="sfPreInstruct">
            <subform w="203.2mm" layout="lr-tb" name="sfPreInstruct1">
               <draw name="lblMandatory" w="8in" h="6.35mm" colSpan="2">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>Asterisk (*) denotes a mandatory field.</text>
                  </value>
                  <font typeface="Myriad Pro" size="8pt"/>
                  <margin bottomInset="0.5mm" leftInset="0.5mm" rightInset="0.5mm" topInset="0.5mm"/>
                  <para vAlign="middle"/>
                  <assist>
                     <speak disable="1"/>
                  </assist>
                  <?renderCache.bounds 573166 15166 0 0 1417 1417 0 0?>
                  <?renderCache.textRun 39 Asterisk (*) denotes a mandatory field. 0 1417 11000 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
               <assist role="LI"/>
               <bind match="none"/>
               <?templateDesigner expand 1?></subform>
            <subform y="6.35mm" w="203.307mm" layout="lr-tb" name="sfPreInstruct2">
               <draw name="lblValidation" w="203.307mm" h="6.35mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>Plus (+) denotes a validation error or missing data.</text>
                  </value>
                  <font size="8pt" typeface="Myriad Pro"/>
                  <margin topInset="0.5mm" bottomInset="0.5mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <para vAlign="middle"/>
                  <?renderCache.bounds 573469 15166 0 0 1417 1417 0 0?>
                  <?renderCache.textRun 52 Plus (+) denotes a validation error or missing data. 0 1417 11000 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
               <assist role="LI"/>
               <bind match="none"/>
               <?templateDesigner expand 1?></subform>
            <assist role="UL"/>
            <margin bottomInset="2.54mm"/>
            <bind match="none"/>
            <?templateDesigner expand 0?></subform>
         <subform w="202.184mm" layout="lr-tb" name="sfInstructionsContent">
            <draw name="lblInstructionsHead" w="202.184mm" h="6.249mm">
               <ui>
                  <textEdit/>
               </ui>
               <value>
                  <text>INSTRUCTIONS</text>
               </value>
               <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
               <margin topInset="0.254mm" bottomInset="0.254mm" leftInset="0.5mm" rightInset="0.5mm"/>
               <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
               <border>
                  <edge/>
                  <corner thickness="0.175mm"/>
                  <fill>
                     <linear>
                        <color value="255,255,255"/>
                     </linear>
                     <color value="255,255,153"/>
                  </fill>
                  <corner thickness="0.175mm" presence="hidden"/>
                  <corner thickness="0.175mm" presence="hidden"/>
                  <edge presence="hidden"/>
                  <edge/>
                  <edge presence="hidden"/>
               </border>
               <assist role="H2"/>
               <?renderCache.bounds 570286 16274 0 0 1417 720 0 0?>
               <?renderCache.textRun 12 INSTRUCTIONS 0 1417 11857 0 0 0 "Myriad Pro" 1 0 12000 ISO-8859-1?></draw>
            <subform y="6.249mm" w="202.184mm" minH="59.561mm" layout="lr-tb" name="sfInstructList">
               <subform w="202.184mm" name="sfInstruct1" layout="tb">
                  <draw name="lblInstruct1" w="7.999958in" minH="5.116mm">
                     <ui>
                        <textEdit/>
                     </ui>
                     <value>
                        <text>This form contains mandatory fields. In order to ensure you have completed all appropriate fields, please press the \"Finalize\" button at the bottom of the form before printing and signing. </text>
                     </value>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <margin topInset="0.5002mm" bottomInset="0.5002mm" leftInset="0.5mm" rightInset="0.5mm"/>
                     <para spaceAbove="0.5pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                     <border>
                        <edge presence="hidden"/>
                        <corner thickness="0.175mm" presence="hidden"/>
                     </border>
                  </draw>
                  <margin bottomInset="2.54mm" topInset="2.54mm"/>
                  <bind match="none"/>
                  <?templateDesigner expand 1?></subform>
               <subform w="202.184mm" name="sfInstruct2" layout="tb">
                  <draw name="lblInstruct2" w="7.999958in" minH="8.931mm">
                     <ui>
                        <textEdit/>
                     </ui>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <margin topInset="0.5002mm" bottomInset="0.5002mm" leftInset="0.5mm" rightInset="0.5mm"/>
                     <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                     <border>
                        <edge presence="hidden"/>
                        <corner thickness="0.175mm" presence="hidden"/>
                     </border>
                     <value>
                        <text>text</text>
                     </value>
                  </draw>
                  <margin topInset="0mm" bottomInset="2.54mm"/>
                  <bind match="none"/>
                  <?templateDesigner expand 1?></subform>
               <subform w="202.184mm" name="sfInstruct3" layout="tb">
                  <draw name="lblInstruct3" w="7.999958in" h="11.866mm">
                     <ui>
                        <textEdit/>
                     </ui>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <margin topInset="0.5002mm" bottomInset="0.5002mm" leftInset="0.5mm" rightInset="0.5mm"/>
                     <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                     <border>
                        <edge presence="hidden"/>
                        <corner thickness="0.175mm" presence="hidden"/>
                     </border>
                     <value>
                        <text>text</text>
                     </value>
                     <?renderCache.bounds 573163 30800 0 0 1417 1418 0 0?>
                     <?renderCache.textRun 4 text 0 1417 18818 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
                  <margin topInset="0mm" bottomInset="0mm"/>
                  <bind match="none"/>
                  <?templateDesigner expand 1?></subform>
               <subform w="202.184mm" name="sfInstructHumanHeading" layout="tb">
                  <draw name="lblHumanHeading" w="201.168mm" h="5.41mm">
                     <ui>
                        <textEdit/>
                     </ui>
                     <value>
                        <text>WHERE TO SEND HUMAN DRUG SUBMISSION APPLICATIONS</text>
                     </value>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
                     <margin topInset="0.5002mm" bottomInset="0.5002mm" leftInset="0.5mm" rightInset="0.5mm"/>
                     <para spaceAbove="0.5pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                     <border>
                        <edge presence="hidden"/>
                        <corner thickness="0.175mm" presence="hidden"/>
                        <fill>
                           <color value="236,236,236"/>
                        </fill>
                     </border>
                     <?renderCache.bounds 567406 12499 0 0 1417 1418 0 0?>
                     <?renderCache.textRun 48 WHERE TO SEND HUMAN DRUG SUBMISSION APPLICATIONS 0 1417 10918 0 0 0 "Myriad Pro" 1 0 12000 ISO-8859-1?></draw>
                  <margin topInset="0mm" bottomInset="0mm" leftInset="0.762mm"/>
                  <bind match="none"/>
                  <?templateDesigner expand 1?></subform>
               <subform w="202.184mm" name="sfInstruct4" layout="tb">
                  <draw name="lblInstruct4" w="7.999958in" h="12.395mm">
                     <ui>
                        <textEdit/>
                     </ui>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <margin topInset="0.5002mm" bottomInset="0.5002mm" leftInset="0.5mm" rightInset="0.5mm"/>
                     <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                     <border>
                        <edge presence="hidden"/>
                        <corner thickness="0.175mm" presence="hidden"/>
                     </border>
                     <value>
                        <text>text</text>
                     </value>
                     <?renderCache.bounds 573163 32299 0 0 1417 1418 0 0?>
                     <?renderCache.textRun 4 text 0 1417 19567 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
                  <margin topInset="0mm" bottomInset="0mm"/>
                  <bind match="none"/>
                  <?templateDesigner expand 1?></subform>
               <subform w="202.184mm" name="sfInstruct5" layout="tb">
                  <draw name="lblInstruct5" w="7.999958in" h="27.953mm">
                     <ui>
                        <textEdit/>
                     </ui>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <margin topInset="0.5002mm" bottomInset="0.5002mm" leftInset="10.16mm" rightInset="0.5mm"/>
                     <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                     <border>
                        <edge presence="hidden"/>
                        <corner thickness="0.175mm" presence="hidden"/>
                     </border>
                     <value>
                        <text>text</text>
                     </value>
                     <?renderCache.bounds 545780 76401 0 0 28800 1418 0 0?>
                     <?renderCache.textRun 4 text 0 28800 41618 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
                  <margin topInset="0mm" bottomInset="0mm"/>
                  <bind match="none"/>
                  <?templateDesigner expand 1?></subform>
               <subform w="201.93mm" name="sfInstructVetHeading" layout="tb">
                  <draw name="lblVetHeading" w="201.168mm" minH="4.367mm">
                     <ui>
                        <textEdit/>
                     </ui>
                     <value>
                        <text>WHERE TO SEND VETERINARY DRUG SUBMISSION APPLICATIONS</text>
                     </value>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
                     <margin topInset="0.5002mm" bottomInset="0.5002mm" leftInset="0.5mm" rightInset="0.5mm"/>
                     <para spaceAbove="0.5pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                     <border>
                        <edge presence="hidden"/>
                        <corner thickness="0.175mm" presence="hidden"/>
                        <fill>
                           <color value="236,236,236"/>
                        </fill>
                     </border>
                  </draw>
                  <margin topInset="0mm" bottomInset="0mm" leftInset="0.762mm"/>
                  <bind match="none"/>
                  <?templateDesigner expand 1?></subform>
               <subform w="202.184mm" name="sfInstruct6" layout="tb">
                  <draw name="lblInstruct6" w="7.999958in" h="12.395mm">
                     <ui>
                        <textEdit/>
                     </ui>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <margin topInset="0.5002mm" bottomInset="0.5002mm" leftInset="0.5mm" rightInset="0.5mm"/>
                     <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                     <border>
                        <edge presence="hidden"/>
                        <corner thickness="0.175mm" presence="hidden"/>
                     </border>
                     <value>
                        <text>text</text>
                     </value>
                     <?renderCache.bounds 573163 32299 0 0 1417 1418 0 0?>
                     <?renderCache.textRun 4 text 0 1417 19567 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
                  <margin topInset="0mm" bottomInset="0mm"/>
                  <bind match="none"/>
                  <?templateDesigner expand 1?></subform>
               <subform w="202.184mm" name="sfInstruct7" layout="tb" y="3mm">
                  <draw name="lblInstruct7" w="7.999958in" h="27.953mm">
                     <ui>
                        <textEdit/>
                     </ui>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <margin topInset="0.5002mm" bottomInset="0.5002mm" leftInset="10.16mm" rightInset="0.5mm"/>
                     <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                     <border>
                        <edge presence="hidden"/>
                        <corner thickness="0.175mm" presence="hidden"/>
                     </border>
                     <value>
                        <text>text</text>
                     </value>
                     <?renderCache.bounds 545780 76401 0 0 28800 1418 0 0?>
                     <?renderCache.textRun 4 text 0 28800 41618 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
                  <margin topInset="0mm" bottomInset="0mm"/>
                  <bind match="none"/>
                  <?templateDesigner expand 1?></subform>
               <bind match="none"/>
               <?templateDesigner expand 0?></subform>
            <border>
               <edge/>
               <corner thickness="0.175mm"/>
               <edge presence="hidden"/>
               <edge/>
               <edge presence="hidden"/>
               <corner thickness="0.175mm" presence="hidden"/>
               <corner thickness="0.175mm"/>
               <corner thickness="0.175mm" presence="hidden"/>
            </border>
            <margin topInset="0mm" bottomInset="2.54mm" leftInset="0mm"/>
            <bind match="none"/>
            <?templateDesigner expand 1?></subform>
         <subform w="203.213mm" name="sfPart1" layout="lr-tb">
            <subform w="203.2mm" name="sfPart1Heading" layout="tb">
               <draw name="lblPart1Heading" w="202.184mm" h="6.249mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>PART 1: PATENT FILING INFORMATION</text>
                  </value>
                  <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
                  <margin topInset="0.254mm" bottomInset="0.254mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                     <fill>
                        <linear>
                           <color value="255,255,255"/>
                        </linear>
                        <color value="255,255,153"/>
                     </fill>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                  </border>
                  <assist role="H2"/>
                  <?renderCache.bounds 570286 16274 0 0 1417 720 0 0?>
                  <?renderCache.textRun 33 PART 1: PATENT FILING INFORMATION 0 1417 11857 0 0 0 "Myriad Pro" 1 0 12000 ISO-8859-1?></draw>
               <margin topInset="0.508mm" bottomInset="0.508mm"/>
               <?templateDesigner expand 0?>
               <bind match="none"/>
            </subform>
            <draw name="lblPatentOption" w="202.262mm" h="5.2331mm">
               <ui>
                  <textEdit/>
               </ui>
               <value>
                  <text>Please select from the Patent List Filing Option below, and then enter the required information.</text>
               </value>
               <font typeface="Myriad Pro" size="8pt" baselineShift="0pt"/>
               <margin topInset="0.5mm" bottomInset="0.5mm" leftInset="0.5mm" rightInset="0.5mm"/>
               <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
               <?renderCache.bounds 570507 12000 0 0 1417 1417 0 0?>
               <?renderCache.textRun 96 Please select from the Patent List Filing Option below, and then enter the required information. 0 1417 9417 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
            <field name="ddlFormType" w="181.817mm" h="13.707mm">
               <ui>
                  <choiceList>
                     <border>
                        <edge stroke="lowered"/>
                     </border>
                     <margin/>
                  </choiceList>
               </ui>
               <font typeface="Myriad Pro"/>
               <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
               <para vAlign="middle"/>
               <caption reserve="0.185306in" placement="top">
                  <para vAlign="middle"/>
                  <value>
                     <text>Type of form being submitted to Health Canada</text>
                  </value>
                  <font typeface="Myriad Pro" size="8pt"/>
               </caption>
               <validate nullTest="error"/>
               <event activity="exit" name="event__exit">
                  <script contentType="application/x-javascript">
var cHandler=script.HCeForm.control.Part1_5Handler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
		if(cSystem.hasCurrentFieldValueChanged(this)){
			var actionName = cHandler.FILING_OPTION_CHANGE;
			var anActionEvent = cActionEvent.createInstance(actionName, this);
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
		}
}
catch(exception)
{
	cLog.warn("Problem with sub type::exit", exception);
}
</script>
               </event>
               <event activity="enter" name="event__enter">
                  <script contentType="application/x-javascript">var cSystem = script.core.System;

cSystem.setCurrentField(this);
</script>
               </event>
               <bind match="dataRef" ref="$.patent_filing_info.patent_filing_option"/>
            </field>
            <subform y="26.205mm" w="201.064mm" minH="13.707mm" layout="lr-tb" name="sfSubNumber">
               <keep intact="contentArea"/>
               <field name="txtSubNumber" w="62.287mm" h="13.707mm">
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border hand="right">
                           <edge/>
                        </border>
                        <margin/>
                        <comb numberOfCells="6"/>
                     </textEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="0.185306in" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Submission Number</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <validate nullTest="error"/>
                  <event activity="change" name="event__change">
                     <script contentType="application/x-javascript">

var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cHandler = script.HCeForm.control.Part1_5Handler;
var cSystem = script.core.System;

try{
		// set up event object
		var actionName = cHandler.NUMBER_SIX_DIG_ACTION;
		var anActionEvent = cActionEvent.createInstance(actionName, this,xfa.event);
		// deploy event to controller
		cHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with sub type::change", exception);
}
</script>
                  </event>
                  <bind match="dataRef" ref="$.patent_filing_info.submission_number"/>
               </field>
               <?templateDesigner expand 1?>
               <bind match="none"/>
            </subform>
            <field name="ddlRelatedSub" w="84.299mm" h="13.707mm">
               <ui>
                  <choiceList>
                     <border>
                        <edge stroke="lowered"/>
                     </border>
                     <margin/>
                  </choiceList>
               </ui>
               <font typeface="Myriad Pro"/>
               <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
               <para vAlign="middle"/>
               <caption reserve="0.185306in" placement="top">
                  <para vAlign="middle"/>
                  <value>
                     <text>Related Submission</text>
                  </value>
                  <font typeface="Myriad Pro" size="8pt"/>
               </caption>
               <validate nullTest="error"/>
               <event activity="exit" name="event__exit">
                  <script contentType="application/x-javascript">
var cHandler=script.HCeForm.control.Part1_5Handler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
		if(cSystem.hasCurrentFieldValueChanged(this)){
			var actionName = cHandler.RELATED_SUB_CHANGE;
			var anActionEvent = cActionEvent.createInstance(actionName, this);
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
		}
}
catch(exception)
{
	cLog.warn("Problem with related sub type::exit", exception);
}
</script>
               </event>
               <event activity="enter" name="event__enter">
                  <script contentType="application/x-javascript">var cSystem = script.core.System;

cSystem.setCurrentField(this);

</script>
               </event>
               <bind match="dataRef" ref="$.patent_filing_info.related_submission"/>
            </field>
            <?templateDesigner expand 0?>
            <subform y="39.912mm" w="201.796mm" minH="11.233mm" layout="lr-tb" name="sfFormulationType">
               <draw name="lblFormulationType" w="160.661mm" h="5.2331mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>Please check at least one of the follwowing</text>
                  </value>
                  <font typeface="Myriad Pro" size="8pt"/>
                  <margin topInset="0.5mm" bottomInset="0.5mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <?renderCache.bounds 452583 12000 0 0 1417 1417 0 0?>
                  <?renderCache.textRun 43 Please check at least one of the follwowing 0 1417 7417 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
               <field name="chkFormChange" w="55.762mm" h="6mm">
                  <ui>
                     <checkButton>
                        <border>
                           <edge stroke="lowered"/>
                           <fill/>
                        </border>
                     </checkButton>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <value>
                     <integer>0</integer>
                  </value>
                  <caption placement="right" reserve="48.761mm">
                     <para vAlign="middle"/>
                     <value>
                        <text>Change in Formulation</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <items>
                     <integer>1</integer>
                     <integer>0</integer>
                     <integer>2</integer>
                  </items>
                  <bind match="dataRef" ref="$.patent_filing_info.formulation_change"/>
               </field>
               <field name="chkDosageChange" w="56.272mm" h="6mm">
                  <ui>
                     <checkButton>
                        <border>
                           <edge stroke="lowered"/>
                           <fill/>
                        </border>
                     </checkButton>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <value>
                     <integer>0</integer>
                  </value>
                  <caption placement="right" reserve="49.272mm">
                     <para vAlign="middle"/>
                     <value>
                        <text>Change in Dosage Form</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <items>
                     <integer>1</integer>
                     <integer>0</integer>
                     <integer>2</integer>
                  </items>
                  <bind match="dataRef" ref="$.patent_filing_info.dosage_form_change"/>
               </field>
               <field name="chkUseChange" w="38.053mm" h="6mm">
                  <ui>
                     <checkButton>
                        <border>
                           <edge stroke="lowered"/>
                           <fill/>
                        </border>
                     </checkButton>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <value>
                     <integer>0</integer>
                  </value>
                  <caption placement="right" reserve="31.053mm">
                     <para vAlign="middle"/>
                     <value>
                        <text>Change in Use </text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <items>
                     <integer>1</integer>
                     <integer>0</integer>
                     <integer>2</integer>
                  </items>
                  <bind match="dataRef" ref="$.patent_filing_info.use_change"/>
               </field>
               <?templateDesigner expand 1?>
               <bind match="none"/>
               <margin topInset="1.016mm"/>
            </subform>
            <bind match="none"/>
         </subform>
         <subform name="sfPart2" w="202.991mm" layout="lr-tb">
            <subform name="sfPart2Heading" w="202.184mm">
               <margin topInset="1.27mm" bottomInset="2.54mm"/>
               <draw name="lblPart2Heading" w="202.183mm" h="6.249mm" x="0.001mm" y="0.001mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>PART 2: DRUG PRODUCT INFORMATION</text>
                  </value>
                  <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
                  <margin topInset="0.254mm" bottomInset="0.254mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                     <fill>
                        <linear>
                           <color value="255,255,255"/>
                        </linear>
                        <color value="255,255,153"/>
                     </fill>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                  </border>
                  <assist role="H2"/>
                  <?renderCache.bounds 570283 16274 0 0 1417 720 0 0?>
                  <?renderCache.textRun 32 PART 2: DRUG PRODUCT INFORMATION 0 1417 11857 0 0 0 "Myriad Pro" 1 0 12000 ISO-8859-1?></draw>
               <field name="btnAddIngredient" w="52.188mm" h="6mm" x="149.475mm" y="0.19mm">
                  <ui>
                     <button highlight="inverted"/>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <caption>
                     <value>
                        <text>Add Medicinal Ingredient</text>
                     </value>
                     <para vAlign="middle" hAlign="center"/>
                  </caption>
                  <border hand="right">
                     <edge stroke="raised"/>
                     <fill>
                        <color value="212,208,200"/>
                     </fill>
                  </border>
                  <bind match="none"/>
                  <event activity="click" name="event__click">
                     <script contentType="application/x-javascript">
 
var cHandler=script.HCeForm.control.Part1_5Handler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
			var actionName = cHandler.ADD_MED_INGREDIENT;
			var anActionEvent = cActionEvent.createInstance(actionName, this);
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
		
}
catch(exception)
{
	cLog.warn("Problem with add ingredient::click", exception);
}
</script>
                  </event>
               </field>
               <?templateDesigner expand 0?>
               <bind match="none"/>
            </subform>
            <subform y="10.06mm" w="202.991mm" minH="14.976mm" layout="lr-tb" name="sfIngredientList">
               <subform w="200.66mm" name="sfIngredient" layout="lr-tb">
                  <occur max="-1"/>
                  <field name="txtIngredient" w="158.183mm" minH="13.706mm">
                     <ui>
                        <textEdit multiLine="1">
                           <border>
                              <edge stroke="lowered"/>
                           </border>
                           <margin/>
                        </textEdit>
                     </ui>
                     <font typeface="Myriad Pro"/>
                     <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="3.81mm"/>
                     <para vAlign="middle"/>
                     <caption reserve="0.185306in" placement="top">
                        <para vAlign="middle"/>
                        <value>
                           <text>Medicinal Ingedient</text>
                        </value>
                        <font typeface="Myriad Pro" size="8pt"/>
                     </caption>
                     <validate nullTest="error"/>
                     <value>
                        <text maxChars="255"/>
                     </value>
                     <keep intact="contentArea"/>
                     <bind match="dataRef" ref="$.medicinal_ingredient"/>
                  </field>
                  <border>
                     <edge stroke="dashed" presence="hidden"/>
                     <corner stroke="dashed" presence="hidden" thickness="0.175mm"/>
                  </border>
                  <subform x="163.76mm" w="37.87mm" name="sfDeleteIngred" h="13.165mm">
                     <keep intact="none"/>
                     <field name="btnDeleteIng" w="37.87mm" h="6.35mm" x="0mm" y="6.258mm">
                        <ui>
                           <button highlight="inverted"/>
                        </ui>
                        <font typeface="Myriad Pro"/>
                        <caption>
                           <value>
                              <text>Delete Ingredient</text>
                           </value>
                           <para vAlign="middle" hAlign="center"/>
                        </caption>
                        <border hand="right">
                           <edge stroke="raised"/>
                           <fill>
                              <color value="212,208,200"/>
                           </fill>
                        </border>
                        <bind match="none"/>
                        <event activity="click" name="event__click">
                           <script contentType="application/x-javascript">



var cHandler=script.HCeForm.control.Part1_5Handler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
			var actionName = cHandler.REMOVE_MED_INGREDIENT;
			var anActionEvent = cActionEvent.createInstance(actionName, this,this.parent.parent); //parent subform hack
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
		
}
catch(exception)
{
	cLog.warn("Problem with remove ingredient::click", exception);
}
</script>
                        </event>
                     </field>
                     <bind match="none"/>
                     <?templateDesigner expand 1?></subform>
                  <margin leftInset="0mm" rightInset="0mm" bottomInset="1.27mm"/>
                  <bind match="dataRef" ref="$.medicinal_ingredient_info[*]"/>
                  <?templateDesigner expand 1?></subform>
               <margin leftInset="1.27mm" rightInset="1.27mm"/>
               <border>
                  <edge stroke="dashed" presence="hidden"/>
                  <edge presence="hidden"/>
                  <edge presence="hidden"/>
                  <edge presence="hidden"/>
                  <corner stroke="dashed" presence="hidden"/>
                  <corner/>
                  <corner/>
                  <corner/>
               </border>
               <bind match="none"/>
               <?templateDesigner expand 1?></subform>
            <subform w="202.409mm" minH="36mm" layout="lr-tb" name="sfDrugDetails">
               <field name="txtBrandName" w="201.879mm" minH="13.707mm">
                  <ui>
                     <textEdit multiLine="1">
                        <border>
                           <edge stroke="lowered"/>
                        </border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="4.5mm" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Brand Name	</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <validate nullTest="error"/>
                  <keep intact="contentArea"/>
                  <value>
                     <text maxChars="255"/>
                  </value>
                  <bind match="dataRef" ref="$.brand_name"/>
               </field>
               <field name="ddlDrugUse" w="45.265mm" h="13.707mm">
                  <ui>
                     <choiceList>
                        <border>
                           <edge stroke="lowered"/>
                        </border>
                        <margin/>
                     </choiceList>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="0.185306in" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Drug Use	</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.drug_use"/>
               </field>
               <field name="txtStrengthUnit" w="156.817mm" minH="13.707mm">
                  <ui>
                     <textEdit multiLine="1">
                        <border>
                           <edge stroke="lowered"/>
                        </border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="0.185306in" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Strength per Unit</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <validate nullTest="error"/>
                  <value>
                     <text maxChars="255"/>
                  </value>
                  <bind match="dataRef" ref="$.strength"/>
               </field>
               <field name="ddlDosageForm" w="65.254mm" h="13.707mm">
                  <ui>
                     <choiceList>
                        <border>
                           <edge stroke="lowered"/>
                        </border>
                        <margin/>
                     </choiceList>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="4.7068mm" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Dosage Form</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <validate nullTest="error"/>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">
var cHandler=script.HCeForm.control.Part1_5Handler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
		if(cSystem.hasCurrentFieldValueChanged(this)){
			var actionName = cHandler.DOSAGE_FORM_CHANGE;
			var anActionEvent = cActionEvent.createInstance(actionName, this);
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
		}
}
catch(exception)
{
	cLog.warn("Problem with dosage form::exit", exception);
}
</script>
                  </event>
                  <event activity="enter" name="event__enter">
                     <script contentType="application/x-javascript">var cSystem = script.core.System;

cSystem.setCurrentField(this);

</script>
                  </event>
                  <bind match="dataRef" ref="$.dosage_form"/>
               </field>
               <field name="txtDosageDetails" w="136.885mm" minH="13.707mm">
                  <ui>
                     <textEdit multiLine="1">
                        <border>
                           <edge stroke="lowered"/>
                        </border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="0.185306in" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Dosage Form Details</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <value>
                     <text maxChars="255"/>
                  </value>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.dosage_form_other"/>
               </field>
               <field name="ddlRoute" w="46.098mm" h="13.707mm">
                  <ui>
                     <choiceList>
                        <border>
                           <edge stroke="lowered"/>
                        </border>
                        <margin/>
                     </choiceList>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="0.185306in" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Route of Administration</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <validate nullTest="error"/>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">
var cHandler=script.HCeForm.control.Part1_5Handler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
		if(cSystem.hasCurrentFieldValueChanged(this)){
			var actionName = cHandler.ROUTE_ADMIN_CHANGE;
			var anActionEvent = cActionEvent.createInstance(actionName, this);
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
		}
}
catch(exception)
{
	cLog.warn("Problem with dosage form::exit", exception);
}
</script>
                  </event>
                  <event activity="enter" name="event__enter">
                     <script contentType="application/x-javascript">var cSystem = script.core.System;

cSystem.setCurrentField(this);

</script>
                  </event>
                  <bind match="dataRef" ref="$.route"/>
               </field>
               <field name="txtRouteDetails" w="90.527mm" minH="13.707mm">
                  <ui>
                     <textEdit multiLine="1">
                        <border>
                           <edge stroke="lowered"/>
                        </border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="0.185306in" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Route Details</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <value>
                     <text maxChars="255"/>
                  </value>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.route_other"/>
               </field>
               <margin topInset="5.08mm" bottomInset="0.762mm"/>
               <field name="txtDIN" w="58.017mm" h="13.706mm">
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border hand="right">
                           <edge/>
                        </border>
                        <margin/>
                        <comb numberOfCells="8"/>
                     </textEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="4.7068mm" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Drug Identification Number (DIN)</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <keep intact="contentArea"/>
                  <event activity="change" name="event__change">
                     <script contentType="application/x-javascript">

var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cHandler = script.HCeForm.control.Part1_5Handler;
var cSystem = script.core.System;

try{
		// set up event object
		var actionName = cHandler.NUMBER_EIGHT_DIG_ACTION;
		var anActionEvent = cActionEvent.createInstance(actionName, this,xfa.event);
		// deploy event to controller
		cHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with sub type::change", exception);
}
</script>
                  </event>
                  <bind match="dataRef" ref="$.din"/>
               </field>
               <field name="txtMedUse" w="201.199mm" minH="25.809mm">
                  <ui>
                     <textEdit multiLine="1">
                        <border>
                           <edge stroke="lowered"/>
                        </border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <caption reserve="5.3648mm" placement="top">
                     <value>
                        <text>Uses of Medicinal Ingredients </text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <validate nullTest="error"/>
                  <keep intact="contentArea"/>
                  <bind match="dataRef" ref="$.ingredient_uses"/>
               </field>
               <border>
                  <edge stroke="dashed" presence="hidden"/>
                  <edge presence="hidden"/>
                  <edge presence="hidden"/>
                  <edge presence="hidden"/>
                  <corner stroke="dashed" presence="hidden"/>
                  <corner/>
                  <corner/>
                  <corner/>
               </border>
               <bind match="none"/>
               <?templateDesigner expand 0?></subform>
            <bind match="dataRef" ref="$.drug_info"/>
            <?templateDesigner expand 0?></subform>
         <subform w="203.199mm" name="sfPart3" layout="lr-tb">
            <subform name="sfPart3Heading" w="202.184mm">
               <margin topInset="1.27mm" bottomInset="2.54mm"/>
               <draw name="lblPart3Heading" w="202.183mm" h="6.249mm" x="0.001mm" y="0.001mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>PART 3: PATENT INFORMATION</text>
                  </value>
                  <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
                  <margin topInset="0.254mm" bottomInset="0.254mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                     <fill>
                        <linear>
                           <color value="255,255,255"/>
                        </linear>
                        <color value="255,255,153"/>
                     </fill>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                  </border>
                  <assist role="H2"/>
                  <?renderCache.bounds 570283 16274 0 0 1417 720 0 0?>
                  <?renderCache.textRun 26 PART 3: PATENT INFORMATION 0 1417 11857 0 0 0 "Myriad Pro" 1 0 12000 ISO-8859-1?></draw>
               <?templateDesigner expand 1?>
               <bind match="none"/>
            </subform>
            <field name="numPatentNum" w="37mm" h="19.05mm">
               <ui>
                  <numericEdit hScrollPolicy="off">
                     <border hand="right">
                        <edge/>
                     </border>
                     <margin/>
                     <comb numberOfCells="7"/>
                  </numericEdit>
               </ui>
               <font typeface="Myriad Pro"/>
               <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
               <para vAlign="middle"/>
               <caption reserve="8.89mm" placement="top">
                  <para vAlign="middle"/>
                  <value>
                     <text>Patent Number</text>
                  </value>
                  <font typeface="Myriad Pro" size="8pt"/>
               </caption>
               <format>
                  <picture>num{zzzzzzzzzzzz9}</picture>
               </format>
               <validate nullTest="error"/>
               <bind match="dataRef" ref="$.patent_info.patent_number"/>
            </field>
            <field name="dteFiling" w="43.18mm" h="19.05mm">
               <ui>
                  <dateTimeEdit>
                     <border>
                        <edge stroke="lowered"/>
                     </border>
                     <margin/>
                  </dateTimeEdit>
                  <picture>date{YYYY-MM-DD}</picture>
               </ui>
               <font typeface="Myriad Pro"/>
               <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
               <para vAlign="middle"/>
               <value>
                  <date/>
               </value>
               <caption reserve="8.89mm" placement="top">
                  <para vAlign="middle"/>
                  <value>
                     <text>Canadian Filing Date of Patent Application (YYYY-MM-DD)  </text>
                  </value>
                  <font typeface="Myriad Pro" size="8pt"/>
               </caption>
               <format>
                  <picture>date{YYYY-MM-DD}</picture>
               </format>
               <bind match="dataRef" ref="$.patent_info.filing_date">
                  <picture>date{YYYY-MM-DD}</picture>
               </bind>
               <validate nullTest="error"/>
            </field>
            <field name="dteGranted" w="43.18mm" h="19.05mm">
               <ui>
                  <dateTimeEdit>
                     <border>
                        <edge stroke="lowered"/>
                     </border>
                     <margin/>
                  </dateTimeEdit>
                  <picture>date{YYYY-MM-DD}</picture>
               </ui>
               <font typeface="Myriad Pro"/>
               <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
               <para vAlign="middle"/>
               <value>
                  <date/>
               </value>
               <caption reserve="9.1733mm" placement="top">
                  <para vAlign="middle"/>
                  <value>
                     <text>Date Granted (YYYY-MM-DD)</text>
                  </value>
                  <font typeface="Myriad Pro" size="8pt"/>
               </caption>
               <validate nullTest="error"/>
               <bind match="dataRef" ref="$.patent_info.granted_date">
                  <picture>date{YYYY-MM-DD}</picture>
               </bind>
               <format>
                  <picture>date{YYYY-MM-DD}</picture>
               </format>
            </field>
            <field name="dteExpiry" w="43.18mm" h="19.05mm">
               <ui>
                  <dateTimeEdit>
                     <border>
                        <edge stroke="lowered"/>
                     </border>
                     <margin/>
                  </dateTimeEdit>
                  <picture>date{YYYY-MM-DD}</picture>
               </ui>
               <font typeface="Myriad Pro"/>
               <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
               <para vAlign="middle"/>
               <value>
                  <date/>
               </value>
               <caption reserve="8.89mm" placement="top">
                  <para vAlign="middle"/>
                  <value>
                     <text>Expiration Date (YYYY-MM-DD)</text>
                  </value>
                  <font typeface="Myriad Pro" size="8pt"/>
               </caption>
               <validate nullTest="error"/>
               <bind match="dataRef" ref="$.patent_info.expiry_date">
                  <picture>date{YYYY-MM-DD}</picture>
               </bind>
               <format>
                  <picture>date{YYYY-MM-DD}</picture>
               </format>
            </field>
            <subform y="10.06mm" w="200.382mm" minH="19.707mm" layout="tb" name="sfPatentCode">
               <draw name="lblCodeType" w="194.382mm" h="5.796mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>Select at least one of the following codes:</text>
                  </value>
                  <font typeface="Myriad Pro" size="8pt"/>
                  <margin topInset="0.5mm" bottomInset="0.5mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <?renderCache.bounds 548170 13596 0 0 1417 1417 0 0?>
                  <?renderCache.textRun 43 Select at least one of the following codes: 0 1417 7417 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
               <field name="chkCodeA" w="67.462mm" h="6mm">
                  <ui>
                     <checkButton>
                        <border>
                           <edge stroke="lowered"/>
                           <fill/>
                        </border>
                     </checkButton>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <value>
                     <integer>0</integer>
                  </value>
                  <caption placement="right" reserve="60.462mm">
                     <para vAlign="middle"/>
                     <value>
                        <text>A- Applicant is the owner of the patent </text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <items>
                     <integer>1</integer>
                     <integer>0</integer>
                     <integer>2</integer>
                  </items>
                  <event activity="change" name="event__change">
                     <script contentType="application/x-javascript">
var cHandler=script.HCeForm.control.Part1_5Handler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
			var actionName = cHandler.CODEA_CHANGE;
			var anActionEvent = cActionEvent.createInstance(actionName, this);
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with dosage::exit", exception);
}
</script>
                  </event>
                  <bind match="dataRef" ref="$.patent_info.code_owner"/>
               </field>
               <field name="chkCodeB" w="71.974mm" h="6mm">
                  <ui>
                     <checkButton>
                        <border>
                           <edge stroke="lowered"/>
                           <fill/>
                        </border>
                     </checkButton>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <value>
                     <integer>0</integer>
                  </value>
                  <caption placement="right" reserve="64.974mm">
                     <para vAlign="middle"/>
                     <value>
                        <text>B- Applicant has an exclusive licence</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <items>
                     <integer>1</integer>
                     <integer>0</integer>
                     <integer>2</integer>
                  </items>
                  <event activity="change" name="event__change">
                     <script contentType="application/x-javascript">

var cHandler=script.HCeForm.control.Part1_5Handler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
			var actionName = cHandler.CODEB_CHANGE;
			var anActionEvent = cActionEvent.createInstance(actionName, this);
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with dosage::exit", exception);
}
</script>
                  </event>
                  <bind match="dataRef" ref="$.patent_info.code_exclusive"/>
               </field>
               <field name="chkCodeC" w="200.382mm" h="6mm">
                  <ui>
                     <checkButton>
                        <border>
                           <edge stroke="lowered"/>
                           <fill/>
                        </border>
                     </checkButton>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <value>
                     <integer>0</integer>
                  </value>
                  <caption placement="right" reserve="193.382mm">
                     <para vAlign="middle"/>
                     <value>
                        <text>C- Applicant has obtained the consent of the owner of the patent for the inclusion of the patent on the above patent list</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <items>
                     <integer>1</integer>
                     <integer>0</integer>
                     <integer>2</integer>
                  </items>
                  <event activity="change" name="event__change">
                     <script contentType="application/x-javascript">

var cHandler=script.HCeForm.control.Part1_5Handler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;

try{
		// set up event object
			var actionName = cHandler.CODEC_CHANGE;
			var anActionEvent = cActionEvent.createInstance(actionName, this);
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with dosage::exit", exception);
}


</script>
                  </event>
                  <bind match="dataRef" ref="$.patent_info.code_consent"/>
               </field>
               <margin topInset="1.27mm"/>
               <?templateDesigner expand 0?>
               <keep intact="contentArea"/>
               <bind match="none"/>
            </subform>
            <keep intact="contentArea"/>
            <?templateDesigner expand 0?>
            <bind match="none"/>
         </subform>
         <subform name="sfPart4" w="203.199mm" layout="lr-tb">
            <subform name="sfPart4Heading" w="202.183mm">
               <margin topInset="1.27mm" bottomInset="2.54mm"/>
               <draw name="lblPart4Heading" w="202.184mm" h="6.249mm" y="0.001mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>PART 4: COMPANY NAME AND ADDRESS FOR SERVICE IN CANADA</text>
                  </value>
                  <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
                  <margin topInset="0.254mm" bottomInset="0.254mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                     <fill>
                        <linear>
                           <color value="255,255,255"/>
                        </linear>
                        <color value="255,255,153"/>
                     </fill>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                  </border>
                  <assist role="H2"/>
                  <?renderCache.bounds 570286 16274 0 0 1417 720 0 0?>
                  <?renderCache.textRun 54 PART 4: COMPANY NAME AND ADDRESS FOR SERVICE IN CANADA 0 1417 11857 0 0 0 "Myriad Pro" 1 0 12000 ISO-8859-1?></draw>
               <?templateDesigner expand 1?>
               <bind match="none"/>
            </subform>
            <subform layout="lr-tb" name="sfAddressDetails" w="202.184mm">
               <keep intact="contentArea"/>
               <field h="13.151mm" name="txtCompanyName" w="201.975mm">
                  <border>
                     <corner thickness="0.175mm"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>Company Name (Full Name . No Abbreviations)</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1.0008mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.service_address_info.company_name"/>
               </field>
               <field h="11.233mm" name="txtAddress" w="202.252mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                     <corner thickness="0.1753mm"/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                  </border>
                  <caption placement="top" reserve="3.2955mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>12. Street/Suite/PO Box*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.service_address_info.service_address.street_address"/>
               </field>
               <field h="11.233mm" name="txtCity" w="50.8mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                     <edge/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.1753mm"/>
                     <corner thickness="0.1753mm"/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                  </border>
                  <caption placement="top" reserve="3.176mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>13. City - Town*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.service_address_info.service_address.city"/>
               </field>
               <field h="11.233mm" name="ddlCountry" w="50.8mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>15. Country*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <items/>
                  <items presence="hidden" save="1"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <choiceList>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </choiceList>
                  </ui>
                  <validate nullTest="error"/>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cAddressHandler = script.HCeForm.control.CommonAddressHandler;
var cSystem = script.core.System;
try
{
	if(cSystem.hasCurrentFieldValueChanged(this)){
		// set up event object
		var actionName =  cAddressHandler.SERVICE_COUNTRY_CHANGED_ACTION;
		var anActionEvent = cActionEvent.createInstance(actionName, this,this.rawValue);
		// deploy event to controller
		cAddressHandler.actionPerformed(anActionEvent);
	}
}
catch(exception)
{
	cLog.warn("Problem with contact country ::exit", exception);
}
</script>
                  </event>
                  <event activity="enter" name="event__enter">
                     <script contentType="application/x-javascript">
var cSystem = script.core.System;

cSystem.setCurrentField(this);
</script>
                  </event>
                  <bind match="dataRef" ref="$.service_address_info.service_address.country"/>
               </field>
               <field h="11.233mm" name="ddlProvince" w="49.53mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>14. Province - State*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <choiceList>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </choiceList>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.service_address_info.service_address.province_lov"/>
               </field>
               <field h="11.43mm" name="txtProvince" w="49.53mm">
                  <border>
                     <corner thickness="0.175mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.264mm">
                     <para vAlign="middle"/>
                     <value>
                        <text>Province/State</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro" size="8pt"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <bind match="none"/>
               </field>
               <field h="11.232mm" name="txtPostalCode" w="50.8mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                     <corner thickness="0.1753mm"/>
                     <corner thickness="0.1753mm"/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>16. Postal/ZIP Code*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.service_address_info.service_address.postal_code"/>
               </field>
               <?templateDesigner expand 0?>
               <bind match="none"/>
            </subform>
            <bind match="none"/>
            <?templateDesigner expand 0?>
            <keep intact="contentArea"/>
         </subform>
         <subform name="sfPart5" w="202.184mm" layout="lr-tb">
            <subform name="sfPart5Heading" w="201.93mm" layout="lr-tb">
               <margin topInset="1.27mm" bottomInset="2.54mm"/>
               <draw name="lblPart5Heading" w="202.184mm" h="6.249mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>PART 5:  MANUFACTURER INFORMATION AND CERTIFICATION</text>
                  </value>
                  <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
                  <margin topInset="0.254mm" bottomInset="0.254mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                     <fill>
                        <linear>
                           <color value="255,255,255"/>
                        </linear>
                        <color value="255,255,153"/>
                     </fill>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                  </border>
                  <assist role="H2"/>
                  <?renderCache.bounds 570286 16274 0 0 1417 720 0 0?>
                  <?renderCache.textRun 51 PART 5:  MANUFACTURER INFORMATION AND CERTIFICATION 0 1417 11857 0 0 0 "Myriad Pro" 1 0 12000 ISO-8859-1?></draw>
               <?templateDesigner expand 0?>
               <field name="chkSameAs" w="200.308mm" h="6mm">
                  <ui>
                     <checkButton>
                        <border>
                           <edge stroke="lowered"/>
                           <fill/>
                        </border>
                     </checkButton>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <value>
                     <integer>0</integer>
                  </value>
                  <caption placement="right" reserve="193.307mm">
                     <para vAlign="middle"/>
                     <value>
                        <text>Same Name and Address as Service in Canada</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <items>
                     <integer>1</integer>
                     <integer>0</integer>
                     <integer>2</integer>
                  </items>
                  <event activity="change" name="event__change">
                     <script contentType="application/x-javascript">


var cHandler=script.HCeForm.control.CommonAddressHandler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
			var actionName = cHandler.MANUFACT_SAMEAS_ACTION;
			var anActionEvent = cActionEvent.createInstance(actionName, this);
			// deploy event to controller
			cHandler.actionPerformed(anActionEvent);
		
}
catch(exception)
{
	cLog.warn("Problem with same as::change", exception);
}
</script>
                  </event>
                  <bind match="dataRef" ref="$.manufact_address_sameas"/>
               </field>
               <bind match="none"/>
            </subform>
            <subform layout="lr-tb" name="sfAddressDetails" w="202.184mm">
               <keep intact="contentArea"/>
               <field h="13.151mm" name="txtCompanyName" w="202.184mm">
                  <border>
                     <corner thickness="0.175mm"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>Company Name (Full Name . No Abbreviations)</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1.0008mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_address_info.company_name"/>
               </field>
               <field h="11.233mm" name="txtAddress" w="202.184mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                     <corner thickness="0.1753mm"/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>12. Street/Suite/PO Box*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_address_info.manufact_address.street_address"/>
               </field>
               <field h="11.233mm" name="txtCity" w="50.8mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.176mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>13. City - Town*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_address_info.manufact_address.city"/>
               </field>
               <field h="11.233mm" name="ddlCountry" w="50.8mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>15. Country*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <items/>
                  <items presence="hidden" save="1"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <choiceList>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </choiceList>
                  </ui>
                  <validate nullTest="error"/>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cAddressHandler = script.HCeForm.control.CommonAddressHandler;
var cSystem = script.core.System;
try
{
	if(cSystem.hasCurrentFieldValueChanged(this)){
		// set up event object 
		var actionName =  cAddressHandler.MANUFACT_COUNTRY_CHANGED_ACTION;
		var anActionEvent = cActionEvent.createInstance(actionName, this,this.rawValue);
		// deploy event to controller
		cAddressHandler.actionPerformed(anActionEvent);
	}
}
catch(exception)
{
	cLog.warn("Problem with manufact country ::exit", exception);
}
</script>
                  </event>
                  <event activity="enter" name="event__enter">
                     <script contentType="application/x-javascript">
var cSystem = script.core.System;

cSystem.setCurrentField(this);
</script>
                  </event>
                  <bind match="dataRef" ref="$.manufact_address_info.manufact_address.country"/>
               </field>
               <field h="11.233mm" name="ddlProvince" w="49.53mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>14. Province - State*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <choiceList>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </choiceList>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_address_info.manufact_address.province_lov"/>
               </field>
               <field h="11.43mm" name="txtProvince" w="49.53mm">
                  <border>
                     <corner thickness="0.175mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="2.9868mm">
                     <para vAlign="middle"/>
                     <value>
                        <text>Province/State</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro" size="8pt"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <bind match="dataRef" ref="$.manufact_address_info.manufact_address.province_text"/>
               </field>
               <field h="11.232mm" name="txtPostalCode" w="50.8mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                     <corner thickness="0.1753mm"/>
                     <corner thickness="0.1753mm"/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>16. Postal/ZIP Code*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_address_info.manufact_address.postal_code"/>
               </field>
               <occur min="0"/>
               <?templateDesigner expand 1?>
               <bind match="none"/>
            </subform>
            <margin bottomInset="0.508mm"/>
            <subform name="sfPart5ContactHeading" w="203.199mm">
               <margin topInset="1.27mm" bottomInset="2.54mm"/>
               <draw name="lblPart5ContactHeading" w="202.184mm" h="6.249mm" y="0.001mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>MANUFACTURER CONTACT</text>
                  </value>
                  <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
                  <margin topInset="0.254mm" bottomInset="0.254mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                     <fill>
                        <color value="236,236,236"/>
                     </fill>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                  </border>
                  <assist role="H3"/>
                  <?renderCache.bounds 570286 16274 0 0 1417 720 0 0?>
                  <?renderCache.textRun 20 MANUFACTURER CONTACT 0 1417 11857 0 0 0 "Myriad Pro" 1 0 12000 ISO-8859-1?></draw>
               <?templateDesigner expand 1?>
               <bind match="none"/>
            </subform>
            <subform layout="lr-tb" name="sfContactDetails" w="202.184mm">
               <keep intact="contentArea"/>
               <field h="11.43mm" name="ddlSalutation" w="24.13mm">
                  <border>
                     <corner thickness="0.175mm"/>
                     <edge/>
                     <edge/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" size="8pt"/>
                     <para vAlign="middle"/>
                     <value>
                        <text>Salutation*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <choiceList>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </choiceList>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_contact_info.salutation"/>
               </field>
               <field h="11.43mm" name="txtGivenName" w="50.8mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>Given Name*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_contact_info.given_name"/>
               </field>
               <field h="11.43mm" name="txtInitials" w="20.32mm">
                  <border>
                     <corner thickness="0.175mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" size="8pt"/>
                     <para vAlign="middle"/>
                     <value>
                        <text>Initials</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <bind match="dataRef" ref="$.manufact_contact_info.initials"/>
               </field>
               <field h="11.43mm" name="txtSurname" w="50.8mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>17. Surname*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_contact_info.surname"/>
               </field>
               <field h="11.43mm" name="txtTitle" w="55.88mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                     <corner thickness="0.1753mm"/>
                     <corner thickness="0.1753mm"/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>21. Title*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_contact_info.job_title"/>
               </field>
               <field h="11.43mm" name="txtTelephone" w="38.1mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>18. Telephone No.*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_contact_info.phone_num"/>
               </field>
               <field h="11.43mm" name="txtExtension" w="17.78mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>Ext.</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <bind match="dataRef" ref="$.manufact_contact_info.phone_ext"/>
               </field>
               <field h="11.43mm" name="txtFax" w="38.1mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.264mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>19. Fax No.</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <bind match="dataRef" ref="$.manufact_contact_info.fax_num"/>
               </field>
               <field h="11.43mm" name="txtEmail" w="107.95mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                     <corner thickness="0.1753mm"/>
                     <corner thickness="0.1753mm"/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>22. Email</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.manufact_contact_info.email"/>
               </field>
               <?templateDesigner expand 0?>
               <bind match="none"/>
            </subform>
            <subform name="sfCertificationHeading" w="203.199mm">
               <margin topInset="1.27mm" bottomInset="2.54mm"/>
               <draw name="lblPart5CertHeading" w="202.184mm" h="6.249mm" y="0.001mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <value>
                     <text>CERTIFICATION</text>
                  </value>
                  <font typeface="Myriad Pro" baselineShift="0pt" size="12pt" weight="bold"/>
                  <margin topInset="0.254mm" bottomInset="0.254mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" vAlign="middle"/>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                     <fill>
                        <color value="236,236,236"/>
                     </fill>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                     <corner thickness="0.175mm"/>
                     <corner thickness="0.175mm" presence="hidden"/>
                  </border>
                  <assist role="H3"/>
                  <?renderCache.bounds 570286 16274 0 0 1417 720 0 0?>
                  <?renderCache.textRun 13 CERTIFICATION 0 1417 11857 0 0 0 "Myriad Pro" 1 0 12000 ISO-8859-1?></draw>
               <?templateDesigner expand 0?>
               <bind match="none"/>
            </subform>
            <subform name="sfCertificationDetails" w="202.692mm" layout="lr-tb">
               <draw name="lblAttest" w="7.98in" h="8.495mm">
                  <ui>
                     <textEdit/>
                  </ui>
                  <font size="8pt" typeface="Myriad Pro" baselineShift="0pt"/>
                  <margin topInset="0.5mm" bottomInset="0.5mm" leftInset="0.5mm" rightInset="0.5mm"/>
                  <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt"/>
                  <value>
                     <text>text</text>
                  </value>
                  <?renderCache.bounds 571726 21246 0 0 1417 1417 0 0?>
                  <?renderCache.textRun 4 text 0 1417 7417 0 0 0 "Myriad Pro" 0 0 8000 ISO-8859-1?></draw>
               <field h="11.43mm" name="ddlSalutation" w="25.4mm">
                  <border>
                     <corner thickness="0.175mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" size="8pt"/>
                     <para vAlign="middle"/>
                     <value>
                        <text>Salutation*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <choiceList>
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </choiceList>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.attestation_info.attestation_salutation"/>
               </field>
               <field h="11.43mm" name="txtGivenName" w="55.88mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>Given Name*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.attestation_info.attestation_given_name"/>
               </field>
               <field h="11.43mm" name="txtSurname" w="55.88mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>17. Surname*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.attestation_info.attestation_surname"/>
               </field>
               <field h="11.43mm" name="txtTitle" w="65.024mm">
                  <border>
                     <corner thickness="0.1753mm"/>
                     <edge/>
                     <edge presence="hidden"/>
                     <edge/>
                     <edge/>
                     <corner thickness="0.1753mm" presence="hidden"/>
                     <corner thickness="0.1753mm"/>
                     <corner thickness="0.1753mm"/>
                  </border>
                  <caption placement="top" reserve="3.175mm">
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                     <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                     <value>
                        <text>21. Title*</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <textEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <validate nullTest="error"/>
                  <bind match="dataRef" ref="$.attestation_info.attestation_title"/>
               </field>
               <?templateDesigner expand 0?>
               <bind match="none"/>
            </subform>
            <?templateDesigner expand 0?>
            <bind match="none"/>
         </subform>
         <subform w="203.2mm" name="sfFinalizeButton" h="19.342mm">
            <margin topInset="2.54mm" bottomInset="2.54mm"/>
            <field name="btnFinalizeAndLock" w="28.575mm" h="6.35mm" relevant="-print" x="0.001mm">
               <ui>
                  <button highlight="inverted"/>
               </ui>
               <font typeface="Myriad Pro"/>
               <caption>
                  <value>
                     <text>Finalize</text>
                  </value>
                  <para vAlign="middle" hAlign="center" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt"/>
                  <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
               </caption>
               <border hand="right">
                  <?templateDesigner StyleID apbx2?>
                  <edge stroke="raised"/>
                  <fill>
                     <color value="212,208,200"/>
                  </fill>
               </border>
               <bind match="none"/>
               <event activity="click" name="event__click">
                  <script contentType="application/x-javascript">
var cFormHandler=	script.HCeForm.control.FormHandler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
try
{
		// set up event object
		var actionName = cFormHandler.LOCK_FORM;
		var anActionEvent = cActionEvent.createInstance(actionName, this);
		// deploy event to controller
		cFormHandler.actionPerformed(anActionEvent);
	
}
catch(exception)
{
	cLog.warn("Problem with finalize ::click", exception);
}

</script>
               </event>
            </field>
            <field name="btnModify" w="28.575mm" h="6.35mm" relevant="-print" x="31.175mm">
               <ui>
                  <button highlight="inverted"/>
               </ui>
               <font typeface="Myriad Pro"/>
               <caption>
                  <value>
                     <text>Modify</text>
                  </value>
                  <para vAlign="middle" hAlign="center" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt"/>
                  <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
               </caption>
               <border hand="right">
                  <?templateDesigner StyleID apbx2?>
                  <edge stroke="raised"/>
                  <fill>
                     <color value="212,208,200"/>
                  </fill>
               </border>
               <bind match="none"/>
               <event activity="click" name="event__click">
                  <script contentType="application/x-javascript">

var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cHandler=	script.HCeForm.control.FormHandler;
var cSystem = script.core.System;


try{
		// set up event object
		var actionName = cHandler.UNLOCK_FORM;
		var anActionEvent = cActionEvent.createInstance(actionName, this);
		// deploy event to controller
		cHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with  unlock button::click", exception);
}
</script>
               </event>
            </field>
            <bind match="none"/>
            <?templateDesigner expand 0?></subform>
         <subform layout="lr-tb" name="sfSignatureBlock" w="203.2mm">
            <border>
               <corner thickness="0.175mm"/>
               <edge/>
            </border>
            <keep intact="contentArea"/>
            <margin bottomInset="1.27mm" leftInset="0.508mm" topInset="1.27mm"/>
            <bind match="dataRef" ref="$.attestation_info"/>
            <exclGroup layout="lr-tb" name="signatureOption">
               <bind ref="$.signature_type" match="dataRef"/>
               <field h="6mm" name="chkDigitalID" w="28mm">
                  <caption placement="right" reserve="22mm">
                     <font typeface="Myriad Pro" size="8pt"/>
                     <para vAlign="middle"/>
                     <value>
                        <text>Digital ID</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <items>
                     <text>DIG_SIG</text>
                  </items>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <checkButton shape="round">
                        <border>
                           <edge stroke="lowered"/>
                           <fill/>
                           <?templateDesigner StyleID apcb4?></border>
                        <margin/>
                     </checkButton>
                  </ui>
               </field>
               <field h="6mm" name="chkDigitalImage" w="50.8mm">
                  <caption placement="right" reserve="44.958mm">
                     <font typeface="Myriad Pro" size="8pt"/>
                     <para vAlign="middle"/>
                     <value>
                        <text>Image Signature</text>
                     </value>
                  </caption>
                  <font typeface="Myriad Pro"/>
                  <items>
                     <text>IMG_SIG</text>
                  </items>
                  <margin leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <ui>
                     <checkButton shape="round">
                        <border>
                           <edge stroke="lowered"/>
                           <fill/>
                           <?templateDesigner StyleID apcb4?></border>
                        <margin/>
                     </checkButton>
                  </ui>
               </field>
               <event activity="change" name="event__change">
                  <script contentType="application/x-javascript">


var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cHandler = script.HCeForm.control.SignatureBlockHandler
var cSystem = script.core.System;

try
{
		// set up event object
		var actionName = cHandler.SIGNATURE_CHOICE_UI;
		var anActionEvent = cActionEvent.createInstance(actionName,this);
		// deploy event to controller
		cHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with sig type::change", exception);
}
</script>
               </event>
               <?templateDesigner itemValuesSpecified 1?>
               <?templateDesigner expand 1?></exclGroup>
            <draw h="5.598mm" name="Rectangle1" w="119.247mm">
               <value>
                  <rectangle>
                     <corner presence="hidden" radius="5.08mm"/>
                     <edge presence="hidden"/>
                  </rectangle>
               </value>
               <ui>
                  <defaultUi/>
               </ui>
            </draw>
            <field h="11.43mm" name="digSignature" w="110.174mm">
               <border>
                  <corner thickness="0.175mm"/>
                  <edge/>
               </border>
               <caption reserve="26.8657mm">
                  <para vAlign="middle"/>
                  <value>
                     <text>Signature*</text>
                  </value>
               </caption>
               <font typeface="Myriad Pro" size="8pt"/>
               <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1mm"/>
               <para vAlign="middle"/>
               <ui>
                  <signature>
                     <border>
                        <edge stroke="lowered"/>
                        <?templateDesigner StyleID aped3?></border>
                     <margin/>
                  </signature>
               </ui>
               <bind match="dataRef" ref="$.signature_image"/>
               <event activity="change" name="event__change">
                  <script contentType="application/x-javascript">var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cHandler =script.HCeForm.control.SignatureBlockHandler;
var cSystem = script.core.System;

try
{
		// set up event object
		var actionName = cHandler.DIG_SIG_CHANGE;
		var anActionEvent = cActionEvent.createInstance(actionName,this,event.target);
		// deploy event to controller
		cHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with dig sig::change", exception);
}

</script>
               </event>
               <event activity="preSign" name="event__preSign">
                  <script contentType="application/x-javascript">

var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cHandler =script.HCeForm.control.SignatureBlockHandler;
var cSystem = script.core.System;

try
{
		// set up event object
		var actionName = cHandler.SET_SIGNATURE_DATE_ACTION;
		var anActionEvent = cActionEvent.createInstance(actionName,this);
		// deploy event to controller
		cHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with dig sig::presign", exception);
}
</script>
               </event>
            </field>
            <field h="11.43mm" name="imgSignature" w="110.174mm">
               <border>
                  <corner thickness="0.175mm"/>
                  <corner thickness="0.175mm"/>
                  <corner presence="hidden" thickness="0.175mm"/>
                  <corner presence="hidden" thickness="0.175mm"/>
                  <edge/>
                  <edge/>
                  <edge presence="hidden"/>
                  <edge presence="hidden"/>
               </border>
               <caption reserve="18.0746mm">
                  <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                  <para marginLeft="0pt" marginRight="0pt" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" vAlign="middle"/>
                  <value>
                     <text>Signature*</text>
                  </value>
               </caption>
               <margin bottomInset="0.381mm" leftInset="0.381mm" rightInset="0.381mm" topInset="0.381mm"/>
               <ui>
                  <imageEdit data="embed">
                     <margin/>
                  </imageEdit>
               </ui>
               <bind ref="$.signature_image" match="dataRef"/>
               <desc>
                  <text name="embeddedHref">Unknown Embedded URI</text>
               </desc>
               <event activity="change" name="event__change">
                  <script contentType="application/x-javascript">
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cHandler =script.HCeForm.control.SignatureBlockHandler;
var cSystem = script.core.System;

try
{

		// set up event object
		var actionName = cHandler.IMG_SIG_CHANGE;
		var anActionEvent = cActionEvent.createInstance(actionName,this);
		// deploy event to controller
		cHandler.actionPerformed(anActionEvent);
	
}
catch(exception)
{
	cLog.warn("Problem with img sig::change", exception);
}
</script>
               </event>
            </field>
            <draw presence="hidden" h="8.938mm" name="Rectangle2" w="110.937mm">
               <value>
                  <rectangle>
                     <corner presence="hidden" radius="5.08mm"/>
                     <edge presence="hidden"/>
                  </rectangle>
               </value>
               <ui>
                  <defaultUi/>
               </ui>
            </draw>
            <field access="readOnly" h="8.939mm" name="ddtSignedOnAttestation" w="91.812mm">
               <border>
                  <corner thickness="0.175mm"/>
                  <corner presence="hidden" thickness="0.175mm"/>
                  <corner presence="hidden" thickness="0.175mm"/>
                  <edge/>
                  <edge presence="hidden"/>
                  <edge presence="hidden"/>
                  <edge/>
               </border>
               <calculate override="error"/>
               <caption reserve="33.6933mm">
                  <font typeface="Myriad Pro" size="8pt"/>
                  <para vAlign="middle"/>
                  <value>
                     <text>Date (YYYY-MM-DD)*</text>
                  </value>
               </caption>
               <font typeface="Myriad Pro"/>
               <margin bottomInset="1mm" leftInset="1mm" rightInset="1mm" topInset="1.0008mm"/>
               <para vAlign="middle"/>
               <ui>
                  <picture>date{YYYY-MM-DD}</picture>
                  <dateTimeEdit hScrollPolicy="off">
                     <border hand="right">
                        <edge/>
                        <?templateDesigner StyleID aped2?></border>
                     <comb numberOfCells="10"/>
                     <margin/>
                  </dateTimeEdit>
               </ui>
               <bind ref="$.attestation_sign_date" match="dataRef">
                  <picture>date{YYYY-MM-DD}</picture>
               </bind>
               <format>
                  <picture>date{YYYY-MM-DD}</picture>
               </format>
               <validate>
                  <picture>date{YYYY-MM-DD}</picture>
               </validate>
               <value>
                  <date/>
               </value>
            </field>
            <?templateDesigner expand 1?>
         </subform>
         <subform name="sfHCOnly" layout="tb" w="201.93mm">
            <margin topInset="7.62mm" bottomInset="0mm"/>
            <draw name="lblTitle" w="201.93mm" h="6.248mm">
               <ui>
                  <textEdit/>
               </ui>
               <value>
                  <text>Health Canada Use Only</text>
               </value>
               <font size="12pt" typeface="Myriad Pro" baselineShift="0pt">
                  <fill>
                     <color value="255,255,255"/>
                  </fill>
               </font>
               <margin topInset="0.5002mm" bottomInset="0.5mm" leftInset="0.5mm" rightInset="0.5mm"/>
               <para spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt"/>
               <border>
                  <edge/>
                  <corner thickness="0.175mm"/>
                  <fill>
                     <color value="0,0,0"/>
                     <linear>
                        <color value="192,192,192"/>
                     </linear>
                  </fill>
               </border>
               <assist role="H2"/>
               <?renderCache.bounds 569566 14876 0 0 1417 1418 0 0?>
               <?renderCache.textRun 22 Health Canada Use Only 0 1417 10418 255 255 255 "Myriad Pro" 0 0 12000 ISO-8859-1?></draw>
            <subform w="201.93mm" layout="lr-tb" name="sfHCDetails">
               <field name="numSubNo" w="30.48mm" h="19.05mm">
                  <ui>
                     <numericEdit hScrollPolicy="off">
                        <border>
                           <?templateDesigner StyleID aped2?>
                           <edge/>
                        </border>
                        <margin/>
                     </numericEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="8.89mm" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Submission Number</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                  </border>
                  <keep intact="contentArea"/>
                  <validate>
                     <picture>num.integer{}</picture>
                  </validate>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">/*
var cDrugApplModel=script.DrugAppl.model.DrugApplMain;

var language = cDrugApplModel.getLanguage();

if (this.rawValue.toString().length  &lt; 6) {
	if (language == "en") {
      	xfa.host.messageBox ("Submission Number must be 6 numbers.");
	}
	else {
      	xfa.host.messageBox ("Numéro de la présentation doit être de 6 numéros.");
	}
		
	xfa.host.setFocus(this);
		
		
}
*/
</script>
                  </event>
                  <value>
                     <integer/>
                  </value>
                  <bind match="dataRef" ref="$.hcoonly_info.internal_sub_number"/>
                  <format>
                     <picture>num{}|num{zzzzzzzzzzzz9}</picture>
                  </format>
               </field>
               <field name="dteDateFiled" w="45.72mm" h="19.05mm">
                  <ui>
                     <dateTimeEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </dateTimeEdit>
                     <picture>date{YYYY-MM-DD}</picture>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1.0008mm" bottomInset="1.0008mm" leftInset="1.0008mm" rightInset="1mm"/>
                  <para vAlign="middle" hAlign="center"/>
                  <value>
                     <date/>
                  </value>
                  <border>
                     <edge/>
                     <corner thickness="0.1778mm"/>
                  </border>
                  <validate>
                     <picture>date{YYYY-MM-DD}</picture>
                  </validate>
                  <format>
                     <picture>date{YYYY-MM-DD}</picture>
                  </format>
                  <caption reserve="8.47mm" placement="top">
                     <value>
                        <text>Date of Filing Submission (YYYYMMDD)</text>
                     </value>
                     <para vAlign="middle"/>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">
/*if (this.rawValue != null) {

	this.resolveNode("DrugAppl.#variables.countryScript").validateDateValue(this);

}
*/
</script>
                  </event>
                  <bind match="dataRef" ref="$.hcoonly_info.filed_date"/>
               </field>
               <field name="dteNOC" w="38.1mm" h="19.05mm">
                  <ui>
                     <dateTimeEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </dateTimeEdit>
                     <picture>date{YYYY-MM-DD}</picture>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1.0008mm" bottomInset="1.0008mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle" hAlign="center"/>
                  <value>
                     <date/>
                  </value>
                  <border>
                     <edge/>
                     <corner thickness="0.1778mm"/>
                  </border>
                  <validate>
                     <picture>date{YYYY-MM-DD}</picture>
                  </validate>
                  <format>
                     <picture>date{YYYY-MM-DD}</picture>
                  </format>
                  <caption reserve="8.2148mm" placement="top">
                     <value>
                        <text>NOC Date (YYYYMMDD)</text>
                     </value>
                     <para vAlign="middle"/>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">
/*
if (this.rawValue != null) {

	this.resolveNode("DrugAppl.#variables.countryScript").validateDateValue(this);

}
*/
</script>
                  </event>
                  <bind match="dataRef" ref="$.hcoonly_info.noc_date"/>
               </field>
               <field name="dteAdded" w="45.72mm" h="19.05mm">
                  <ui>
                     <dateTimeEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </dateTimeEdit>
                     <picture>date{YYYY-MM-DD}</picture>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1.0008mm" bottomInset="1.0008mm" leftInset="1.0008mm" rightInset="1mm"/>
                  <para vAlign="middle" hAlign="center"/>
                  <value>
                     <date/>
                  </value>
                  <border>
                     <edge/>
                     <corner thickness="0.1778mm"/>
                  </border>
                  <validate>
                     <picture>date{YYYY-MM-DD}</picture>
                  </validate>
                  <format>
                     <picture>date{YYYY-MM-DD}</picture>
                  </format>
                  <caption reserve="8.73mm" placement="top">
                     <value>
                        <text>Date Originally Added (YYYMMDD)</text>
                     </value>
                     <para vAlign="middle"/>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">/*
if (this.rawValue != null) {

	this.resolveNode("DrugAppl.#variables.countryScript").validateDateValue(this);

}
*/
</script>
                  </event>
                  <bind match="dataRef" ref="$.hcoonly_info.added_date"/>
               </field>
               <field name="dteAmended" w="41.91mm" h="19.05mm">
                  <ui>
                     <dateTimeEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </dateTimeEdit>
                     <picture>date{YYYY-MM-DD}</picture>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1.0008mm" bottomInset="1.0008mm" leftInset="1mm" rightInset="1mm"/>
                  <para vAlign="middle" hAlign="center"/>
                  <value>
                     <date/>
                  </value>
                  <border>
                     <edge/>
                     <corner thickness="0.1778mm"/>
                  </border>
                  <validate>
                     <picture>date{YYYY-MM-DD}</picture>
                  </validate>
                  <format>
                     <picture>date{YYYY-MM-DD}</picture>
                  </format>
                  <caption reserve="9mm" placement="top">
                     <value>
                        <text>Date Amended (YYYYMMDD)</text>
                     </value>
                     <para vAlign="middle"/>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">
/*
if (this.rawValue != null) {

	this.resolveNode("DrugAppl.#variables.countryScript").validateDateValue(this);

}
*/
</script>
                  </event>
                  <bind match="dataRef" ref="$.hcoonly_info.amended_date"/>
               </field>
               <field name="dteReceived" w="45.72mm" h="19.05mm">
                  <ui>
                     <dateTimeEdit hScrollPolicy="off">
                        <border>
                           <edge stroke="lowered"/>
                           <?templateDesigner StyleID aped3?></border>
                        <margin/>
                     </dateTimeEdit>
                     <picture>date{YYYY-MM-DD}</picture>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1.0008mm" bottomInset="1.0008mm" leftInset="1.0008mm" rightInset="1mm"/>
                  <para vAlign="middle" hAlign="center"/>
                  <value>
                     <date/>
                  </value>
                  <border>
                     <edge/>
                     <corner thickness="0.1778mm"/>
                  </border>
                  <validate>
                     <picture>date{YYYY-MM-DD}</picture>
                  </validate>
                  <format>
                     <picture>date{YYYY-MM-DD}</picture>
                  </format>
                  <caption reserve="8.89mm" placement="top">
                     <value>
                        <text>Form IV Date Received (YYYYMMDD)</text>
                     </value>
                     <para vAlign="middle"/>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <event activity="exit" name="event__exit">
                     <script contentType="application/x-javascript">
/*
if (this.rawValue != null) {

	this.resolveNode("DrugAppl.#variables.countryScript").validateDateValue(this);

}
*/
</script>
                  </event>
                  <bind match="dataRef" ref="$.hcoonly_info.recieved_date"/>
               </field>
               <field name="numDrugID" w="35.56mm" h="19.05mm">
                  <ui>
                     <numericEdit hScrollPolicy="off">
                        <border>
                           <?templateDesigner StyleID aped2?>
                           <edge/>
                        </border>
                        <margin/>
                     </numericEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1.0008mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="8.89mm" placement="top">
                     <para vAlign="middle"/>
                     <value>
                        <text>Drug ID</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                  </caption>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                  </border>
                  <value>
                     <integer/>
                  </value>
                  <format>
                     <picture>num{zzzzzzzzzzzz9}</picture>
                  </format>
                  <bind match="dataRef" ref="$.hcoonly_info.drug_id"/>
               </field>
               <field name="numSubFormId" w="36.399mm" h="19.05mm">
                  <ui>
                     <numericEdit hScrollPolicy="off">
                        <border>
                           <?templateDesigner StyleID aped2?>
                           <edge/>
                        </border>
                        <margin/>
                     </numericEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1.0008mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="8.89mm" placement="top">
                     <para vAlign="middle" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt" hAlign="center"/>
                     <value>
                        <text>Sub-Form ID</text>
                     </value>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                  </caption>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                  </border>
                  <validate>
                     <picture>num.integer{}</picture>
                  </validate>
                  <format>
                     <picture>num{zzzzzzzzzzzz9}</picture>
                  </format>
                  <bind match="dataRef" ref="$.hcoonly_info.subform_id"/>
               </field>
               <field name="numFormId" w="35.56mm" h="19.05mm">
                  <ui>
                     <numericEdit hScrollPolicy="off">
                        <border>
                           <?templateDesigner StyleID aped2?>
                           <edge/>
                        </border>
                        <margin/>
                     </numericEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1.0008mm" rightInset="1mm"/>
                  <para vAlign="middle"/>
                  <caption reserve="8.6985mm" placement="top">
                     <para vAlign="middle" hAlign="center" spaceAbove="0pt" spaceBelow="0pt" textIndent="0pt" marginLeft="0pt" marginRight="0pt"/>
                     <value>
                        <text>Form ID</text>
                     </value>
                     <font typeface="Myriad Pro" baselineShift="0pt" size="8pt"/>
                  </caption>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                  </border>
                  <value>
                     <integer/>
                  </value>
                  <format>
                     <picture>num{zzzzzzzzzzzz9}</picture>
                  </format>
                  <bind match="dataRef" ref="$.hcoonly_info.form_id"/>
               </field>
               <border>
                  <edge/>
                  <corner thickness="0.175mm"/>
                  <fill>
                     <color value="230,230,230"/>
                  </fill>
               </border>
               <field name="txtNotes" w="201.676mm" minH="54.373mm">
                  <ui>
                     <textEdit multiLine="1">
                        <border>
                           <?templateDesigner StyleID aped3?>
                           <edge stroke="lowered"/>
                        </border>
                        <margin/>
                     </textEdit>
                  </ui>
                  <font typeface="Myriad Pro"/>
                  <margin topInset="1mm" bottomInset="1mm" leftInset="1.0008mm" rightInset="1mm"/>
                  <caption reserve="6.09mm" placement="top">
                     <value>
                        <text>Notes</text>
                     </value>
                     <font typeface="Myriad Pro" size="8pt"/>
                     <para vAlign="middle"/>
                  </caption>
                  <border>
                     <edge/>
                     <corner thickness="0.175mm"/>
                  </border>
                  <value>
                     <text maxChars="500"/>
                  </value>
                  <bind match="dataRef" ref="$.hcoonly_info.notes"/>
               </field>
               <?templateDesigner expand 0?>
               <keep intact="contentArea"/>
               <bind match="none"/>
            </subform>
            <border>
               <edge presence="hidden"/>
               <corner thickness="0.175mm" presence="hidden"/>
            </border>
            <occur min="0"/>
            <keep intact="contentArea"/>
            <bind match="none"/>
            <?templateDesigner expand 1?></subform>
         <margin topInset="0mm" bottomInset="0mm" leftInset="0.508mm" rightInset="0.508mm"/>
         <border>
            <edge/>
            <corner thickness="0.175mm"/>
         </border>
         <?templateDesigner expand 0?>
         <bind match="none"/>
      </subform>
      <subform w="100mm" name="script" layout="tb" presence="hidden">
         <bind match="none"/>
         <subform usehref="..\..\fragments\CoreJavaScript.xdp#som($template.script.core)">
            <bind/>
            <?templateDesigner expand 0?>
         </subform>
         <subform h="50mm" name="HCeForm" w="100mm">
            <subform layout="tb" name="config" w="100mm">
               <keep intact="contentArea"/>
               <variables>
                  <script contentType="application/x-javascript" name="general">
var cLog = script.core.util.Log;


var content = { 

formType: 					"PATENT_LIST",
errorInd:					"+",
formVersion: 				"2.00.10",
CANADA:						"CA",
USA:						"US",
DR_SALUT: 					"dr",
LabelStart: 				"labelStart",
LabelEnd:					"labelEnd",
DIGITAL_SIG:				"DIG_SIG",
IMAGE_SIG:					"IMG_SIG",
FRENCH:						"fr",
ENGLISH:					"en",
PAT_PREV:					"PAT_PREV",
SNDS:						"SNDS",
OTHER:						"Other", //droplist saved value
YES:						"1",
NO:							"0",
//Overrides
//NodeValidator_formatValidator: "",
Log_logLevel: cLog.LEVEL_TRACE,
Log_showExceptionDetail: true,
Log_writeToFile: false,


}
</script>
                  <?templateDesigner expand 1?></variables>
               <bind match="none"/>
               <?templateDesigner expand 1?></subform>
            <subform layout="tb" name="control" w="100mm">
               <keep intact="contentArea"/>
               <variables>
                  <script contentType="application/x-javascript" name="FormHandler">

/** Global Variables **/

var cFormNodeManager = 		script.core.model.FormNodeManager;
var cResourceManager = 		script.core.lang.ResourceManager;
var cConfigManager			=script.core.util.ConfigurationManager

var cException = 			script.core.util.Exception;
var cLog = 					script.core.util.Log;
var cUiUtil=				script.core.util.UiUtil;
var cFailureReporter=		script.core.validation.FailureReporter;

//form specific
var cAccessibility=			script.HCeForm.util.Accessibility;
var cPart1_5Handler=		script.HCeForm.control.Part1_5Handler;
var cAddressHandler=		script.HCeForm.control.CommonAddressHandler;
var cSignatureHandler=		script.HCeForm.control.SignatureBlockHandler;


var FRENCH=						cConfigManager.get("FRENCH");
var ENGLISH=					cConfigManager.get("ENGLISH");	
	
//action Global
var LANGUAGE_CHANGE=			"language_change";
var INITIALIZE_FORM_ACTION=		"init_form";
var SET_INVESTIGATOR_NAME=		"set_name";
var HIDE_INSTRUCTIONS=			"hideInstructions";
var SHOW_INSTRUCTIONS=			"showInstructions";
var LOCK_FORM=					"lockForm";
var UNLOCK_FORM=				"unlockForm";

// FORM Nodes

//instructions
var INSTRUCTIONS_SF_FN=	cFormNodeManager.getFormNodeForKey("sfInstructionsContent"); 

//buttons
var MODIFY_BTN_FN=		cFormNodeManager.getFormNodeForKey("btnModify");
var FINALIZE_BTN_FN=	cFormNodeManager.getFormNodeForKey("btnFinalizeAndLock");

//language Noe
var LANGUAGE_CHOICE=	cFormNodeManager.getFormNodeForKey("languageChoice");

//SCRIPT NAME
var SCRIPT_OBJECT_NAME="FormHandler";



/*
* actionPerformed- central event handler for the overall form functionality
*
*
*/
function actionPerformed(anEvent)
{
	switch(anEvent.getActionCommand())
	{

		case INITIALIZE_FORM_ACTION:
			 initializeForm();
			break;
		
		case LANGUAGE_CHANGE:
			_updateFormLanguage();
			initializeForm();
			break;
		
		case SET_INVESTIGATOR_NAME:
				//implemented Oct 27
				_updateAttestationName();
			break;
			
		case HIDE_INSTRUCTIONS:
		case SHOW_INSTRUCTIONS:	
				 toggleInstructionsVisiblity(anEvent.getActionCommand());
			break;	
			
		case LOCK_FORM:
			var errors=validateForm();
			if(!errors){
					xfa.host.messageBox(cResourceManager.get("validation_pass"),cResourceManager.get("validation_title"));
					lockForm();
					//TODO: add form specific calls here. Example show signature block
					cPart1_5Handler.addHCOnlySection();
					cSignatureHandler.setSignatureBlockState()		
			}		
			 break;
			 
		case UNLOCK_FORM:
				unlockForm();
				//TODO: add form specific calls here. Example initialize functionality, for elements that should be readonly
				 cPart1_5Handler.removeHCOnlySection();
			break;			 
			
		default:
			throw cException.createInstance(SCRIPT_OBJECT_NAME
				  + ".actionPerformed() - initialize Form '" 
				  + anEvent.getActionCommand() + "'.", "UnsupportedAction");
	}
}



/*
* Initializes the form to it's default state
*
*
*
*/
function initializeForm(){
	
	
		_updateFormLanguage();	
		toggleInstructionsVisiblity(HIDE_INSTRUCTIONS);
		//initialize other controllers
		cPart1_5Handler.initializeHandler();
		cAddressHandler.initialise();
		cSignatureHandler.initialiseHandler();
		//if not saving state, check if form is finalized
}


function unlockForm(form_node){
	if(!form_node){
		form_node=cFormNodeManager.getBaseNode();
	}
	form_node.unLock();
	initializeForm();
}//end fn


function lockForm(){
		var baseNode=cFormNodeManager.getBaseNode();	
		baseNode.lock();		
		MODIFY_BTN_FN.unLock(); //unlock modify button
	}//end fn


//bit of a hack,using the finalize button state
function isFinalized(){

	if(FINALIZE_BTN_FN.getNodeInstance().access!=="open"){
		return true;
	}
	return false;
}


/*
* Gets the language value for the user set language question
*@returns -a string, either en or fr
*
*/
function getCurrentLanguage(){ 

	var langNodeInstance=LANGUAGE_CHOICE.getNodeInstance();
	if(!langNodeInstance.rawValue){
		langNodeInstance.rawValue=ENGLISH;		
	}
	return(langNodeInstance.rawValue);
}//end fn


//bit of a hack,using the finalize button state. This only works if we automatically remember state, should be manual instaead
function isFinalized(){

	if(FINALIZE_BTN_FN.getNodeInstance().access!=="open"){
		return true;
	}
	return false;
}



/********* Private functions *****/

function _initializeFormNodes(){

	try{

		cControllerUtil.checkFormNode(INSTRUCTIONS_CONTENT_FN,SCRIPT_OBJECT_NAME,"INSTRUCTIONS_CONTENT_FN");	
		cControllerUtil.checkFormNode(MODIFY_BTN_FN,SCRIPT_OBJECT_NAME,"MODIFY_BTN_FN");
		cControllerUtil.checkFormNode(FINALIZE_BTN_FN,SCRIPT_OBJECT_NAME,"FINALIZE_BTN_FN");
		cControllerUtil.checkFormNode(LANGUAGE_CHOICE,SCRIPT_OBJECT_NAME,"LANGUAGE_CHOICE");
				
	 }
	 catch (exception)
	{
		cLog.critical(cResourceManager.get("error_application", SCRIPT_OBJECT_NAME+".initializeFormNodes()"), exception);
	}

}//end fn





function _updateFormLanguage()
{
	
	cResourceManager.setCurrentLanguage(getCurrentLanguage());
	cFormNodeManager.getBaseNode().updateUI();
	var rootInstance=xfa.form.nodes.item(0);
	if(FRENCH===getCurrentLanguage()){		
		rootInstance.locale="fr_CA";			
	}else{
		rootInstance.locale="en_CA";
	}
}


/**
*	Toggles if the instructions are visible or hidden
*	@param command- indicates if hidden or visbible, using the class globals
*	@returns null
*	@throws Exception if the command is not an expected type
*/
function toggleInstructionsVisiblity(command){
	
	var instructionsContainerNode;
	var cException = script.core.util.Exception;
	instructionsContainerNode=INSTRUCTIONS_SF_FN.getNodeInstance();
	
	
	if(command===HIDE_INSTRUCTIONS){
		cUiUtil.hide(instructionsContainerNode);
	}else if(command===SHOW_INSTRUCTIONS){
		cUiUtil.show(instructionsContainerNode);
		
	}else{
		throw cException.createInstance("InstructionVisiblity function encountered an illegal command. "
				+"Value: "+command+ "is not a valid command"
		 );
	}

}//end toggleInstructionsVisiblity

function validateForm(baseNode, nodeInstance){

	if(!baseNode){
		 baseNode=cFormNodeManager.getBaseNode();
	}
	if(!nodeInstance){
		nodeInstance=xfa.form.nodes.item(0);
	}
	
	var validationFailures=baseNode.validateNode(null,true);
	
	cAccessibility.updateColorErrorsForAccessibility(nodeInstance);
	if(validationFailures!==null){			
		xfa.host.messageBox(cFailureReporter.getFailureSummary(validationFailures),cResourceManager.get("validation_title")); 
	}
	return(validationFailures);
}//end fn

</script>
                  <script contentType="application/x-javascript" name="CommonAddressHandler">//imports, core
var cLog = script.core.util.Log;
var cResourceManager = script.core.lang.ResourceManager;
var cFormNodeManager = script.core.model.FormNodeManager;
var cUiUtil=script.core.util.UiUtil;
var cException = script.core.util.Exception;
var cConfigurationManager = script.core.util.ConfigurationManager;
var cControllerUtil = 		script.core.util.ControllerUtil;
//imports, utility
var cAddressUtil= script.HCeForm.util.AddressUtil; 
var  cGeneralUtil=			script.HCeForm.util.General;

//Globals
var LABEL_START=cConfigurationManager.get("LabelStart");
var LABEL_END=cConfigurationManager.get("LabelEnd");

var CANADA=	cConfigurationManager.get("CANADA");
var  USA=	cConfigurationManager.get("USA");


//Handler name
var SCRIPT_OBJECT_NAME=					"commonAddressHandler";

//Action Globals

var SERVICE_COUNTRY_CHANGED_ACTION=	"service_country_changed";
var INITIALISE_COUNTRY_ACTION="country_init";
var MANUFACT_COUNTRY_CHANGED_ACTION="manufact_country_changed";
var MANUFACT_SAMEAS_ACTION="sameas_action";

//FORM NODES (FN)
// address form nodes
var SERVICE_CONTACTHEADING_LBL_FN=cFormNodeManager.getFormNodeForKey("lblPart4Heading");
var SERVICE_ADDRESSDETAILS_SF_FN=cFormNodeManager.getFormNodeForKey("sfServiceAddressDetails");

//Clinical address form nodes
var SERVICE_PROVINCE_FN=cFormNodeManager.getFormNodeForKey("ddlServiceProvince");
var SERVICE_POSTAL_CODE_FN=cFormNodeManager.getFormNodeForKey("txtServicePostalCode");
var SERVICE_PROVINCE_TXT_FN=cFormNodeManager.getFormNodeForKey("txtServiceProvince");
var SERVICE_COUNTRY_DDL_FN=cFormNodeManager.getFormNodeForKey("ddlServiceCountry");

var MANUFACT_COUNTRY_DDL_FN=cFormNodeManager.getFormNodeForKey("ddlManCountry");
var MANUFACT_PROVINCE_FN= cFormNodeManager.getFormNodeForKey("ddlManProvince");
var MANUFACT_POSTAL_CODE_FN=cFormNodeManager.getFormNodeForKey("txtManPostalCode");
var MANUFACT_PROVINCE_TXT_FN=cFormNodeManager.getFormNodeForKey("txtManProvince");
var MANUFACT_SF_FN=	cFormNodeManager.getFormNodeForKey("txtManProvince");				
var MANUFACT_DETAILS_SF_FN=	cFormNodeManager.getFormNodeForKey("sfManAddressDetails");
var MANUFACT_SAMEAS_CHK_FN=cFormNodeManager.getFormNodeForKey("chkSameAs");


_initializeFormNodes();






/* Action Handler- Place all actions here
*
*
*
*/
function actionPerformed(anEvent)
{
	switch(anEvent.getActionCommand())
	{
		
			case SERVICE_COUNTRY_CHANGED_ACTION:
				//canada so should never change
				
				//cAddressUtil.countryChanged(SERVICE_PROVINCE_FN,SERVICE_POSTAL_CODE_FN);
				//cAddressUtil.setProvinceUIState(anEvent.getSource().rawValue,SERVICE_PROVINCE_FN.getNodeInstance(),SERVICE_PROVINCE_TXT_FN.getNodeInstance());
									
			break;
			
			case MANUFACT_COUNTRY_CHANGED_ACTION:
				cAddressUtil.countryChanged(MANUFACT_PROVINCE_FN,MANUFACT_POSTAL_CODE_FN);
				cAddressUtil.setProvinceUIState(anEvent.getSource().rawValue,MANUFACT_PROVINCE_FN.getNodeInstance(),MANUFACT_PROVINCE_TXT_FN.getNodeInstance());
									
			break;
			
			case INITIALISE_COUNTRY_ACTION:
					 _setCountryReadonly("CA",anEvent.getSource());
			
			break;
			
			case MANUFACT_SAMEAS_ACTION:
			
			_setManufactAddress(anEvent.getSource().rawValue);
					/*if(anEvent.getSource().rawValue==0){
						 _addManufactDetails();
					}else{
						 _removeManufactDetails();
					}*/

			break;
				
		default:
			throw cException.createInstance(SCRIPT_OBJECT_NAME
				  + ".actionPerformed() - unrecognized event '" 
				  + anEvent.getActionCommand() + "'.", "UnsupportedAction");
	}//switch
}//end fn


function initialise(){
		
	var sameAsValue=MANUFACT_SAMEAS_CHK_FN.getNodeInstance().rawValue;
	
	_setManufactAddress(sameAsValue);
	if(!sameAsValue){
		cAddressUtil.setProvinceUIState(MANUFACT_COUNTRY_DDL_FN.getNodeInstance().rawValue,MANUFACT_PROVINCE_FN.getNodeInstance(),MANUFACT_PROVINCE_TXT_FN.getNodeInstance());
		var contactHeadingLabel= cResourceManager.get("lbFor")+cResourceManager.get("lbManufacturer");
		cAddressUtil.updateAllFieldTooltips(MANUFACT_DETAILS_SF_FN.getNodeInstance(),contactHeadingLabel,LABEL_END);
	}
	_setFieldReadonly(CANADA,SERVICE_COUNTRY_DDL_FN.getNodeInstance()); //call first affects province
	cAddressUtil.countryChanged(SERVICE_PROVINCE_FN,SERVICE_POSTAL_CODE_FN);
	//set the province UI visibility based on the country value
	cAddressUtil.setProvinceUIState(SERVICE_COUNTRY_DDL_FN.getNodeInstance().rawValue,SERVICE_PROVINCE_FN.getNodeInstance(),SERVICE_PROVINCE_TXT_FN.getNodeInstance());
	//update all the tooltips based on the provided label
	var contactHeadingLabel= cResourceManager.get("lbFor")+SERVICE_CONTACTHEADING_LBL_FN.getLabel();
	cAddressUtil.updateAllFieldTooltips(SERVICE_ADDRESSDETAILS_SF_FN.getNodeInstance(),contactHeadingLabel,LABEL_END);
	
	
	
	
	
}


/*
* Checks to see if a form node exists. If it doesn't exist than throw an exception. Otherwise this will fail silently
*
*/

function _initializeFormNodes(){

		try{
		cControllerUtil.checkFormNode(SERVICE_CONTACTHEADING_LBL_FN,SCRIPT_OBJECT_NAME,"SERVICE_CONTACTHEADING_LBL_FN");
		cControllerUtil.checkFormNode(SERVICE_ADDRESSDETAILS_SF_FN,SCRIPT_OBJECT_NAME,"SERVICE_ADDRESSDETAILS_SF_FN");
		cControllerUtil.checkFormNode(SERVICE_COUNTRY_DDL_FN,SCRIPT_OBJECT_NAME,"SERVICE_COUNTRY_DDL_FN");
		cControllerUtil.checkFormNode(SERVICE_PROVINCE_FN,SCRIPT_OBJECT_NAME,"SERVICE_PROVINCE_FN");
		cControllerUtil.checkFormNode(SERVICE_POSTAL_CODE_FN,SCRIPT_OBJECT_NAME,"SERVICE_POSTAL_CODE_FN");
		cControllerUtil.checkFormNode(SERVICE_PROVINCE_TXT_FN,SCRIPT_OBJECT_NAME,"SERVICE_PROVINCE_TXT_FN");
		//man
		cControllerUtil.checkFormNode(MANUFACT_COUNTRY_DDL_FN,SCRIPT_OBJECT_NAME,"MANUFACT_COUNTRY_DDL_FN");
		cControllerUtil.checkFormNode(MANUFACT_PROVINCE_FN,SCRIPT_OBJECT_NAME,"MANUFACT_PROVINCE_FN");
		cControllerUtil.checkFormNode(MANUFACT_POSTAL_CODE_FN,SCRIPT_OBJECT_NAME,"MANUFACT_POSTAL_CODE_FN");
		cControllerUtil.checkFormNode(MANUFACT_PROVINCE_TXT_FN,SCRIPT_OBJECT_NAME,"MANUFACT_PROVINCE_TXT_FN");
		cControllerUtil.checkFormNode(MANUFACT_DETAILS_SF_FN,SCRIPT_OBJECT_NAME,"MANUFACT_DETAILS_SF_FN");
		cControllerUtil.checkFormNode(MANUFACT_SAMEAS_CHK_FN,SCRIPT_OBJECT_NAME,"MANUFACT_SAMEAS_CHK_FN");
		
		

	 }
	 catch (exception)
	{
		cLog.critical(cResourceManager.get("error_application", SCRIPT_OBJECT_NAME+"._initializeFormNode()"), exception);
	}

}

function _setManufactAddress(sameAsValue){

	if(sameAsValue==0){
			_addManufactDetails();
	}else{
			_removeManufactDetails();
	}
}


/*
* Sets the passed in adobe node to readonly and sets the value of the field
*@param- countryValue- the saved (rawValue) to set
*@param- countryInstance- the country Instance to process
*/
function _setCountryReadonly(countryValue,countryInstance){

	countryInstance.rawValue=countryValue;
	var country_FN=cFormNodeManager.getFormNodeForSom(countryInstance.somExpression);		
	country_FN.lock(countryInstance);
}

function _addManufactDetails(){
	var instanceMgr=MANUFACT_DETAILS_SF_FN.getInstanceManager();
	var newInstance=cGeneralUtil.addSubformInstance(instanceMgr);
}

function _removeManufactDetails(){

	var manInstance=MANUFACT_DETAILS_SF_FN.getNodeInstance()
	if(manInstance)
	cGeneralUtil.removeSubformInstance(manInstance);
}            
               
     
	/*
* Sets the passed in adobe node to readonly and sets the value of the field
*@param- countryValue- the saved (rawValue) to set
*@param- countryInstance- the country Instance to process
*/
function _setFieldReadonly(fieldValue,fieldInstance){

	fieldInstance.rawValue=fieldValue;
	var field_FN=cFormNodeManager.getFormNodeForSom(fieldInstance.somExpression);		
	field_FN.lock(fieldInstance);
}     
               
</script>
                  <script contentType="application/x-javascript" name="MasterPageHandler">

//Imports
var cLog                     = script.core.util.Log;
var cFormNodeManager         = script.core.model.FormNodeManager;
var cResourceManager         = script.core.lang.ResourceManager;
var cException               = script.core.util.Exception;
var cConfigManager=			script.core.util.ConfigurationManager;
var cControllerUtil = 		script.core.util.ControllerUtil;
var cSystem = 				script.core.System;
var cUiUtil=				script.core.util.UiUtil;
var cFailureReporter=		script.core.validation.FailureReporter;

var cGeneralUtil=			script.HCeForm.util.General;
var cFormHandler=			script.HCeForm.control.FormHandler;


var INITIALIZE_MASTER_PAGE=		"intialize_masterPage";


var FORM_VERSION_TXT_FN=		cFormNodeManager.getFormNodeForKey("mp1Version");	
var TITLE_LBL_FN=				cFormNodeManager.getFormNodeForKey("mp1Title");	

var FRENCH=			cConfigManager.get("FRENCH");
var VERSION=		cConfigManager.get("formVersion");
_initializeFormNodes();


/*
* actionPerformed- central event handler for the overall form functionality
*
*
*/
function actionPerformed(anEvent)
{
	switch(anEvent.getActionCommand())
	{


		case INITIALIZE_MASTER_PAGE:
			initialize(anEvent.getValue());
			break;
			
				
		default:
			throw cException.createInstance(SCRIPT_OBJECT_NAME
				  + ".actionPerformed() - unrecognized event '" 
				  + anEvent.getActionCommand() + "'.", "UnsupportedAction");
	}
}



function initialize(a_sfInstance){


	_setFormVersion(FORM_VERSION_TXT_FN.getNodeInstance(a_sfInstance));
	_setLabels(a_sfInstance);	
	
}


function _setFormVersion(a_versionField){
	a_versionField.rawValue=VERSION;
	cUiUtil.setCaption(a_versionField,cResourceManager.get(FORM_VERSION_TXT_FN.labelKey));//shouldnt have to do this
}

//sets the labels since this doesn't seem to work on the master page
function _setLabels(a_sfInstance){

	var titleInstance=TITLE_LBL_FN.getNodeInstance(a_sfInstance);
	cUiUtil.setCaption(titleInstance,cResourceManager.get(TITLE_LBL_FN.labelKey));	
}



/***Private functionality ***/
function _initializeFormNodes(){

	try{
	
		cControllerUtil.checkFormNode(FORM_VERSION_TXT_FN, SCRIPT_OBJECT_NAME ,"FORM_VERSION_TXT_FN");
		cControllerUtil.checkFormNode(TITLE_LBL_FN, SCRIPT_OBJECT_NAME ,"TITLE_LBL_FN");			
	}
	catch (exception)
	{
		cLog.critical(SCRIPT_OBJECT_NAME+"._initialize()", exception);
	}
}
</script>
                  <script contentType="application/x-javascript" name="Part1_5Handler">

/** Global Variables **/

var cFormNodeManager = 		script.core.model.FormNodeManager;
var cResourceManager = 		script.core.lang.ResourceManager;
var cConfigManager			=script.core.util.ConfigurationManager;
var cException = 			script.core.util.Exception;
var cLog = 					script.core.util.Log;
var cUiUtil=				script.core.util.UiUtil;

var  cGeneralUtil=			script.HCeForm.util.General;
var cNumberUtil=			script.HCeForm.util.Number;
var cAddressUtil=			script.HCeForm.util.AddressUtil;

//SCRIPT NAME
var SCRIPT_OBJECT_NAME="FormHandler";


var FRENCH=						cConfigManager.get("FRENCH");
var ENGLISH=					cConfigManager.get("ENGLISH");
var PAT_PREV=					cConfigManager.get("PAT_PREV");	
var SNDS=						cConfigManager.get("SNDS");
var OTHER=						cConfigManager.get("OTHER");
var LABEL_END=					cConfigManager.get("LabelEnd");
	
//action Global
var FILING_OPTION_CHANGE=	"filing_change";
var NUMBER_SIX_DIG_ACTION= 	"six_digits";
var NUMBER_EIGHT_DIG_ACTION="eight_digits";
var RELATED_SUB_CHANGE=  	"related_sub";
var ADD_MED_INGREDIENT=	 	"add_med_ingred";
var ROUTE_ADMIN_CHANGE= 	"roaChange";
var DOSAGE_FORM_CHANGE=		"dosageFormChange";
var CODEA_CHANGE	=		"codeAChange";
var CODEB_CHANGE	=		"codeBChange"
var CODEC_CHANGE	=		"codeCChange"
var REMOVE_MED_INGREDIENT=	"remove_med_ingred";


var SUBNUMBER_SF_FN=		cFormNodeManager.getFormNodeForKey("sfSubNumber"); 
var FORMTYPE_DDL_FN=		cFormNodeManager.getFormNodeForKey("ddlFormType");
var RELATEDTYPE_SF_FN=		cFormNodeManager.getFormNodeForKey("sfFormulationType");
var RELATEDSUB_DDL_FN=		cFormNodeManager.getFormNodeForKey("ddlRelatedSub");
var INGREDIENT_SF_FN=		cFormNodeManager.getFormNodeForKey("sfIngredient");	
var INGREDIENT_TXT_FN=		cFormNodeManager.getFormNodeForKey("txtIngredient");
var INGRED_DELETE_BTN_FN=	cFormNodeManager.getFormNodeForKey("btnDeleteIng");
var ROUTE_DDL_FN=			cFormNodeManager.getFormNodeForKey("ddlRoute");
var ROUTE_DETAIL_TXT_FN=	cFormNodeManager.getFormNodeForKey("txtRouteDetails");
var DOSAGE_DDL_FN=			cFormNodeManager.getFormNodeForKey("ddlDosageForm");
var DOSAGE_DETAIL_TXT_FN=	cFormNodeManager.getFormNodeForKey("txtDosageDetails");
var CODEA_CHK_FN=			cFormNodeManager.getFormNodeForKey("chkCodeA");	
var CODEB_CHK_FN=			cFormNodeManager.getFormNodeForKey("chkCodeB");
var CODEC_CHK_FN=			cFormNodeManager.getFormNodeForKey("chkCodeC");
var MAN_CONTACT_LBL_FN=		cFormNodeManager.getFormNodeForKey("lblPart5ContactHeading");	
var MAN_CONTACT_SF_FN=		cFormNodeManager.getFormNodeForKey("sfManContactDetails");

var HCONLY_SF_FN=			cFormNodeManager.getFormNodeForKey("sfHCOnly");

var CERT_DETAILS_SF_FN=		cFormNodeManager.getFormNodeForKey("sfCertificationDetails");
	
/*
* actionPerformed- central event handler for the overall form functionality
*
*
*/
function actionPerformed(anEvent)
{
	switch(anEvent.getActionCommand())
	{
					 
		case FILING_OPTION_CHANGE:
				_filingOptionChange(anEvent.getSource().rawValue);
			
			break;
			
		case NUMBER_SIX_DIG_ACTION:
				cNumberUtil.digitTestYX(anEvent.getValue(),6,0);	
			break;	
			
		case NUMBER_EIGHT_DIG_ACTION:
				cNumberUtil.digitTestYX(anEvent.getValue(),8,0);	
			break;	
		case RELATED_SUB_CHANGE:
				_relatedSubChange(anEvent.getSource().rawValue);
		
			break;	
				
		case ADD_MED_INGREDIENT:
				_addMedicinalIngredient(anEvent.getValue()); //using value to get the subform
			break;	
			
		case REMOVE_MED_INGREDIENT:	
			_removeMedicinalIngredient(anEvent.getValue());
			cUiUtil.moveFocus();
			break;
		case ROUTE_ADMIN_CHANGE:	
				_routeAdminChange(anEvent.getSource().rawValue)			 
			break;
		
		case DOSAGE_FORM_CHANGE:	
				_dosageFormChange(anEvent.getSource().rawValue)			 
			break;	
		
		case CODEA_CHANGE:	
			 _updateCodeUI("A");
			 break;
			 
		case CODEB_CHANGE:	
			 _updateCodeUI("B");
			 break;
			 
		case CODEC_CHANGE:	
			 _updateCodeUI("C");
			 break;	 	 
			
		default:
			throw cException.createInstance(SCRIPT_OBJECT_NAME
				  + ".actionPerformed() - initialize Form '" 
				  + anEvent.getActionCommand() + "'.", "UnsupportedAction");
	}
}

function initializeHandler(){

	_filingOptionChange(FORMTYPE_DDL_FN.getNodeInstance().rawValue);
	 _relatedSubChange(RELATEDSUB_DDL_FN.getNodeInstance().rawValue);
	 _routeAdminChange(ROUTE_DDL_FN.getNodeInstance().rawValue);
	 _dosageFormChange(DOSAGE_DDL_FN.getNodeInstance().rawValue);

	 updateAllCaptionsToolTips();
	  setIngredientDeleteButtonUI();
	  
	  //lbOfCertifier
	var certifierLabel=cResourceManager.get("lbOfCertifier");
	cAddressUtil.updateAllFieldTooltips(CERT_DETAILS_SF_FN.getNodeInstance(),certifierLabel,LABEL_END);
	
	//var certifierLabel=cResourceManager.get("lbOfCertifier");
	
	var contactHeadingLabel= cResourceManager.get("lbFor")+MAN_CONTACT_LBL_FN.getLabel();
	cAddressUtil.updateAllFieldTooltips(MAN_CONTACT_SF_FN.getNodeInstance(),contactHeadingLabel,LABEL_END);
}


function updateAllCaptionsToolTips(){

	 updateAllIngredientCaptions();
		
}

function addHCOnlySection(){

	var instanceMgr=HCONLY_SF_FN.getInstanceManager();
	var newInstance=cGeneralUtil.addSubformInstance(instanceMgr);
	if(newInstance){
		var hcLabel=cResourceManager.get("lbFor")+cResourceManager.get("lbHCOnly")
		cAddressUtil.updateAllFieldTooltips(HCONLY_SF_FN.getNodeInstance(),hcLabel,LABEL_END);
	}
}
function removeHCOnlySection(){

	cGeneralUtil.removeSubformInstance(HCONLY_SF_FN.getNodeInstance());

}




/********* Private functions *****/

function _initializeFormNodes(){

	try{

		cControllerUtil.checkFormNode(SUBNUMBER_SF_FN,SCRIPT_OBJECT_NAME,"SUBNUMBER_SF_FN");
		cControllerUtil.checkFormNode(FORMTYPE_DDL_FN,SCRIPT_OBJECT_NAME,"FORMTYPE_DDL_FN");
		cControllerUtil.checkFormNode(RELATEDTYPE_SF_FN,SCRIPT_OBJECT_NAME,"RELATEDTYPE_SF_FN");
		cControllerUtil.checkFormNode(RELATEDSUB_DDL_FN,SCRIPT_OBJECT_NAME,"RELATEDSUB_DDL_FN");
		cControllerUtil.checkFormNode(INGREDIENT_SF_FN,SCRIPT_OBJECT_NAME,"INGREDIENT_SF_FN");
		cControllerUtil.checkFormNode(INGREDIENT_TXT_FN,SCRIPT_OBJECT_NAME,"INGREDIENT_TXT_FN");	
		cControllerUtil.checkFormNode(INGRED_DELETE_BTN_FN,SCRIPT_OBJECT_NAME,"INGRED_DELETE_BTN_FN");
		cControllerUtil.checkFormNode(ROUTE_DETAIL_TXT_FN,SCRIPT_OBJECT_NAME,"ROUTE_DETAIL_TXT_FN");
		cControllerUtil.checkFormNode(ROUTE_DDL_FN,SCRIPT_OBJECT_NAME,"ROUTE_DDL_FN");
		cControllerUtil.checkFormNode(DOSAGE_DDL_FN,SCRIPT_OBJECT_NAME,"DOSAGE_DDL_FN");
		cControllerUtil.checkFormNode(DOSAGE_DETAIL_TXT_FN,SCRIPT_OBJECT_NAME,"DOSAGE_DETAIL_TXT_FN");	
		cControllerUtil.checkFormNode(CODEA_CHK_FN,SCRIPT_OBJECT_NAME,"CODEA_CHK_FN");
		cControllerUtil.checkFormNode(CODEB_CHK_FN,SCRIPT_OBJECT_NAME,"CODEB_CHK_FN");
		cControllerUtil.checkFormNode(CODEC_CHK_FN,SCRIPT_OBJECT_NAME,"CODEC_CHK_FN");
		
		cControllerUtil.checkFormNode(HCONLY_SF_FN,SCRIPT_OBJECT_NAME,"HCONLY_SF_FN");				
		 
		cControllerUtil.checkFormNode(SERVICE_DETAILS_SF_FN,SCRIPT_OBJECT_NAME,"SERVICE_DETAILS_SF_FN");
		cControllerUtil.checkFormNode(MANUF_DETAILS_SF_FN,SCRIPT_OBJECT_NAME,"MANUF_DETAILS_SF_FN"); 
		cControllerUtil.checkFormNode(CERT_DETAILS_SF_FN,SCRIPT_OBJECT_NAME,"CERT_DETAILS_SF_FN"); 
		cControllerUtil.checkFormNode(MAN_CONTACT_SF_FN,SCRIPT_OBJECT_NAME,"MAN_CONTACT_SF_FN");
				 		
	 }
	 catch (exception)
	{
		cLog.critical(cResourceManager.get("error_application", SCRIPT_OBJECT_NAME+".initializeFormNodes()"), exception);
	}

}//end fn


/*
* Shows or hides/clears the submission number 
* If the value is previously filed submission
*@param filingOpionValue- tbe value of the patent list filing option
*/

function _filingOptionChange(filingOptionValue){

	var subInstance=SUBNUMBER_SF_FN.getNodeInstance();
	
	if(PAT_PREV===filingOptionValue){

		cUiUtil.show(subInstance);
		
	}else{
		 cGeneralUtil.hideAndClearNodeInstance(subInstance);
	}
}

function _relatedSubChange(relatedValue){

	var subInstance=RELATEDTYPE_SF_FN.getNodeInstance();
	if(SNDS===relatedValue){
		
		cUiUtil.show(subInstance);	
	}else{
	
		 cGeneralUtil.hideAndClearNodeInstance(subInstance);
	}

}
function _addMedicinalIngredient(){

	var instanceMgr=INGREDIENT_SF_FN.getInstanceManager();
	var newInstance=cGeneralUtil.addSubformInstance(instanceMgr);
	if(newInstance){	
		_setIngredientCaption(newInstance);
		 setIngredientDeleteButtonUI()
		  updateAllCaptionsToolTips();
	}

}

function _removeMedicinalIngredient(sfInstance){

	if(sfInstance){
		setMedIngredCursor(sfInstance);
		cGeneralUtil.removeSubformInstance(sfInstance);
		 setIngredientDeleteButtonUI()
		  updateAllCaptionsToolTips();
	}else{
		cLog.Warn("no subform with _removeMedicinalIngredient");
	}
}

function setMedIngredCursor(toDeleteSfInstance){

	var formNode=cFormNodeManager.getFormNodeForSom(toDeleteSfInstance.somExpression);
	var instanceList=formNode.getNodeInstances();
	var currIndex=toDeleteSfInstance.index;
	if(instanceList.length&lt;2) return;
	
	if(instanceList.length==2){
		//set the cursor to the previous field
		cUiUtil.setFocus(INGREDIENT_TXT_FN.getNodeInstance(instanceList.item(0)));

	}else{
		cUiUtil.setFocus(INGRED_DELETE_BTN_FN.getNodeInstance(instanceList.item((currIndex-1))));
		
		//set cursor to previous delete button
	}
}


function _setIngredientCaption(subFormInstance){
    var ingredientInstance=INGREDIENT_TXT_FN.getNodeInstance(subFormInstance);
    var deleteBtnInstance=INGRED_DELETE_BTN_FN.getNodeInstance(subFormInstance);
    var indexText=" "+(subFormInstance.index+1);    
    
    var ingredMsg= INGREDIENT_TXT_FN.getLabel(ingredientInstance)+ indexText;
      var deleteMsg=INGRED_DELETE_BTN_FN.getLabel(deleteBtnInstance) + indexText;             
      // cUiUtil.setToolTip(ingredientInstance, toolTipMsg);
      cUiUtil.setCaption(ingredientInstance, ingredMsg);
       cUiUtil.setCaption(deleteBtnInstance, deleteMsg);
}

function updateAllIngredientCaptions(){

	var instanceList=INGREDIENT_SF_FN.getNodeInstances();
	for(var i=0;i&lt;instanceList.length;i++){
			_setIngredientCaption(instanceList.item(i));	
	}
}
function setIngredientDeleteButtonUI(){
		var instanceList=INGREDIENT_SF_FN.getNodeInstances();
		if(instanceList.length===1){		
			cUiUtil.hide(INGRED_DELETE_BTN_FN.getNodeInstance(instanceList.item(0)))
		}else{
		
			cUiUtil.show(INGRED_DELETE_BTN_FN.getNodeInstance(instanceList.item(0)))
		}
}


function _routeAdminChange(routeValue){

	
	var routeOtherInstance=ROUTE_DETAIL_TXT_FN.getNodeInstance();	
	if(OTHER===routeValue){

		cUiUtil.show(routeOtherInstance);
		
	}else{
		 cGeneralUtil.hideAndClearNodeInstance(routeOtherInstance);
	}
	
}
function _dosageFormChange(dosageValue){

	
	var dosageOtherInstance=DOSAGE_DETAIL_TXT_FN.getNodeInstance();	
	if(OTHER===dosageValue){

		cUiUtil.show(dosageOtherInstance);
		
	}else{
		 cGeneralUtil.hideAndClearNodeInstance(dosageOtherInstance);
	}		
}
/*
* Updates the code question state. B and C are mutually exclusive to A
*
*/
function _updateCodeUI(codeValue){

	if(codeValue==="A"){
	
		CODEB_CHK_FN.getNodeInstance().rawValue="0";
		CODEC_CHK_FN.getNodeInstance().rawValue="0";
	}else if (codeValue==="B" ||codeValue==="C"){
	
		 CODEA_CHK_FN.getNodeInstance().rawValue="0"	
	}
}


</script>
                  <script usehref="..\..\fragments\signature\SignatureBlockHandler.xdp#som($template.form1.#subform.#variables.SignatureBlockHandler)"/>
                  <?templateDesigner expand 1?></variables>
               <bind match="none"/>
               <?templateDesigner expand 1?></subform>
            <subform h="50mm" name="model" w="100mm">
               <subform w="100mm" h="50mm" name="delegate">
                  <bind match="none"/>
                  <variables>
                     <script usehref="..\..\fragments\delegates\EmailFormatDelegate.xdp#som($template.form1.#subform.#variables.EmailFormatDelegate)"/>
                     <script usehref="..\..\fragments\delegates\PostalCodeFormatDelegate.xdp#som($template.form1.#subform.#variables.PostalCodeFormatDelegate)"/>
                     <script usehref="..\..\fragments\delegates\TelephoneFormatDelegate.xdp#som($template.form1.#subform.#variables.TelephoneFormatDelegate)"/>
                     <script contentType="application/x-javascript" name="DateFormatDelegate">

/*******************************************************************************
 * An object that validates a date to Health Canada's standard format of ####-##-##
 * Also validates if the date is correct 
 *
 * Implements FormNodeDelegateInterface.
 */

//imports
var cConfigurationManager = script.core.util.ConfigurationManager;
var cLog = script.core.util.Log;
var cObjectUtil = script.core.util.ObjectUtil;
var cResourceManager = script.core.lang.ResourceManager;
var cTypeChecker = script.core.util.TypeChecker;
var cUiUtil = script.core.util.UiUtil;
var cValidationFailure = script.core.validation.ValidationFailure;


var DATE_ERR_NOTDATE=			"not_date";
var DATE_ERR_INVALID_MONTH=		"month_invalid";
var DATE_ERR_INVALID_DAY_31=	"day_invalid31";
var DATE_ERR_INVALID_DAY_30=	"day_invalid30";
var DATE_ERR_INVALID_DAY_29=	"day_invalid29";
var DATE_ERR_INVALID_DAY_28=	"day_invalid28";
var DATE_VALID=					"dateValid";
var FUTURE_DATE=				"date_future";
var PAST_DATE=					"date_past";	
var strSeparator 					= '-';


/*******************************************************************************
 * Gets a new DateFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the new DateFormatDelegateinstance
 */
function createInstance()
{
	return new DateFormatDelegateClass();
}



/**
 * Class implementation
 */
function DateFormatDelegateClass(somExpression)
{
	this.className = "DateFormatDelegate";
	this.errorResourceAlias=null; //sets a default error message
	this.expandedResourceAlias=null;
	this.formNode;
	this.validateFuture=true;

	/**
	 * Gets this node's default value, which is an internationalized value.
	 * This returns null since this uses a picklist.
	 * @param aNode the Adobe Node instance who's default value is required.
	 * @return a String that contains the internationalized default value for
	 *		   the passed Node. Null if this is not applicable.
	 */
    this.getDefaultValue = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets the type of format validation to be applied to data entered into
	 * this node in the UI.
	 * @param aNode the Adobe Node instance who's value must conform to a 
	 *		  specific format.
	 * @return a String that contains the type of format validation to be
	 *		   applied to data entered into this node in the UI. These must be
	 *		   types that are supported by the currently installed 
	 *		   FormatValidator. Null if this is not applicable.
	 */
    this.getFormatType = function(aNode)
    {
    	return  null;
	}

	/**
	 * Gets this node's label to be displayed in the UI, which is an
	 * internationalized value.
	 * @param aNode the Adobe Node instance who's label is required.
	 * @return a String that contains the internationalized UI label for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getLabel = function(aNode)
    {
    	return null;
   	}

	/**
	 * Gets whether this node is mandatory (required).
	 * @param aNode the Adobe Node instance who's mandatory setting is required.
	 * @return a boolean - true if is mandatory*/
	this.isMandatory = function(aNode)
	{
    		return null;
	}
		
	/**
	 * Gets a string that defines the pick list to be displayed in the UI for
	 * this node.
	 * @param aNode the Adobe Node instance who's pick list is required.
	 * @return a String that contains the definition of the pick list to be
	 *		   displayed in the UI for this node. The format is:
	 *		   "displayValue1, code1, displayValue2, code2...". Null if
	 *		   this is not applicable.
	 */
    this.getPickListValues = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets this node's tool tip to be displayed in the UI, which is an
	 * internationalized value. In this case it is null, since these are
	 * dependant on the subform that the field is in (must be handled by the
	 * FormNode itself).
	 * @param aNode the Adobe Node instance who's tool tip is required.
	 * @return a String that contains the internationalized UI tool tip for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getToolTip = function(aNode)
    {
    	return null;
	}

	/**
	 * Sets the FormNode that is using this delegate. It is mandatory that this
	 * is set to allow the delegate to access items in the FormNode as required.
	 * @param aFormNode the FormNode that is using this delegate.
	 */
    this.setFormNode = function(aFormNode)
    {
    	this.formNode = aFormNode;
	}
	
	/**
	 * Sets custom error text 
	 *
	 * @param aFormNode the FormNode that is using this delegate.
	 */
	this.setErrorText = function(aliasName)
    {
    	
    	this.errorResourceAlias=aliasName;
    }
    
    /*
    * Sets whether to validate if a future date
    *true means a future date is not allowed (default)
    *
    */
	this.setValidateFuture=function(futureValidationVal){
	
		this.validateFuture=futureValidationVal;
	}

	/**
	 * Gets whether this delegate is used to validate node instances (e.g.
	 * mandatory fields, etc.) as well as their child nodes.
	 * @return a boolean -true if this should be called to perform validation.
	 */
	this.isUsedToValidateNodes = function()
	{
		return true;
	}
	
	/**
	 * Performs custom validation. This also validates all child FormNodes if
	 * required. It may call the FormNode's _validateNode().
	 * @param aNodeInstance (optional) the instance of Adobe Node that should
	 *		  be validated. Required if this is below a collection of instances
	 *		  (e.g. a repeating subform). When unspecified, this may use the
	 *		  FormNode's getNodeInstances() to get all instances of this Node
	 *		  to validate.
	 * @param updateDisplay (optional) a boolean that indicates whether this
	 *		  should automatically update the colour of the node to reflect
	 *		  whether it passed validation. Defaults to true.
	 * @param aValidationFailure (optional) the ValidationFailure that this
	 *		  should append its validationFailures to. This is only used
	 *		  internally when this is called recursively.
	 * @return a ValidationFailure containing all failures that were
	 *		   encountered. Returns aValidationFailure if that parameter was
	 *		   used. Null if there were no failures.
	 * @throws an UnexpectedDataType Exception if aNodeInstance isn't an Adobe
	 *		   Node.
	 */
	this.validateNode = function(aNodeInstance, updateDisplay,
								 aValidationFailure)
	{
		// It must be called to avoid being
		// overwirtten.
		this.formNode._validateNode(aNodeInstance, updateDisplay,
									aValidationFailure);

		if(!aNodeInstance.isNull){
			var nodeDate=aNodeInstance.rawValue;
			var result=_checkDateOk(nodeDate);
			if(result===DATE_VALID &amp;&amp; this.validateFuture==true){
				var futureResult=isFutureDate(nodeDate);
				if(futureResult===true){
					result=FUTURE_DATE;
				}	
			}
			if(result===DATE_VALID){
				var pastResult=_isTooFarinPast(nodeDate);
				if(pastResult===true){
					result=PAST_DATE;
				}
			}	
	
			if(result!==DATE_VALID){
		
				if(updateDisplay){
					cUiUtil.setColour(aNodeInstance,
									cConfigurationManager.get("colourError"));
				}	
				switch(result){
				
					case DATE_ERR_NOTDATE:
						this.expandedResourceAlias="err_notDate";
						break;
					case DATE_ERR_INVALID_MONTH:
						this.expandedResourceAlias="err_dateInvalidMonth";
						break;	
					case DATE_ERR_INVALID_DAY_31:
						this.expandedResourceAlias="err_dateInvalidDay31";
						break;	
					case DATE_ERR_INVALID_DAY_30:
						this.expandedResourceAlias="err_dateInvalidDay30";
						break;
					case DATE_ERR_INVALID_DAY_29:
						this.expandedResourceAlias="err_dateInvalidDay29";
						break;				
					case DATE_ERR_INVALID_DAY_28:
						this.expandedResourceAlias="err_dateInvalidDay28";
						break;
												
					case FUTURE_DATE:	
						this.expandedResourceAlias="err_futureDate";
						break;
					
					case PAST_DATE:	
						this.expandedResourceAlias="err_pastDate";
						break;	
								
					default: //for anything else just default to not a date
						this.expandedResourceAlias="err_notDate";
						break;				
				}
				var validationText=	cResourceManager.get(this.errorResourceAlias) +" "+	cResourceManager.get(this.expandedResourceAlias);			
				var newValidationFailure = cValidationFailure.createInstance(
										"DateValidation",
										validationText);
				if (aValidationFailure != null)
				{
					aValidationFailure.addNestedValidationFailure(newValidationFailure);
				}
				else
				{
					aValidationFailure = newValidationFailure;
				}					
									
			}else{ //field passed reset color
				
				if(updateDisplay) cUiUtil.resetColour(aNodeInstance);
				
			}	
		
		}//isNotNull
				
		return aValidationFailure;
	}
			
    /**
     * Describes this object. This is implemented in all objects since their
     * toString() cannot be overridden!
     * @return the description of this object.
     */
    this.asString = function()
	{
		var buffer = this.className + "[";
		
	    if (this.formNode != null)
	    {
	    	buffer += "formNode.somExpression= " + this.formNode.somExpression;
	    }
	    else
	    {
	    	buffer += "formNode= null";
	    }
		buffer += "]";
		return buffer;
	}

}

function _checkDateOk(value)
{
	if(!value) return(DATE_VALID); //does not check for empty
		
	var reg =/^\d{4}(\-|\/|\.)\d{2}\1\d{2}$/;
	
	//1) check if in proper format	
	var check = reg.test(value); 
	if (check!=true) return(DATE_ERR_NOTDATE); 
		
	//var strSeparator = '-'
	var arrayDate = value.split(strSeparator); 
	var intDay = parseInt(arrayDate[2],10); 
	var intMonth = parseInt(arrayDate[1],10);
	var intYear = parseInt(arrayDate[0]);
    	 	
    //check if month is valid ie 1-12
    var maxDaysInMonth=_getMaxDayRange(arrayDate[1]);
    
    if(!maxDaysInMonth &amp;&amp; intMonth!==2) {
  	  	 return(DATE_ERR_INVALID_MONTH);  	 
    }
 	//month passed, check if day is valid
 	
 	if (intMonth === 2) {      //since lookup will return null
	      maxDaysInMonth=28;
	      if( _isLeapYear(intYear)){  
	      		maxDaysInMonth=29;
	      }		
	 }     		
	if(intDay &lt;=  maxDaysInMonth &amp;&amp; intDay != 0){
	        	return DATE_VALID; //found in lookup table, good date
	}else{
	
		return _getDayErrorType(maxDaysInMonth);
	}
	     
   return(DATE_ERR_NOTDATE);
}//end fn


/*
* Calculates the max number of days for a given month. Does not calculate for Febuary
* @param month: the month to lookup. Valid values are 1-12 as strings!
* @returns: the integer value of the max number of days, null if not found
*/
function _getMaxDayRange(month){

	 var arrayLookup = { 	'01' : 31,'03' : 31, 
	                      	'04' : 30,'05' : 31,
	                      	'06' : 30,'07' : 31,
	                      	'08' : 31,'09' : 30,
	                      	'10' : 31,'11' : 30,'12' : 31}

	return(arrayLookup[month]);

}

/*
*	Determines the correct day error message
*	@param maxDays- the max number of days allowed in a month
*	@returns- the error message
*
*/
function _getDayErrorType(maxDays){

	var errorType;
	
	switch(maxDays){
	
		case 28:
			errorType=DATE_ERR_INVALID_DAY_28;
			break; 
		
		case 29:
			errorType=DATE_ERR_INVALID_DAY_29;
			break; 
		
		case 30:
			errorType=DATE_ERR_INVALID_DAY_30;
			break; 
			
		case 31:
			errorType=DATE_ERR_INVALID_DAY_31;
			break; 
		
	
	}
	return errorType;
}

/*
*	Determines if a year is a leap year using the famous standard alg
*	@param intYear- the integer year value to check
*	@returns- true if a leap year
*
*/
function _isLeapYear(intYear){

	if ((intYear % 4 == 0) &amp;&amp; (intYear % 100 != 0) ||  (intYear % 400 == 0)) {
		 // year div by 4 and ((not div by 100) or div by 400) =ok
		 return true;
	} 
	return false;
}



function isFutureDate(value)
{
	var oToday = new Date();
	var curYear = oToday.getFullYear();
	var curMonth = pad(String(oToday.getMonth() + 1), 2, "0");
	var curDay = pad(String(oToday.getDate()), 2, "0");	
	oToday = curYear + '-' + curMonth + '-' + curDay;
	
	return (value &gt; oToday);
	

}//end fn




//pads a string s, to length len, with character chr
//padding is done in front of the string
function pad(s, len, chr)
{		
	if(s.length &gt; len)
	{
		return s.substr(s.length - len, len);
	}
	else if(s.length &lt; len)
	{
		var tmp = "";
		var i = 0;
		for(i = s.length; i &lt; len; i++)
		{
			tmp += chr;
		}
		return tmp + s;
	}
	return s;
}//end fn

function _isTooFarinPast(value){ 
	//var strSeparator = '-'
	var arrayDate = value.split(strSeparator); 
	var intYear = parseInt(arrayDate[0]);
	var oDateNow = new Date();
	var currYear=oDateNow.getFullYear();
	var isTooOld=false;

	var yearResult=currYear-intYear;
	if(yearResult&gt;130){
			isTooOld=true;
	}
	return(isTooOld);
}



</script>
                     <script contentType="application/x-javascript" name="MandatoryCheckBoxDelegate">

//
/*******************************************************************************
 * An object that responds to information requests sent to a set of check boxes
 * FormNode. This determines whether one of the children check boxes is checked
 * and responds accordingly.
 * Note that this assumes that the all check boxes are children to the same
 * parent.
 *
 * Implements FormNodeDelegateInterface.
 */

//imports
var cConfigurationManager = script.core.util.ConfigurationManager;
var cLog = script.core.util.Log;
var cObjectUtil = script.core.util.ObjectUtil;
var cResourceManager = script.core.lang.ResourceManager;
var cTypeChecker = script.core.util.TypeChecker;
var cUiUtil = script.core.util.UiUtil;
var cValidationFailure = script.core.validation.ValidationFailure;


var NO=			cConfigurationManager.get("NO");
var YES=		cConfigurationManager.get("YES");

/*******************************************************************************
 * Gets a new MandatoryCheckBoxDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the new MandatoryCheckBoxDelegate instance
 */
function createInstance()
{
	return new MandatoryCheckBoxDelegateClass();
}

/**
 * Given a parent node which contains a set of checkBoxes in its
 * children, check if at least one of the checkboxes is checked.
 * @param aNode the parent Adobe Node instance that is being processed.
 * @return a boolean - true if at least one checkbox is checked.
 */
function isMandatoryCheckBoxPassed(aNode)
{
	var checkBoxArray = this._getCheckBoxNodeArray(aNode);
	return this._isOneCheckBoxChecked(checkBoxArray);
}

/**
 * Class implementation
 */
function MandatoryCheckBoxDelegateClass(somExpression)
{
	this.className = "MandatoryCheckBoxDelegate";
	this.errorResourceAlias="error_mandatoryCheckBoxSet";
	this.formNode;

	/**
	 * Gets this node's default value, which is an internationalized value.
	 * This returns null since this uses a picklist.
	 * @param aNode the Adobe Node instance who's default value is required.
	 * @return a String that contains the internationalized default value for
	 *		   the passed Node. Null if this is not applicable.
	 */
    this.getDefaultValue = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets the type of format validation to be applied to data entered into
	 * this node in the UI.
	 * @param aNode the Adobe Node instance who's value must conform to a 
	 *		  specific format.
	 * @return a String that contains the type of format validation to be
	 *		   applied to data entered into this node in the UI. These must be
	 *		   types that are supported by the currently installed 
	 *		   FormatValidator. Null if this is not applicable.
	 */
    this.getFormatType = function(aNode)
    {
    	return null;
	}

	/**
	 * Gets this node's label to be displayed in the UI, which is an
	 * internationalized value.
	 * @param aNode the Adobe Node instance who's label is required.
	 * @return a String that contains the internationalized UI label for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getLabel = function(aNode)
    {
    	return null;
   	}

	/**
	 * Gets whether this node is mandatory (required).
	 * @param aNode the Adobe Node instance who's mandatory setting is required.
	 * @return a boolean - true if the country is Canada or the US, false if it
	 *		   is any other value, null if there was no node passed.
	 */
	this.isMandatory = function(aNode)
	{
    	if (aNode != undefined)
    	{
    		var childrenNodes = this._getChildrenNodes(aNode);
    	}
		return null;
	}
		
	/**
	 * Gets a string that defines the pick list to be displayed in the UI for
	 * this node.
	 * @param aNode the Adobe Node instance who's pick list is required.
	 * @return a String that contains the definition of the pick list to be
	 *		   displayed in the UI for this node. The format is:
	 *		   "displayValue1, code1, displayValue2, code2...". Null if
	 *		   this is not applicable.
	 */
    this.getPickListValues = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets this node's tool tip to be displayed in the UI, which is an
	 * internationalized value. In this case it is null, since these are
	 * dependant on the subform that the field is in (must be handled by the
	 * FormNode itself).
	 * @param aNode the Adobe Node instance who's tool tip is required.
	 * @return a String that contains the internationalized UI tool tip for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getToolTip = function(aNode)
    {
    	return null;
	}

	/**
	 * Sets the FormNode that is using this delegate. It is mandatory that this
	 * is set to allow the delegate to access items in the FormNode as required.
	 * @param aFormNode the FormNode that is using this delegate.
	 */
    this.setFormNode = function(aFormNode)
    {
    	this.formNode = aFormNode;
	}
	
	/**
	 * Sets custom error text 
	 *
	 * @param aFormNode the FormNode that is using this delegate.
	 */
	this.setErrorText = function(aliasName)
    {
    	
    	this.errorResourceAlias=aliasName;
    }
	

	/**
	 * Gets whether this delegate is used to validate node instances (e.g.
	 * mandatory fields, etc.) as well as their child nodes.
	 * @return a boolean -true if this should be called to perform validation.
	 */
	this.isUsedToValidateNodes = function()
	{
		return true;
	}
	
	/**
	 * Performs custom validation. This also validates all child FormNodes if
	 * required. It may call the FormNode's _validateNode().
	 * @param aNodeInstance (optional) the instance of Adobe Node that should
	 *		  be validated. Required if this is below a collection of instances
	 *		  (e.g. a repeating subform). When unspecified, this may use the
	 *		  FormNode's getNodeInstances() to get all instances of this Node
	 *		  to validate.
	 * @param updateDisplay (optional) a boolean that indicates whether this
	 *		  should automatically update the colour of the node to reflect
	 *		  whether it passed validation. Defaults to true.
	 * @param aValidationFailure (optional) the ValidationFailure that this
	 *		  should append its validationFailures to. This is only used
	 *		  internally when this is called recursively.
	 * @return a ValidationFailure containing all failures that were
	 *		   encountered. Returns aValidationFailure if that parameter was
	 *		   used. Null if there were no failures.
	 * @throws an UnexpectedDataType Exception if aNodeInstance isn't an Adobe
	 *		   Node.
	 */
	this.validateNode = function(aNodeInstance, updateDisplay,
								 aValidationFailure)
	{
		// This is to perform all other validations beside the checkBoxes
		// It must be called before the checkBoxes validation to avoid being
		// overwirtten.
		this.formNode._validateNode(aNodeInstance, updateDisplay,
									aValidationFailure);

		if(aNodeInstance.presence!=="visible"){
			return(aValidationFailure)
		}
		var checkBoxArray = this._getCheckBoxNodeArray(aNodeInstance);

		// Check if none of the checkBoxes is checked
		if (!this._isOneCheckBoxChecked(checkBoxArray))
		{
			for (var i=0; i &lt; checkBoxArray.length; i++)
			{
				cUiUtil.setColour(checkBoxArray[i],
									cConfigurationManager.get("colourError"));
			}
			var newValidationFailure = cValidationFailure.createInstance(
										"CheckBoxSet",
										cResourceManager.get(
										this.errorResourceAlias));
			if (aValidationFailure != null)
			{
				aValidationFailure.addNestedValidationFailure(newValidationFailure);
			}
			else
			{
				aValidationFailure = newValidationFailure;
			}
		}
		else
		{
			for (var i=0; i &lt; checkBoxArray.length; i++)
			{
				cUiUtil.resetColour(checkBoxArray[i]); //In case it previously failed
			}
		}
		
		return aValidationFailure;
	}
			
    /**
     * Describes this object. This is implemented in all objects since their
     * toString() cannot be overridden!
     * @return the description of this object.
     */
    this.asString = function()
	{
		var buffer = this.className + "[";
		
	    if (this.formNode != null)
	    {
	    	buffer += "formNode.somExpression= " + this.formNode.somExpression;
	    }
	    else
	    {
	    	buffer += "formNode= null";
	    }
		buffer += "]";
		return buffer;
	}

	//===== PRIVATE ============================================================
	/**
	 * Gets the children nodes from the given parent node and collect the ones
	 * that are checkBoxes into a node array. Issues a warning if the no children
	 * nodes can be found.
	 * @param aNode the parent Adobe Node instance that is being processed.
	 * @return an array - contains children nodes that are checkBoxes.
	 */
	this._getCheckBoxNodeArray = function(aNode)
	{
		var childrenNodeList = aNode.nodes;
		var checkBoxArray = new Array();

		if (childrenNodeList != null)
		{
			for(var i=0; i &lt; childrenNodeList.length; i++)
			{
				if (cTypeChecker.isCheckBox(childrenNodeList.item(i)))
				{
					checkBoxArray.push(childrenNodeList.item(i));
				}
			}
			return checkBoxArray;
		}
		cLog.warn("MandatoryCheckBoxDelegate._getCheckBoxNodeArray(aNode)"
				  + " couldn't find any child node for " + aNode.somExpression);
		return null;
	}

	/**
	 * Verify if at least one of the checkBox is checked in a checkBox array.
	 * @param aNodeArray the Adobe Node Array instance that is being processed.
	 * @return a boolean -true if at least one checkBox is checked.
	 */
	this._isOneCheckBoxChecked = function(aNodeArray)
	{
		for (var i=0; i &lt; aNodeArray.length; i++)
		{
			if (aNodeArray[i].rawValue == YES)
			{
				return true;
			}
		}
		return false;
	}
}
</script>
                     <script contentType="application/x-javascript" name="DateOrderValidDelegate">
/*******************************************************************************
 * An object that validates a date to Health Canada's standard format of ####-##-##
 * Also validates if the date is correct 
 *
 * Implements FormNodeDelegateInterface.
 */

//imports
var cConfigurationManager = script.core.util.ConfigurationManager;
var cLog = script.core.util.Log;
var cObjectUtil = script.core.util.ObjectUtil;
var cResourceManager = script.core.lang.ResourceManager;
var cTypeChecker = script.core.util.TypeChecker;
var cUiUtil = script.core.util.UiUtil;
var cValidationFailure = script.core.validation.ValidationFailure;
var cFormNodeManager = 		script.core.model.FormNodeManager;



/*******************************************************************************
 * Gets a new DateFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the new DateFormatDelegateinstance
 */
function createInstance()
{
	return new DateOrderValidDelegateClass();
}



/**
 * Class implementation
 */
function DateOrderValidDelegateClass(somExpression)
{
	this.className = "DateOrderValidDelegate";
	this.formNode;


	/**
	 * Gets this node's default value, which is an internationalized value.
	 * This returns null since this uses a picklist.
	 * @param aNode the Adobe Node instance who's default value is required.
	 * @return a String that contains the internationalized default value for
	 *		   the passed Node. Null if this is not applicable.
	 */
    this.getDefaultValue = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets the type of format validation to be applied to data entered into
	 * this node in the UI.
	 * @param aNode the Adobe Node instance who's value must conform to a 
	 *		  specific format.
	 * @return a String that contains the type of format validation to be
	 *		   applied to data entered into this node in the UI. These must be
	 *		   types that are supported by the currently installed 
	 *		   FormatValidator. Null if this is not applicable.
	 */
    this.getFormatType = function(aNode)
    {
    	return  null;
	}

	/**
	 * Gets this node's label to be displayed in the UI, which is an
	 * internationalized value.
	 * @param aNode the Adobe Node instance who's label is required.
	 * @return a String that contains the internationalized UI label for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getLabel = function(aNode)
    {
    	return null;
   	}

	/**
	 * Gets whether this node is mandatory (required).
	 * @param aNode the Adobe Node instance who's mandatory setting is required.
	 * @return a boolean - true if is mandatory*/
	this.isMandatory = function(aNode)
	{
    		return null;
	}
		
	/**
	 * Gets a string that defines the pick list to be displayed in the UI for
	 * this node.
	 * @param aNode the Adobe Node instance who's pick list is required.
	 * @return a String that contains the definition of the pick list to be
	 *		   displayed in the UI for this node. The format is:
	 *		   "displayValue1, code1, displayValue2, code2...". Null if
	 *		   this is not applicable.
	 */
    this.getPickListValues = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets this node's tool tip to be displayed in the UI, which is an
	 * internationalized value. In this case it is null, since these are
	 * dependant on the subform that the field is in (must be handled by the
	 * FormNode itself).
	 * @param aNode the Adobe Node instance who's tool tip is required.
	 * @return a String that contains the internationalized UI tool tip for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getToolTip = function(aNode)
    {
    	return null;
	}

	/**
	 * Sets the FormNode that is using this delegate. It is mandatory that this
	 * is set to allow the delegate to access items in the FormNode as required.
	 * @param aFormNode the FormNode that is using this delegate.
	 */
    this.setFormNode = function(aFormNode)
    {
    	this.formNode = aFormNode;
	}
	
	    
   
	/**
	 * Gets whether this delegate is used to validate node instances (e.g.
	 * mandatory fields, etc.) as well as their child nodes.
	 * @return a boolean -true if this should be called to perform validation.
	 */
	this.isUsedToValidateNodes = function()
	{
		return true;
	}
	
	/**
	 * Performs custom validation. This also validates all child FormNodes if
	 * required. It may call the FormNode's _validateNode().
	 * @param aNodeInstance (optional) the instance of Adobe Node that should
	 *		  be validated. Required if this is below a collection of instances
	 *		  (e.g. a repeating subform). When unspecified, this may use the
	 *		  FormNode's getNodeInstances() to get all instances of this Node
	 *		  to validate.
	 * @param updateDisplay (optional) a boolean that indicates whether this
	 *		  should automatically update the colour of the node to reflect
	 *		  whether it passed validation. Defaults to true.
	 * @param aValidationFailure (optional) the ValidationFailure that this
	 *		  should append its validationFailures to. This is only used
	 *		  internally when this is called recursively.
	 * @return a ValidationFailure containing all failures that were
	 *		   encountered. Returns aValidationFailure if that parameter was
	 *		   used. Null if there were no failures.
	 * @throws an UnexpectedDataType Exception if aNodeInstance isn't an Adobe
	 *		   Node.
	 */
	this.validateNode = function(aNodeInstance, updateDisplay,
								 aValidationFailure)
	{
		// It must be called to avoid being
		// overwirtten.
		this.formNode._validateNode(aNodeInstance, updateDisplay,
									aValidationFailure);
			
		//Step 1: get the 3 node instances
		var skipValidation=		false;
		var FILE_DTE_FN=		cFormNodeManager.getFormNodeForKey("dteFiling");
		var GRANTED_DTE_FN=		cFormNodeManager.getFormNodeForKey("dteGranted");
		var EXPIRY_DTE_FN=		cFormNodeManager.getFormNodeForKey("dteExpiry");	
		var failure=false;
		var validationText="";
		
		var fileDteInstance=FILE_DTE_FN.getNodeInstance();
		var grantedDteInstance=GRANTED_DTE_FN.getNodeInstance();
		var expiryDteInstance=EXPIRY_DTE_FN.getNodeInstance();
		var errorColour=cConfigurationManager.get("colourError");
		if(fileDteInstance.fillColor==errorColour || grantedDteInstance.fillColor==errorColour || fileDteInstance.fillColor==errorColour
			||fileDteInstance.isNull || grantedDteInstance.isNull || grantedDteInstance.isNull){
		
			return aValidationFailure;
		}
									
		//Step 3: Compare and give appropriate error messages
		var fileDateValue = new Date((fileDteInstance.rawValue).replace(/-/g,"//")); 
		var grantedDateValue = new Date((grantedDteInstance.rawValue).replace(/-/g,"//"));
		var expiryDateValue=new Date((expiryDteInstance.rawValue).replace(/-/g,"//"));
		cLog.trace("Raw "+grantedDteInstance.rawValue+fileDteInstance.rawValue+expiryDteInstance.rawValue);
		//cLog.trace("FileDate "+fileDateValue.getTime() + " Granted Value "+grantedDateValue.getTime()+" Expiry Date "+expiryDateValue.getTime() );
		cLog.trace("*****FileDate&gt;grantedDate "+(fileDateValue.getTime()&gt;grantedDateValue.getTime()));
		cLog.trace("*****grantedDate&gt;expiry "+(grantedDateValue.getTime()&gt;expiryDateValue.getTime()));
		cLog.trace("FileDAte "+fileDateValue.getTime());
		cLog.trace("Granted Date "+grantedDateValue.getTime());
		cLog.trace("Expiry Date "+expiryDateValue.getTime());
		if(fileDateValue.getTime()&gt;grantedDateValue.getTime()){
			cLog.trace("inside the file date failure");
			failure=true;
			validationText=cResourceManager.get("error_fileDate");
		}
		else if(grantedDateValue.getTime()&gt;expiryDateValue.getTime()){
			failure=true;
			cLog.trace("inside the granted date failure");
			validationText=cResourceManager.get("error_grantDate");
		}							
		if(failure){
				
				
				var newValidationFailure = cValidationFailure.createInstance("DateOrderValidation",validationText);
										
				if (aValidationFailure != null)
				{
					aValidationFailure.addNestedValidationFailure(newValidationFailure);
				}
				else
				{
					aValidationFailure = newValidationFailure;
				}						
									
		}//isNotNull
				
		return aValidationFailure;
	}
			
    /**
     * Describes this object. This is implemented in all objects since their
     * toString() cannot be overridden!
     * @return the description of this object.
     */
    this.asString = function()
	{
		var buffer = this.className + "[";
		
	    if (this.formNode != null)
	    {
	    	buffer += "formNode.somExpression= " + this.formNode.somExpression;
	    }
	    else
	    {
	    	buffer += "formNode= null";
	    }
		buffer += "]";
		return buffer;
	}

}


</script>
                     <script contentType="application/x-javascript" name="FieldLengthDelegate">
//
/*******************************************************************************
 * An object that responds to information requests sent to an email FormNode.
 *
 * Implements FormNodeDelegateInterface.
 */

//imports
var cLog = script.core.util.Log;
var cResourceManager = 		script.core.lang.ResourceManager;
var cConfigurationManager = script.core.util.ConfigurationManager;
var cUiUtil = 						script.core.util.UiUtil;
var cValidationFailure = 			script.core.validation.ValidationFailure;




/*******************************************************************************
 * Gets a new FieldLengthDelegate. Adobe does not allow object instances to be
 * created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the new EmailDelegate instance
 */
function createInstance()
{
	return new FieldLengthDelegateClass();
}

/**
 * Class implementation
 */
function FieldLengthDelegateClass(somExpression)
{
	this.className = "FieldLengthDelegate";
	this.errorResourceAlias="";
	this.fieldLength=6;
	this.formNode;	
	/**
	 * Sets custom error text 
	 *
	 * @param aliasName the resource alias to search for. Will be converted to localized text
	 */
	this.setErrorText = function(aliasName)
    {    	
    	this.errorResourceAlias=aliasName;
    }
	
		/**
		 * Sets the field length to check for. If this value is not set
		 * use the maximum length of the field
		 * @param fldLength- the length to check for
		 */
		this.setFieldLength = function(fldSize)
	    {    	
	    	this.fieldLength=fldSize;
	    }
	
	
	/**
	 * Gets this node's default value, which is an internationalized value.
	 * This returns null since this uses a picklist.
	 * @param aNode the Adobe Node instance who's default value is required.
	 * @return a String that contains the internationalized default value for
	 *		   the passed Node. Null if this is not applicable.
	 */
    this.getDefaultValue = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets the type of format validation to be applied to data entered into
	 * this node in the UI.
	 * @param aNode the Adobe Node instance who's value must conform to a 
	 *		  specific format.
	 * @return a String that contains the type of format validation to be
	 *		   applied to data entered into this node in the UI. These must be
	 *		   types that are supported by the currently installed 
	 *		   FormatValidator. Null if this is not applicable.
	 */
    this.getFormatType = function(aNode)
    {
    	return null;
	}

	/**
	 * Gets this node's label to be displayed in the UI, which is an
	 * internationalized value.
	 * @param aNode the Adobe Node instance who's label is required.
	 * @return a String that contains the internationalized UI label for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getLabel = function(aNode)
    {
    	return null;
   	}

	/**
	 * Gets whether this node is mandatory (required).
	 * @param aNode the Adobe Node instance who's mandatory setting is required.
	 * @return a boolean - true if the country is Canada or the US, false if it
	 *		   is any other value, null if there was no node passed.
	 */
	this.isMandatory = function(aNode)
	{
		return null;
	}
		
	/**
	 * Gets a string that defines the pick list to be displayed in the UI for
	 * this node.
	 * @param aNode the Adobe Node instance who's pick list is required.
	 * @return a String that contains the definition of the pick list to be
	 *		   displayed in the UI for this node. The format is:
	 *		   "displayValue1, code1, displayValue2, code2...". Null if
	 *		   this is not applicable.
	 */
    this.getPickListValues = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets this node's tool tip to be displayed in the UI, which is an
	 * internationalized value. In this case it is null, since these are
	 * dependant on the subform that the field is in (must be handled by the
	 * FormNode itself).
	 * @param aNode the Adobe Node instance who's tool tip is required.
	 * @return a String that contains the internationalized UI tool tip for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getToolTip = function(aNode)
    {
    	return null;
	}

	/**
	 * Sets the FormNode that is using this delegate. It is mandatory that this
	 * is set to allow the delegate to access items in the FormNode as required.
	 * @param aFormNode the FormNode that is using this delegate.
	 */
    this.setFormNode = function(aFormNode)
    {
    	this.formNode = aFormNode;
	}

	/**
	 * Gets whether this delegate is used to validate node instances (e.g.
	 * mandatory fields, etc.) as well as their child nodes.
	 * @return a boolean -true if this should be called to perform validation.
	 */
	this.isUsedToValidateNodes = function()
	{
		return true;
	}
	
	/**
	 * Dummy function stub so the interface requirements are met.
	 */
	this.validateNode = function(aNodeInstance, updateDisplay,
								 aValidationFailure)
	{
		// It must be called to avoid being
		// overwirtten.
		this.formNode._validateNode(aNodeInstance, updateDisplay,
									aValidationFailure);
		
		if(!aNodeInstance.isNull){
				var temp=""+aNodeInstance.rawValue //force to a string
				var fldLength=temp.length;
				if(this.fieldLength!=fldLength){
				
					//error
					this.createError(aNodeInstance,updateDisplay,aValidationFailure)
				
				}else{
				cUiUtil.resetColour(aNodeInstance); //In case it previously failed
			}		
			
		}			
		return aValidationFailure;
	}
	
	this.createError=function(aNodeInstance,updateDisplay,aValidationFailure)	{
	
		if(updateDisplay===true){
					cUiUtil.setColour(aNodeInstance,
										cConfigurationManager.get("colourError"))
				}						
				var errorMsg=cResourceManager.get(this.errorResourceAlias);						
				var newValidationFailure = cValidationFailure.createInstance(
										"EmailValidation",errorMsg);
				if (aValidationFailure != null)
				{
					aValidationFailure.addNestedValidationFailure(newValidationFailure);
				}
				else
				{
					aValidationFailure = newValidationFailure;
				}				
	}
	
			
    /**
     * Describes this object. This is implemented in all objects since their
     * toString() cannot be overridden!
     * @return the description of this object.
     */
    this.asString = function()
	{
		var buffer = this.className + "[";
		
	    if (this.formNode != null)
	    {
	    	buffer += "formNode.somExpression= " + this.formNode.somExpression;
	    }
	    else
	    {
	    	buffer += "formNode= null";
	    }
		buffer += "]";
		return buffer;
	}
}

               
               
               

               
               
               

               
               
               

               
               
               
</script>
                     <script contentType="application/x-javascript" name="SubNumLengthDelegate">


//imports
var cLog = 							script.core.util.Log;
var cDelegate=						script.HCeForm.model.delegate.FieldLengthDelegate;

/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=   cDelegate.createInstance();
	oDelegate.setErrorText("error_sub_length");	
	oDelegate.setFieldLength(6);
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="ServicePostalCodeDelegate">

//imports
var cLog = 							script.core.util.Log;
var cPostalCodeFormatDelegate=		script.HCeForm.model.delegate.PostalCodeFormatDelegate;
/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=  cPostalCodeFormatDelegate.createInstance();
	oDelegate.setErrorText("error_serviceZipFormat");
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="ManufactPostalCodeDelegate">


//imports
var cLog = 							script.core.util.Log;
var cPostalCodeFormatDelegate=		script.HCeForm.model.delegate.PostalCodeFormatDelegate;
/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=  cPostalCodeFormatDelegate.createInstance();
	oDelegate.setErrorText("error_manufactZipFormat");
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="PatentLengthDelegate">

//imports
var cLog = 							script.core.util.Log;
var cDelegate=						script.HCeForm.model.delegate.FieldLengthDelegate;

/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=   cDelegate.createInstance();
	oDelegate.setErrorText("error_patent_length");	
	oDelegate.setFieldLength(7);
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="ManufactEmailFormatDelegate">


//imports
var cLog = 							script.core.util.Log;
var cEmailFormatDelegate=		script.HCeForm.model.delegate.EmailFormatDelegate;
/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=  cEmailFormatDelegate.createInstance();
	oDelegate.setErrorText("error_manufactZipFormat");
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="FilingDateFormateDelegate">
//imports
var cLog = 							script.core.util.Log;
var cDateFormatDelegate=		script.HCeForm.model.delegate.DateFormatDelegate;
/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=  cDateFormatDelegate.createInstance();
	oDelegate.setErrorText("error_FilingDateFormat");
		oDelegate.setValidateFuture(false);
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="GrantedDateFormatDelegate">
//imports
var cLog = 							script.core.util.Log;
var cDateFormatDelegate=		script.HCeForm.model.delegate.DateFormatDelegate;
/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=  cDateFormatDelegate.createInstance();
	oDelegate.setErrorText("error_GrantedDateFormat");
	oDelegate.setValidateFuture(false);
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="ExpiryDateFormatDelegate">
//imports
var cLog = 							script.core.util.Log;
var cDateFormatDelegate=		script.HCeForm.model.delegate.DateFormatDelegate;
/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=  cDateFormatDelegate.createInstance();
	oDelegate.setErrorText("error_ExpiryDateFormat");
	oDelegate.setValidateFuture(false);
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="CodeSelectedDelegate">

var cLog = 							script.core.util.Log;
var cMandatoryCheckBoxDelegate=		script.HCeForm.model.delegate.MandatoryCheckBoxDelegate;

/*******************************************************************************
 * Gets a new FaxNumberFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the new MandatoryCheckBoxDelegate instance
 */
function createInstance()
{
	var oDelegate=  cMandatoryCheckBoxDelegate.createInstance();
	oDelegate.setErrorText("error_CodeChoice");
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="DINLengthDelegate">


//imports
var cLog = 							script.core.util.Log;
var cDelegate=						script.HCeForm.model.delegate.FieldLengthDelegate;

/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=   cDelegate.createInstance();
	oDelegate.setErrorText("error_din_length");	
	oDelegate.setFieldLength(8);
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="FormTypeSelectedDelegate">var cLog = 							script.core.util.Log;
var cMandatoryCheckBoxDelegate=		script.HCeForm.model.delegate.MandatoryCheckBoxDelegate;

/*******************************************************************************
 * Gets a new FaxNumberFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the new MandatoryCheckBoxDelegate instance
 */
function createInstance()
{
	var oDelegate=  cMandatoryCheckBoxDelegate.createInstance();
	oDelegate.setErrorText("error_formChoice");
	return oDelegate;
}
</script>
                     <script contentType="application/x-javascript" name="ManContactTelephoneDelegate">
//imports
var cLog = 							script.core.util.Log;
var cPhoneFormatDelegate=		script.HCeForm.model.delegate.TelephoneContactFormatDelegate;
var cAddressHandler=			script.HCeForm.control.CommonAddressHandler;



/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=   cPhoneFormatDelegate.createInstance();
	oDelegate.setErrorText("error_manContactPhone");
	oDelegate.setAsPhoneNumber();
	return oDelegate;
}


</script>
                     <script contentType="application/x-javascript" name="TelephoneContactFormatDelegate">

//
/*******************************************************************************
 * An object that responds to information requests sent to a telephone/fax
 * FormNode.
 *
 * Implements FormNodeDelegateInterface.
 */

//imports
//imports
var cLog = script.core.util.Log;
var cResourceManager = 		script.core.lang.ResourceManager;
var cConfigurationManager = script.core.util.ConfigurationManager;
var cUiUtil = 						script.core.util.UiUtil;
var cValidationFailure = 			script.core.validation.ValidationFailure;
var cFormNodeManager = 				script.core.model.FormNodeManager;


var _TELEPHONE_FORMAT_TYPE = "telephone";
var CANADA=	cConfigurationManager.get("CANADA");
var  USA=	cConfigurationManager.get("USA");
var PHONE=	1;
var FAX=	2;

/*******************************************************************************
 * Gets a new PostalZipDelegate. Adobe does not allow object instances to be
 * created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the new PostalZipDelegate instance
 */
function createInstance()
{
	return new TelephoneContactFormatDelegateClass();
}

/**
 * Class implementation
 */
function TelephoneContactFormatDelegateClass(somExpression)
{
	this.className = "TelephoneContactFormatDelegate";
	this.errorResourceAlias="";
	this.northAmerica_errorAlias="error_usPhoneNumError";
	this.other_errorAlias="error_otherPhoneNumError";
	this.numberType=PHONE;
	this.serviceCountryDdlNodeAlias="ddlServiceCountry";
	this.manCountryDdlNodeAlias="ddlManCountry";
	
	this.formNode;

	/**
	 * Gets this node's default value, which is an internationalized value.
	 * This returns null since this uses a picklist.
	 * @param aNode the Adobe Node instance who's default value is required.
	 * @return a String that contains the internationalized default value for
	 *		   the passed Node. Null if this is not applicable.
	 */
    this.getDefaultValue = function(aNode)
    {
    	return null;
	}
	
	/**
	 * Sets alias 
	 *
	 * @param aliasName -the alias of the country set in the nodeDefinitions
	 */
	this.setServiceCountryNodeAlias = function(aliasName)
    {    	
    		this.serviceCountryDdlNodeAlias=aliasName;
    }
    
    this.setServiceCountryNodeAlias = function(aliasName)
    {    	
    		this.manCountryDdlNodeAlias=aliasName;
    }
    
    	/**
	 * Sets the delegate to treat any error messages a phone messages
	 *
	 * 
	 */
	this.setAsPhoneNumber = function()
    {    	
    		this.numberType=PHONE;
    		this.northAmerica_errorAlias="error_usPhoneNumError";
		this.other_errorAlias="error_otherPhoneNumError";
    }
    /**
	 * Sets the delegate to treat any error messages a fax messages
	 *
	 * 
	 */
	this.setAsFaxNumber = function()
    {    	
    		this.numberType=FAX;
    		this.northAmerica_errorAlias="error_usFaxNumError";
		this.other_errorAlias="error_otherFaxNumError";	
    }
    

	/* Sets custom error text 
	 *
	 * @param aFormNode the FormNode that is using this delegate.
	 */
	this.setErrorText = function(aliasName)
    {    	
    		this.errorResourceAlias=aliasName;
    }
	
		
	/**
	 * Gets the type of format validation to be applied to data entered into
	 * this node in the UI.
	 * @param aNode the Adobe Node instance who's value must conform to a 
	 *		  specific format.
	 * @return a String that contains the type of format validation to be
	 *		   applied to data entered into this node in the UI. These must be
	 *		   types that are supported by the currently installed 
	 *		   FormatValidator. Null if this is not applicable.
	 */
    this.getFormatType = function(aNode)
    {
    	return null;
	}

	/**
	 * Gets this node's label to be displayed in the UI, which is an
	 * internationalized value.
	 * @param aNode the Adobe Node instance who's label is required.
	 * @return a String that contains the internationalized UI label for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getLabel = function(aNode)
    {
    	return null;
   	}

	/**
	 * Gets whether this node is mandatory (required).
	 * @param aNode the Adobe Node instance who's mandatory setting is required.
	 * 	 
	 */
	this.isMandatory = function(aNode)
	{
			return null;
	}
		
	/**
	 * Gets a string that defines the pick list to be displayed in the UI for
	 * this node.
	 * @param aNode the Adobe Node instance who's pick list is required.
	 * @return a String that contains the definition of the pick list to be
	 *		   displayed in the UI for this node. The format is:
	 *		   "displayValue1, code1, displayValue2, code2...". Null if
	 *		   this is not applicable.
	 */
    this.getPickListValues = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets this node's tool tip to be displayed in the UI, which is an
	 * internationalized value. In this case it is null, since these are
	 * dependant on the subform that the field is in (must be handled by the
	 * FormNode itself).
	 * @param aNode the Adobe Node instance who's tool tip is required.
	 * @return a String that contains the internationalized UI tool tip for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getToolTip = function(aNode)
    {
    	return null;
	}

	/**
	 * Sets the FormNode that is using this delegate. It is mandatory that this
	 * is set to allow the delegate to access items in the FormNode as required.
	 * @param aFormNode the FormNode that is using this delegate.
	 */
    this.setFormNode = function(aFormNode)
    {
    	this.formNode = aFormNode;
	}

	/**
	 * Gets whether this delegate is used to validate node instances (e.g.
	 * mandatory fields, etc.) as well as their child nodes.
	 * @return a boolean -true if this should be called to perform validation.
	 */
	this.isUsedToValidateNodes = function()
	{
		return true;
	}
	
	/**
	 * Dummy function stub so the interface requirements are met.
	 */
	this.validateNode = function(aNodeInstance, updateDisplay,
								 aValidationFailure)
	{
		// It must be called to avoid being
		// overwirtten.
		this.formNode._validateNode(aNodeInstance, updateDisplay,
									aValidationFailure);
		
		var countryCode=this._getCountryCode(aNodeInstance);
		var errorAlias=""; //dynamic
		if(aNodeInstance.isNull){
			return aValidationFailure;
		}//if
	
		var testPassed=true;
		var phone = aNodeInstance.rawValue;
		if (countryCode == CANADA || countryCode == USA) {
				var reg = /^(?:\+?1[-. ]?)?\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/; //(phone leading with 1
				if (reg.test(phone) == false) {
						testPassed= false;
						errorAlias=this.northAmerica_errorAlias;
				} 
				else {
						testPassed= true;
						var formattedPhoneNumber = phone.replace(reg, "$1-$2-$3");
						var temp = phone.replace(/[^\d]/g, "");
						if (temp.length == 11) {
							formattedPhoneNumber = phone.replace(reg, "1-$1-$2-$3");
						}//if	
				}//else	
		}//if 
		else {
				var reg = /^[0-9() .-]+$/;
				var temp = phone.replace(/[^\d]/g, "");
				if (temp.length &lt; 9 || temp.length &gt; 18) {
						testPassed= false;
						errorAlias=this.other_errorAlias;
				}//if
				else{
					testPassed= true;
				}//else
		}//else		
		if(testPassed===true){
				cUiUtil.resetColour(aNodeInstance); //In case it previously failed
		}//if
		else{
				this.createFailure(updateDisplay,aValidationFailure,aNodeInstance,errorAlias);
		}//else
	return aValidationFailure;
	}
			
    /**
     * Describes this object. This is implemented in all objects since their
     * toString() cannot be overridden!
     * @return the description of this object.
     */
    this.asString = function()
	{
		var buffer = this.className + "[";
		
	    if (this.formNode != null)
	    {
	    	buffer += "formNode.somExpression= " + this.formNode.somExpression;
	    }
	    else
	    {
	    	buffer += "formNode= null";
	    }
		buffer += "]";
		return buffer;
	}
	//assumes that a) country field is called ddlCountry  and 
	//b) has the same parent as phone number
	this._getCountryCode=function(aNodeInstance){
		var countryValue="";
		
		var SERVICE_DDL_FN=cFormNodeManager.getFormNodeForKey(this.serviceCountryDdlNodeAlias);
		var MAN_DDL_FN=cFormNodeManager.getFormNodeForKey(this.manCountryDdlNodeAlias);
		var manInstance=MAN_DDL_FN.getNodeInstance();
		var countryValue="";
		if(!manInstance){
			countryValue=SERVICE_DDL_FN.getNodeInstance().rawValue;	
		}else{
			countryValue= manInstance.rawValue;
		}
		
		
		return(countryValue);
	}
	
	
	this.createFailure=function(updateDisplay,aValidationFailure,aNodeInstance,baseErrorAlias){
	
		var resourceError=this.errorResourceAlias;
		if(updateDisplay===true){
					cUiUtil.setColour(aNodeInstance,cConfigurationManager.get("colourError"));
		}						
		var errorMsg=cResourceManager.get(resourceError)+cResourceManager.get(baseErrorAlias);			
		var newValidationFailure = cValidationFailure.createInstance("PhoneFormatValidation",errorMsg);
		if (aValidationFailure != null)
		{
			aValidationFailure.addNestedValidationFailure(newValidationFailure);
		}
		else{
			aValidationFailure = newValidationFailure;
		}					
	}//endfn
	
}
</script>
                     <script contentType="application/x-javascript" name="ManContactFaxDelegate">


//imports
var cLog = 							script.core.util.Log;
var cPhoneFormatDelegate=		script.HCeForm.model.delegate.TelephoneContactFormatDelegate;
var cAddressHandler=			script.HCeForm.control.CommonAddressHandler;



/*******************************************************************************
 * Gets a new PostalCodeFormatDelegate. Adobe does not allow object instances
 * to be created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the newPostalCodeFormatDelegate instance
 */
function createInstance()
{
	var oDelegate=   cPhoneFormatDelegate.createInstance();
	oDelegate.setErrorText("error_manContactPhone");
	oDelegate.setAsFaxNumber();
	return oDelegate;
}

</script>
                     <?templateDesigner expand 0?></variables>
                  <?templateDesigner expand 0?></subform>
               <bind match="none"/>
               <?templateDesigner expand 1?></subform>
            <subform h="50mm" name="nodeDefinitions" w="100mm">
               <variables>
                  <script contentType="application/x-javascript" name="MasterPage1">
var content={

	masterPage: {
		somExpression: "#pageSet",
		parentNodeKey: "root"},

	//Master Page / Form Page
	mp1FormPage: {
		somExpression: "Page1",
		parentNodeKey: "masterPage"},
		
	mp1Version:{
		somExpression:	"txtFormVersion",
		parentNodeKey:	"mp1FormPage",
		labelKey:		"lbVersion"},		
		
	mp1SFEnLogo: {
		somExpression:	"sfLogo_en",
		parentNodeKey:	"mp1FormPage"},
					
	mp1HcLogo: {
		somExpression:	"imgHCLogo",
		parentNodeKey:	"mp1SFEnLogo",
		toolTipKey:		"lbHealthCanada"},
	
	mp1SFFrLogo: {
		somExpression:	"sfLogo_fr",
		parentNodeKey:	"mp1FormPage"},
	
	mp1HcLogoFr: {
		somExpression:	"imgHCLogo_fr",
		parentNodeKey:	"mp1SFFrLogo",
		toolTipKey:		"lbHealthCanada"},	

	
	mp1Title:  {
		somExpression:	"lblMasterTitle",
		parentNodeKey:	"mp1FormPage",
		labelKey:		"lbApplTitle"},	
				
			
}


</script>
                  <script contentType="application/x-javascript" name="General">	
var content={
		root:{
			somExpression: "xfa.form.PATENT_LIST",
		},	
		sfPage1: {
			somExpression: "sfPage1",
			parentNodeKey: "root"},	
		
		sfMainHeader: {
			somExpression: "sfMainHeader",
			parentNodeKey: "sfPage1"},
			
		languageChoice: {
			somExpression: "pageLanguage",
			parentNodeKey: "sfMainHeader"},
			
		chkEnglish: {
			somExpression: "chkEnglish",
			parentNodeKey: "languageChoice"},
			
		chkFrancais: {
			somExpression: "chkFrancais",
			parentNodeKey: "languageChoice"},		
		
		lblFormTitle: {
			somExpression: "lblFormTitle",
			parentNodeKey: "sfMainHeader",
			labelKey:		"lbApplTitle"},
		
			
			
}
</script>
                  <script contentType="application/x-javascript" name="Instructions">
var content={


	
	sfInstructions: {
			somExpression: "sfInstructions",
			parentNodeKey: "sfPage1"},
		
	btnHideInstructions: {
			somExpression: "btnHideInstructions",
			parentNodeKey: "sfInstructions",
			labelKey:		"lbHideInstruct"},
		
	btnViewInstructions: {
			somExpression:	"btnViewInstructions",
			parentNodeKey:	"sfInstructions",
			labelKey:		"lbShowInstruct"},
			
	lblGuidance: {
			somExpression:	"lblGuidance",
			parentNodeKey:	"sfInstructions",
			labelKey:		"lbGuidance"},		
	
	sfPreInstruct: {
		somExpression: "sfPreInstruct",
		parentNodeKey: "sfPage1"},
		
	sfPreInstruct1: {
		somExpression: "sfPreInstruct1",
		parentNodeKey: "sfPreInstruct"},
	
	lblMandatory: {
		somExpression: "lblMandatory",
		parentNodeKey: "sfPreInstruct1",
		labelKey:		"lbMandatory"},
	
	sfPreInstruct2: {
		somExpression: "sfPreInstruct2",
		parentNodeKey: "sfPreInstruct"},
	
	lblValidation: {
		somExpression: "lblValidation",
		parentNodeKey: "sfPreInstruct2",
		labelKey:		"lbValidError"},
			
	
	sfInstructionsContent: {
		somExpression: "sfInstructionsContent",
		parentNodeKey: "sfPage1"},

	lblInstructionsHead: {
		somExpression: "lblInstructionsHead",
		parentNodeKey: "sfInstructionsContent",
		labelKey:		"lbInstructionsHeading"
		},
	
	
	sfInstructList: {
		somExpression: "sfInstructList",
		parentNodeKey: "sfInstructionsContent"},
	
	sfInstruct1: {
		somExpression: "sfInstruct1",
		parentNodeKey: "sfInstructList"},
	
	lblInstruct1: {
		somExpression: "lblInstruct1",
		parentNodeKey: "sfInstruct1",
		labelKey:		"lbInstruct1"},
	
	sfInstruct2: {
		somExpression: "sfInstruct2",
		parentNodeKey: "sfInstructList"},
	
	lblInstruct2: {
		somExpression: "lblInstruct2",
		parentNodeKey: "sfInstruct2",
		labelKey:		"lbInstruct2"},
	
	sfInstruct3: {
		somExpression: "sfInstruct3",
		parentNodeKey: "sfInstructList"},
	
	lblInstruct3: {
		somExpression: "lblInstruct3",
		parentNodeKey: "sfInstruct3",
		labelKey:		"lbInstruct3"},
		
	sfInstructHumanHeading: {
		somExpression: "sfInstructHumanHeading",
		parentNodeKey: "sfInstructList"},	
	
	lblHumanHeading: {
		somExpression: "lblHumanHeading",
		parentNodeKey: "sfInstructHumanHeading",
		labelKey:		"lbHumanAddressHeading"},
	
	sfInstruct4: {
		somExpression: "sfInstruct4",
		parentNodeKey: "sfInstructList"},
	
	lblInstruct4: {
		somExpression: "lblInstruct4",
		parentNodeKey: "sfInstruct4",
		labelKey:		"lbInstruct4"},
	
	sfInstruct5: {
		somExpression: "sfInstruct5",
		parentNodeKey: "sfInstructList"},
	
	lblInstruct5: {
		somExpression: "lblInstruct5",
		parentNodeKey: "sfInstruct5",
		labelKey:		"lbInstruct5"},
	
	sfInstructVetHeading: {
		somExpression: "sfInstructVetHeading",
		parentNodeKey: "sfInstructList"},

	lblVetHeading: {
		somExpression: "lblVetHeading",
		parentNodeKey: "sfInstructVetHeading",
		labelKey:		"lbVetAddressHeading"},

	sfInstruct6: {
		somExpression: "sfInstruct6",
		parentNodeKey: "sfInstructList"},
	
	lblInstruct6: {
		somExpression: "lblInstruct6",
		parentNodeKey: "sfInstruct6",
		labelKey:		"lbInstruct6"},
	
	sfInstruct7: {
		somExpression: "sfInstruct7",
		parentNodeKey: "sfInstructList"},
	
	lblInstruct7: {
		somExpression: "lblInstruct7",
		parentNodeKey: "sfInstruct7",
		labelKey:		"lbInstruct7"},

}

</script>
                  <script contentType="application/x-javascript" name="part1_3">

var content={
		
		sfPart1: {
			somExpression: "sfPart1",
			parentNodeKey: "sfPage1"},
		
		sfPart1Heading: {
			somExpression: "sfPart1Heading",
			parentNodeKey: "sfPart1"},
		
		lblPart1Heading: {
			somExpression: "lblPart1Heading",
			parentNodeKey: "sfPart1Heading",
			labelKey:		"lbPart1Heading"},
			
			
		lblPatentOption: {
			somExpression:	"lblPatentOption",
			parentNodeKey:	"sfPart1",
			labelKey:		"lbPatentOption",
			},
			
		ddlFormType: {
			somExpression:	"ddlFormType",
			parentNodeKey:	"sfPart1",
			pickListKey:	"filingOptionList",
			labelKey:		"lbSubType"},
			
		sfSubNumber: {
			somExpression: "sfSubNumber",
			parentNodeKey: "sfPart1"},

		txtSubNumber: {
			somExpression: "txtSubNumber",
			parentNodeKey: "sfSubNumber",
			labelKey:		"lbSubNum",
			delegate:		"script.HCeForm.model.delegate.SubNumLengthDelegate"
			},
	
		
		ddlRelatedSub: {
			somExpression: "ddlRelatedSub",
			parentNodeKey: "sfPart1",
			pickListKey:	"relatedSubList",
			labelKey:		"lbRelatedSub",
			},
		sfFormulationType: {
			somExpression: "sfFormulationType",
			parentNodeKey: "sfPart1",
			delegate:		"script.HCeForm.model.delegate.FormTypeSelectedDelegate"},
		
		lblFormulationType: {
			somExpression: "lblFormulationType",
			parentNodeKey: "sfFormulationType",
			labelKey:		"lbSubPurpose"},
		
		chkFormChange: {
			somExpression: "chkFormChange",
			parentNodeKey: "sfFormulationType",
			labelKey:		"lbCheckForm",
			toolTipKey:		"ttChangeForm"},
		
		chkDosageChange: {
			somExpression: "chkDosageChange",
			parentNodeKey: "sfFormulationType",
			labelKey:		"lbCheckDosage",
			toolTipKey:		"ttChangeDose"},
		
		chkUseChange: {
			somExpression: "chkUseChange",
			parentNodeKey: "sfFormulationType",
			labelKey:		"lbCheckUse",
			toolTipKey:		"ttChangeUse"},
		
		sfPart2: {
			somExpression: "sfPart2",
			parentNodeKey: "sfPage1"},
		
		sfPart2Heading: {
			somExpression: "sfPart2Heading",
			parentNodeKey: "sfPart2"
			},
		
		lblPart2Heading: {
			somExpression: "lblPart2Heading",
			parentNodeKey: "sfPart2Heading",
			labelKey:		"lbPart2Heading"},
		
		btnAddIngredient: {
			somExpression: "btnAddIngredient",
			parentNodeKey: "sfPart2Heading",
			labelKey:		"lbAddIngred"},
		
		sfIngredientList: {
			somExpression: "sfIngredientList",
			parentNodeKey: "sfPart2"},
		sfIngredient: {
			somExpression: "sfIngredient",
			parentNodeKey: "sfIngredientList"},
		
		txtIngredient: {
			somExpression: "txtIngredient",
			parentNodeKey: "sfIngredient",
			labelKey:		"lbMedIngred",
			},
		
		sfDeleteIngred: {
			somExpression: "sfDeleteIngred",
			parentNodeKey: "sfIngredient"
		},
		
		btnDeleteIng: {
			somExpression: "btnDeleteIng",
			parentNodeKey: "sfDeleteIngred",
			labelKey:		"lbDeleteIngred"},
		
		sfDrugDetails: {
			somExpression: "sfDrugDetails",
			parentNodeKey: "sfPart2"},
		
		txtBrandName: {
			somExpression: "txtBrandName",
			parentNodeKey: "sfDrugDetails",
			labelKey:		"lbBrandName"},
		
		ddlDrugUse: {
			somExpression: "ddlDrugUse",
			parentNodeKey: "sfDrugDetails",
			labelKey:		"lbDrugUse",
			pickListKey:	"listHumanVet"},
		
		txtStrengthUnit: {
			somExpression: "txtStrengthUnit",
			parentNodeKey: "sfDrugDetails",
			labelKey:		"lbStrength"},
		
		ddlDosageForm: {
			somExpression: "ddlDosageForm",
			parentNodeKey: "sfDrugDetails",
			labelKey:		"lbDosage",
			pickListKey:	"listDosage"},
			
		txtDosageDetails: {
			somExpression: "txtDosageDetails",
			parentNodeKey: "sfDrugDetails",
			labelKey:		"lbDosageDetails",	
			},
		
		ddlRoute: {
			somExpression: "ddlRoute",
			parentNodeKey: "sfDrugDetails",
			labelKey:		"lbRoutes",
			pickListKey:	"listRoutes"},
			
		txtRouteDetails: {
			somExpression: "txtRouteDetails",
			parentNodeKey: "sfDrugDetails",
			labelKey:		"lbRouteDetails"},	
		
		txtDIN: {
			somExpression: "txtDIN",
			parentNodeKey: "sfDrugDetails",
			delegate:		"script.HCeForm.model.delegate.DINLengthDelegate",
			labelKey:		"lbDIN"},
		
		txtMedUse: {
			somExpression: "txtMedUse",
			parentNodeKey: "sfDrugDetails",
			labelKey:		"lbUses"},
		
		sfPart3: {
			somExpression: "sfPart3",
			parentNodeKey: "sfPage1"},
		
		sfPart3Heading: {
			somExpression: "sfPart3Heading",
			parentNodeKey: "sfPart3"},
		
		lblPart3Heading: {
			somExpression: "lblPart3Heading",
			parentNodeKey: "sfPart3Heading",
			labelKey:		"lbPart3Heading"},
		
		numPatentNum: {
			somExpression: "numPatentNum",
			parentNodeKey: "sfPart3",
			delegate:		"script.HCeForm.model.delegate.PatentLengthDelegate",
			labelKey:		"lbPatentNo"},
		
		dteFiling: {
			somExpression: "dteFiling",
			parentNodeKey: "sfPart3",
			labelKey:		"lbFiling",
			delegate:		"script.HCeForm.model.delegate.FilingDateFormateDelegate"},
		
		dteGranted: {
			somExpression: "dteGranted",
			parentNodeKey: "sfPart3",
			labelKey:		"lbGranted",
			delegate:		"script.HCeForm.model.delegate.GrantedDateFormatDelegate",
			},
		
		dteExpiry: {
			somExpression: "dteExpiry",
			parentNodeKey: "sfPart3",
			labelKey:		"lbExpiration",
			delegate:		"script.HCeForm.model.delegate.ExpiryDateFormatDelegate",		
			},
		
		sfPatentCode: {
			somExpression: "sfPatentCode",
			parentNodeKey: "sfPart3",
			delegate:		"script.HCeForm.model.delegate.CodeSelectedDelegate"
			},
		
		lblCodeType: {
			somExpression: "lblCodeType",
			parentNodeKey: "sfPatentCode",
			labelKey:		"lbSelectCode"},
		
		chkCodeA: {
			somExpression: "chkCodeA",
			parentNodeKey: "sfPatentCode",
			labelKey:		"lbCodeA",
			toolTipKey:		"ttCodeA"
			},
		
		chkCodeB: {
			somExpression: "chkCodeB",
			parentNodeKey: "sfPatentCode",
			labelKey:		"lbCodeB",
			toolTipKey:		"ttCodeB"},
		
		chkCodeC: {
			somExpression: "chkCodeC",
			parentNodeKey: "sfPatentCode",
			labelKey:		"lbCodeC",
			toolTipKey:		"ttCodeC",
			},


}
</script>
                  <script contentType="application/x-javascript" name="part4">

var content={

		sfPart4: {
			somExpression:	"sfPart4",
			parentNodeKey:	"sfPage1",
			delegate:		"script.HCeForm.model.delegate.DateOrderValidDelegate"
		},

		sfPart4Heading: {
			somExpression: "sfPart4Heading",
			parentNodeKey: "sfPart4"},
		
		lblPart4Heading: {
			somExpression: "lblPart4Heading",
			parentNodeKey: "sfPart4Heading",
			labelKey:		"lbPart4Heading"},
		
		sfServiceAddressDetails: {
			somExpression: "sfAddressDetails",
			parentNodeKey: "sfPart4"},
		
		txtServiceCompanyName: {
			somExpression: "txtCompanyName",
			parentNodeKey: "sfServiceAddressDetails",
			labelKey:		"lbCompanyName"},
		
		txtServiceAddress: {
			somExpression: "txtAddress",
			parentNodeKey: "sfServiceAddressDetails",
			labelKey:		"lbAddress"},
		
		txtServiceCity: {
			somExpression: "txtCity",
			parentNodeKey: "sfServiceAddressDetails",
			labelKey:		"lbCity"},
		
		ddlServiceCountry: {
			somExpression: "ddlCountry",
			parentNodeKey: "sfServiceAddressDetails",
			pickListKey:	"countryList",
			labelKey:		"lbCountry"},
		
		ddlServiceProvince: {
			somExpression: "ddlProvince",
			parentNodeKey: "sfServiceAddressDetails",
			delegate:	 	"script.core.model.delegate.ProvinceStateDelegate",
		},
		
		txtServiceProvince: {
			somExpression: "txtProvince",
			parentNodeKey: "sfServiceAddressDetails",
			labelKey: 		"lbProvince"},
		
		txtServicePostalCode: {
			somExpression: "txtPostalCode",
			parentNodeKey: "sfServiceAddressDetails",
			delegate:		"script.HCeForm.model.delegate.ServicePostalCodeDelegate",
			
			},
		

}
</script>
                  <script contentType="application/x-javascript" name="part5">

var content={
		
		sfPart5: {
			somExpression: "sfPart5",
			parentNodeKey: "sfPage1"},

		sfPart5Heading: {
			somExpression: "sfPart5Heading",
			parentNodeKey: "sfPart5"},
		
		lblPart5Heading: {
			somExpression: "lblPart5Heading",
			parentNodeKey: "sfPart5Heading",
			labelKey:		"lbPart5Heading"},
		
		chkSameAs: {
			somExpression: "chkSameAs",
			parentNodeKey: "sfPart5Heading",
			labelKey:		"lbSameService"},
		
		sfManAddressDetails: {
			somExpression: "sfAddressDetails",
			parentNodeKey: "sfPart5"},
		
		txtManCompanyName: {
			somExpression: "txtCompanyName",
			parentNodeKey: "sfManAddressDetails",
			labelKey:		"lbCompanyName"},
		
		txtManAddress: {
			somExpression: "txtAddress",
			parentNodeKey: "sfManAddressDetails",
			labelKey:		"lbAddress"},
		
		txtManCity: {
			somExpression: "txtCity",
			parentNodeKey: "sfManAddressDetails",
			labelKey:		"lbCity"},
		
		ddlManCountry: {
			somExpression: "ddlCountry",
			parentNodeKey: "sfManAddressDetails",
			pickListKey:	"countryList",
			labelKey:		"lbCountry",
			},
		
		ddlManProvince: {
			somExpression: "ddlProvince",
			parentNodeKey: "sfManAddressDetails",
			delegate:	 	"script.core.model.delegate.ProvinceStateDelegate"},
		
		txtManProvince: {
			somExpression: "txtProvince",
			parentNodeKey: "sfManAddressDetails",
			labelKey: 		"lbProvince"
			},
		
		txtManPostalCode: {
			somExpression: "txtPostalCode",
			parentNodeKey: "sfManAddressDetails",
			delegate:		"script.HCeForm.model.delegate.ManufactPostalCodeDelegate"},
		
		sfPart5ContactHeading: {
			somExpression: "sfPart5ContactHeading",
			parentNodeKey: "sfPart5"},

		lblPart5ContactHeading: {
			somExpression: "lblPart5ContactHeading",
			parentNodeKey: "sfPart5ContactHeading",
			labelKey:		"lbManufactContactHeading"},

		sfManContactDetails: {
			somExpression: "sfContactDetails",
			parentNodeKey: "sfPart5"},
		
		ddlManSalutation: {
			somExpression: "ddlSalutation",
			parentNodeKey: "sfManContactDetails",
			labelKey:		"lbSalutation",
			pickListKey:	"salutationList"},
		
		txtManGivenName: {
			somExpression: "txtGivenName",
			parentNodeKey: "sfManContactDetails",
			labelKey:		"lbGivenName"},
		
		txtManInitials: {
			somExpression: "txtInitials",
			parentNodeKey: "sfManContactDetails",
			labelKey:		"lbInitials"},
			
		
		txtManSurname: {
			somExpression: "txtSurname",
			parentNodeKey: "sfManContactDetails",
			labelKey:		"lbSurname"},
		
		txtManTitle: {
			somExpression: "txtTitle",
			parentNodeKey: "sfManContactDetails",
			labelKey:		"lbPositionTitle"},
		
		txtManTelephone: {
			somExpression: "txtTelephone",
			parentNodeKey: "sfManContactDetails",
			labelKey:		"lbTelephone",
			delegate:		"script.HCeForm.model.delegate.ManContactTelephoneDelegate"
			},
		
		txtManExtension: {
			somExpression: "txtExtension",
			parentNodeKey: "sfManContactDetails",
			labelKey:		"lbExtension"},
		
		txtManFax: {
			somExpression: "txtFax",
			parentNodeKey: "sfManContactDetails",
			labelKey:		"lbFax",
			delegate:		"script.HCeForm.model.delegate.ManContactFaxDelegate"},
		
		txtManEmail: {
			somExpression: "txtEmail",
			parentNodeKey: "sfManContactDetails",
			labelKey:		"lbEmail",
			delegate:		"script.HCeForm.model.delegate.ManufactEmailFormatDelegate"},
		
		sfPart5ContactHeading: {
			somExpression: "sfPart5ContactHeading",
			parentNodeKey: "sfPart5"},

		lblPart5ContactHeading: {
			somExpression: "lblPart5ContactHeading",
			parentNodeKey: "sfPart5ContactHeading",
			labelKey:		"lbManufactContactHeading"},	
	
		sfCertificationDetails: {
			somExpression: "sfCertificationDetails",
			parentNodeKey: "sfPart5"},
	
		lblAttest: {
			somExpression: "lblAttest",
			parentNodeKey: "sfCertificationDetails",
			labelKey:		"lbAttest1"},
		
		ddlAttestSalutation: {
			somExpression: "ddlSalutation",
			parentNodeKey: "sfCertificationDetails",
			labelKey:		"lbSalutation",
			pickListKey:	"salutationList"},
		
		txtAttestGivenName: {
			somExpression: "txtGivenName",
			parentNodeKey: "sfCertificationDetails",
			labelKey:		"lbGivenName"},
		/* removed for consistency
		txtAttestInitials: {
			somExpression: "txtInitials",
			parentNodeKey: "sfCertificationDetails",
			labelKey:		"lbInitials"},
			*/
		
		txtAttestSurname: {
			somExpression: "txtSurname",
			parentNodeKey: "sfCertificationDetails",
			labelKey:		"lbSurname"},
		
		txtAttestTitle: {
			somExpression: "txtTitle",
			parentNodeKey: "sfCertificationDetails",
			labelKey:		"lbPositionTitle"},
					
}
</script>
                  <script contentType="application/x-javascript" name="Finalize">

var content={

	sfFinalizeButton: {
		somExpression: "sfFinalizeButton",
		parentNodeKey: "sfPage1"}, //TODO: reparent if needed
	
	btnFinalizeAndLock: {
		somExpression: "btnFinalizeAndLock",
		parentNodeKey: "sfFinalizeButton",
		labelKey: 		"lbFinalize"},
	
	btnModify: {
		somExpression: "btnModify",
		parentNodeKey: "sfFinalizeButton",
		labelKey: 		"lbModify"},

}
</script>
                  <script contentType="application/x-javascript" name="HCOnly">

var content={


	sfHCOnly: {
		somExpression: "sfHCOnly",
		parentNodeKey: "sfPage1"},

	lblHCTitle: {
		somExpression: "lblTitle",
		parentNodeKey: "sfHCOnly",
		labelKey:		"lbHCOnly"},
	
	sfHCDetails: {
		somExpression: "sfHCDetails",
		parentNodeKey: "sfHCOnly"},
	
	numHCSubNo: {
		somExpression: "numSubNo",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbSubNum"},
	
	dteHCDateFiled: {
		somExpression: "dteDateFiled",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbFilingDate"
		},
	
	dteHCNOC: {
		somExpression: "dteNOC",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbNOCDate"
		},
	
	dteHCAdded: {
		somExpression: "dteAdded",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbAddDate"
		},
	
	dteHCAmended: {
		somExpression: "dteAmended",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbAmendDate"
		},
	
	dteHCReceived: {
		somExpression: "dteReceived",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbFormIVDate"
		},
	
	numHCDrugID: {
		somExpression: "numDrugID",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbDrugID"
		},
	
	numHCSubFormId: {
		somExpression: "numSubFormId",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbSubformID"
		},
	
	numHCFormId: {
		somExpression: "numFormId",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbFormID"},
	
	txtHCNotes: {
		somExpression: "txtNotes",
		parentNodeKey: "sfHCDetails",
		labelKey:		"lbNotes"
		},


}
</script>
                  <script contentType="application/x-javascript" name="signatureNodes">

var content={

		sfSignatureBlock: {
			somExpression: "sfSignatureBlock",
			parentNodeKey: "sfPage1"}, //change to your parent node
		
		signatureOption: {
			somExpression: "signatureOption",
			parentNodeKey: "sfSignatureBlock"},
		
		chkDigitalID: {
			somExpression: "chkDigitalID",
			parentNodeKey: "sfSignatureBlock",
			labelKey: 		"lbDigitalID"},
		
		chkDigitalImage: {
			somExpression: "chkDigitalImage",
			parentNodeKey: "sfSignatureBlock",
			labelKey: 		"lbDigitalImage"},
		
		digSignature: {
			somExpression: "digSignature",
			parentNodeKey: "sfSignatureBlock",
			labelKey: "lbSignature"},
		
		imgSignature: {
			somExpression: "imgSignature",
			parentNodeKey: "sfSignatureBlock",
			labelKey: "lbSignature"},
		
		ddtSignedOnAttestation: {
			somExpression: "ddtSignedOnAttestation",
			parentNodeKey: "sfSignatureBlock",
			labelKey: "lbSigDate"},


}
</script>
                  <?templateDesigner expand 1?></variables>
               <bind match="none"/>
               <?templateDesigner expand 1?></subform>
            <subform h="50mm" name="resources" w="100mm">
               <variables>
                  <script contentType="application/x-javascript" name="general_en">//nov2015
var content={
	
	lbHideInstruct:		"Hide Instructions",
	lbShowInstruct:		"Show Instructions",
	lbOfLCText:			"of",
	lbMandatory:		"Asterisk symbol (*) denotes a mandatory field.",
	lbValidError:		"Plus symbol (+) denotes a validation error or missing data.",
	lbVersion:			"Revision No.:",
	lbHealthCanada:		"Health Canada",
 	lbDate:				"Date formatted as YYYY-MM-DD",
 	lbDigitalID:		"Digital ID",
	lbDigitalImage:		"Image Signature",
	lbSignature:		"Signature",
	lbFinalize:			"Finalize",
	lbModify:			"Modify",
	validation_title:	"Validation Results",
	validation_pass:	"This form successfully validated and locked from editing. Please sign the form before submitting to Health Canada.",  //override oore
	message_saveAs: 	"This form has encountered a problem.", //override oore
	lbSigDate:			"Signature Date",

	
}
</script>
                  <script contentType="application/x-javascript" name="general_fr">//nov2015
var content={

		
	lbHideInstruct:		"Masquer les instructions",
	lbShowInstruct:		"Afficher les instructions",
	lbOfLCText:			"sur",
	validation_title:	"Résultats de la validation",
	lbMandatory:		"Astérisque (*)  démontre un champ obligatoire.",
	lbValidError:		"Symbole plus (+) démontre un champ avec une erreur de validation ou des données manquantes.",
	lbVersion:			"Revision No.:",
	lbHealthCanada:		"Santé  Canada",
	lbSalutation:		"Appel",
	lbGivenName: 		"Prénom",
	lbSurname:			"Nom",
	lbPositionTitle:	"Titre du poste",
	lbSignature:		"Signature",
	lbFinalize:			"Finaliser",
	lbModify:			"Modifier",
	lbSignature:		"Signature",
	lbFinalize:			"Finaliser",
	lbModify:			"Modifier",
	lbLockSuccess:		"Le formulaire a été validé et verrouiller contre l'édition. Il peut maintenant être imprimé et envoyé à Santé Canada. Pour pouvoir modifier le formulaire, appuyez sur le bouton Modifier.",
	validation_pass:	"Le formulaire a été validé et verrouiller contre l'édition. S'il vous plaît signer le formulaire et al conservent dans vos dossiers.",
	message_saveAs: 	"Ce formulaire a eu un problème.",
	lbSigDate:			"Date de la signature",
}
</script>
                  <script contentType="application/x-javascript" name="instruct_en">

var content={

	lbInstruct1:		"This form contains mandatory fields. In order to ensure you have completed all appropriate fields, please press the \"Finalize\" button at the bottom of the form before printing and signing.",
	lbInstruct2:		"Once finalized, the fields in the form become 'locked' (i.e. fields cannot be modified). In order to modify fields after finalizing, you must press the 'Modify' button at the bottom of the form. Following modifications to the desired fields and before printing and signing, please press the 'Finalize' button again to re-validate entries.",  
	lbInstruct3:		"The Guidance Document: Patented Medicines (Notice of Compliance) Regulations provides instructions on each field of the form. Please read it in its entirety prior to completing the form. Information for a submission already filed need only be accompanied by a copy of the letter from Health Canada requesting additional information", 
	lbInstruct4:		"Clinical Trial Applications and Amendments must be sent directly to the applicable Directorate (see Guidance for Industry: Management of Drug Submissions for addresses). All other drug submission types are to be sent to:", 
	lbInstruct5:		"Office of Submissions and Intellectual Property, Therapeutic Products Directorate\nHealth Canada\nFinance Building\n101 Tunney's Pasture Driveway\nAddress Locator: 0201A1\nOttawa, Ontario, Canada K1A 0K9\nFax: (613) 941-0825", 
 	lbInstruct6:		"Clinical Trial Applications and Amendments must be sent directly to the applicable Directorate (see Guidance for Industry: Management of Drug Submissions for addresses). All other drug submission types are to be sent to:",
	lbInstruct7:		"Office of Submissions and Intellectual Property, Therapeutic Products Directorate\nHealth Canada\nFinance Building\n101 Tunney's Pasture Driveway\nAddress Locator: 0201A1\nOttawa, Ontario, Canada K1A 0K9\nFax: (613) 941-0825",
	lbGuidance:			" &lt;body xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\"&gt;&lt;p style=\"letter-spacing:0in\"&gt;&lt;a href=\"http://www.hc-sc.gc.ca/dhp-mps/prodpharma/applic-demande/guide-ld/patmedbrev/pmreg3_mbreg3-eng.php\" style=\"font-size:8pt\"&gt;Guidance Document&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;",

}
</script>
                  <script contentType="application/x-javascript" name="instruct_fr">
var content={

	lbInstruct1:		"Ce formulaire contient des champs obligatoires. Pour vous assurer que vous avez rempli les champs appropriés, cliquez sur le bouton 'Finalisation' au bas du formulaire avant de l'imprimer et de le signer",
	lbInstruct2:		"Une fois finalisé, les champs seront verrouiller (les champs ne peuvent plus être modifié). Pour pouvoir modifier les champs après la finalisation, vous devez cliquer sur le bouton 'Modification' au bas du formulaire. Après avoir modifié les champs désirés et avant d'imprimer et de signer, cliquez sur le bouton 'Finalisation' à nouveau afin de valider les entrées.",  
	
	lbInstruct3:		"La ligne directrice : Règlement sur les médicaments brevetés (avis de conformité) contient des directives relatives à chaque champ du formulaire. Veuillez le lire en entier avant de remplir le formulaire. Les renseignements relatifs à une présentation déjà déposée ne doivent être accompagnées que d'une lettre de Santé Canada demandant des renseignements supplémentaires", 
	lbInstruct4:		"es demandes et modifications d'essais cliniques doivent être envoyées directement à la Direction applicable (voir le Guide pour l'industrie: Gestion des présentations de drogues pour les adresses). Tous les autres types de présentations de médicaments doivent être envoyés à:", 
	lbInstruct5:		"Bureau des présentations et de la propriété intellectuelle (BPPI), Direction des produits thérapeutiques\nSanté Canada\nImmeuble des finances\n101, promenade du pré Tunney\nIndice de l’adresse : 0201A1\nOttawa, Ontario, Canada K1A 0K9\nTélécopieur : 613-941-0825",	
 	lbInstruct6:		"Toutes les présentations de médicaments pour usage vétérinaire (y compris les présentations de drogues nouvelles de recherche pour usage vétérinaire et modifications) doivent être envoyées à l'adresse :",	
	lbInstruct7:		"Direction des médicaments vétérinaires\nSanté Canada\nComplexe Holland Cross\n11, avenue Holland, bureau 14\nIndice de l'adresse : 3000A\nOttawa, Ontario, Canada K1A 0K9\nTélécopieur : 613-946-1125",
	lbGuidance:			"&lt;body xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\"&gt;&lt;p style=\"text-align:center;text-decoration:none;letter-spacing:0in\"&gt;&lt;a href=\"http://www.hc-sc.gc.ca/dhp-mps/prodpharma/applic-demande/guide-ld/patmedbrev/pmreg3_mbreg3-fra.php\"&gt;Ligne directrice &lt;/a&gt;&lt;/p&gt;&lt;/body&gt;",
}
</script>
                  <script contentType="application/x-javascript" name="heading_en">

var content={

		lbInstructionsHeading: 		"INSTRUCTIONS",		
		lbApplTitle : 				"FORM IV PATENT LIST\nPATENTED MEDICINES (NOTICE OF COMPLIANCE) REGULATIONS\nCOMPLETE ONE FORM PER PATENT PER SUBMISSION",	
		lbPart1Heading:				"PART 1: PATENT FILING INFORMATION",
		lbPart2Heading:				"PART 2: DRUG INFORMATION",
		lbPart3Heading:				"PART 3: PATENT INFORMATION",
		lbPart4Heading:				"PART 4: NAME &amp; ADDRESS FOR SERVICE IN CANADA",
		lbPart5Heading:				"PART 5: MANUFACTURER INFORMATION AND CERTIFICATION",
		lbManufactContactHeading:	"MANUFACTURER CONTACT",
		lbCertificationHeading:		"CERTIFICATION",
		lbHumanAddressHeading:		"WHERE TO SEND HUMAN DRUG SUBMISSION APPLICATIONS",
		lbVetAddressHeading:		"WHERE TO SEND VETERINARY DRUG SUBMISSION APPLICATIONS",
}
</script>
                  <script contentType="application/x-javascript" name="heading_fr">

var content={

	lbInstructionsHeading: 		"INSTRUCTIONS",	
	lbApplTitle : 					"FORMULAIRE IV: LISTE DES BREVETS \nRÈGLEMENT SUR LES MÉDICAMENTS BREVETÉS (AVIS DE CONFORMITÉ)\nREMPLIR UN FORMULAIRE PAR BREVET PAR DIN",	
	lbPart1Heading:				"PARTIE 1 - RENSEIGNEMENTS SUR LA DEMANDE DE BREVET",
	lbPart2Heading:				"PARTIE 2: INGRÉDIENT(S) MÉDICINAL(AUX)",
	lbPart3Heading:				"PARTIE 3: RENSEIGNEMENTS SUR LE BREVET",
	lbPart4Heading:				"PARTIE 4 :NOM ET ADRESSE AUX FINS DE SIGNIFICATION AU CANADA",
	lbPart5Heading:				"PARTIE 5: RENSEIGNEMENTS SUR LE FABRICANT ET ATTESTATION",
	lbManufactContactHeading:	"PERSONNE-RESSOURCE DU MANUFACTURIER",
	lbCertificationHeading:		"CERTIFICATION",
	lbHumanAddressHeading:		"fr_WHERE TO SEND HUMAN DRUG SUBMISSION APPLICATIONS",
	lbVetAddressHeading:		"fr_WHERE TO SEND VETERINARY DRUG SUBMISSION APPLICATIONS",

}
</script>
                  <script usehref="..\..\fragments\address\addressResource_en.xdp#som($template.form1.#subform.#variables.address_en)"/>
                  <script usehref="..\..\fragments\address\addressResource_fr.xdp#som($template.form1.#subform.#variables.address_fr)"/>
                  <script contentType="application/x-javascript" name="pickList_en">

var content={

		filingOptionList:	[
				["PAT_CUR","Patent List is being filed with submission"],
				["PAT_PREV","Newly issued patent for listing against previously filed submission"],
	
	],

	relatedSubList:	[
				["NDS","New Drug Submission (NDS)"],
				["SNDS","Supplemental New Drug Submission (SNDS)"],
				["CARRYFWD","Carry forward, in accordance with section 4.1(2)"],
	
	],
	listHumanVet:	[
				["HUMAN","Human"],
				["VET","Veterinary"],
				]
				
}
</script>
                  <script contentType="application/x-javascript" name="pickList_fr">

var content={

		filingOptionList:	[
				["PAT_CUR","La liste des brevets est déposée avec la présentation"],
				["PAT_PREV","Brevet nouvellement délivré en vue de l'établissement de la liste par rapport à la demande présentée antérieurement"],
		],	
		relatedSubList:	[
				["NDS","Présentation de drogue nouvelle (PDN)"],
				["SNDS","Supplément à une présentation de drogue nouvelle (SPDN)"],
				["CARRYFWD","Report, conformément à l'alinéa 4.1(2)"],
		],
		
					
		listHumanVet:	[
				["HUMAN","Usage humain"],
				["VET","Usage vétérinaire"],
	
		],		

}
</script>
                  <script usehref="..\..\fragments\delegates\resources\errorDelegate_en.xdp#som($template.form1.#subform.#variables.errorDelegate_en)"/>
                  <script usehref="..\..\fragments\delegates\resources\errorDelegate_fr.xdp#som($template.form1.#subform.#variables.errorDelegate_fr)"/>
                  <script contentType="application/x-javascript" name="part15_en">

var content={

		//part 1 labels
		lbPatentOption:		"Please select from the Patent List Filing Option below, and then enter the required information.",
		lbSubType:			"Patent List Filing Option",
		lbSubNum:			"Submission Number",
		lbRelatedSub:      "Related Submission",
		lbSubPurpose:      "Please select at least one of the following statements that describes the Supplemental New Drug Submission purpose:",
		lbCheckForm:        "Change in Formulation",
    	lbCheckDosage:      "Change in Dosage Form",
    	lbCheckUse:         "Change in Use",
		//part 2 labels
		lbAddIngred: 		"Add Medicinal Ingredient",
		lbBrandName:       "Brand Name",
   		lbHumanVet:       "Human/Veterinary",
    	lbStrength:		"Strength per Unit",
    	lbRoutes:			"Route of Administration",
   		lbDosage:			"Dosage Form",
    	lbUses:				"Uses(s) of Medicinal Ingredient(s)",
    	lbDeleteIngred:	"Delete Ingredient",
    	lbDIN:				"Drug Identification Number (DIN)",
    	//part 3 labels
    	lbPatentNo:         "Patent Number",
	    lbCode:             "Code",
	    lbFiling:           "Canadian Filing Date of Patent Application (YYYY-MM-DD)",
	    lbGranted:          "Date Granted (YYYY-MM-DD)",
	    lbExpiration:       "Expiration Date (YYYY-MM-DD)",	
	    lbMedIngred:		"Medicinal Ingredient Name",
	    lbRouteDetails:		"Route Details",
	    lbDosageDetails:	"Dosage Form Details",
	    lbCodeInstruct:		"Select at least one of the following codes:",
	    lbAttest1:			"In accordance with paragraph 4(4)(f), I certify that the information included in this Patent List is accurate and that the patent on the list meets the eligibility requirements of subsection 4(2) or 4(3) of the Patented Medicines (Notice of Compliance) Regulations.",
		lbSameService:		"Same Company Name and Address as Service in Canada",
		lbManufacturer:		"for the manufacturer address",
		lbOfCertifier:		"of the certifier",
		lbSelectCode:		"Select at least one of the following codes:",
		lbCodeA:			"A- Applicant is the owner of the patent",
		lbCodeB:			"B- Applicant has an exclusive licence",
		lbCodeC:			"C- Applicant has obtained the consent of the owner of the patent for the inclusion of the patent on the above patent list",
		lbDrugUse:			"Drug Use",
		lbHCOnly:			"HEALTH CANADA USE ONLY",
		lbFilingDate:		"Date of Filing Submission (YYYY-MM-DD)",
		lbNOCDate:			"NOC Date (YYYY-MM-DD)",
		lbAddDate:			"Date Originally Added (YYYY-MM-DD)",
		lbAmendDate:		"Date Amended (YYYY-MM-DD)",
		lbFormIVDate:		"Form IV Date Recieved (YYYY-MM-DD)",
		lbDrugID:			"Drug ID",
		lbSubformID:		"Sub-form ID",
		lbFormID:			"Form ID",
		lbNotes:			"Notes",
}
</script>
                  <script contentType="application/x-javascript" name="part15_fr">

var content={

		//part 1 labels
		lbPatentOption:		"Veuillez sélectionner ci-dessous l'option de présentation d'une demande dans la liste des brevets, et entrer ensuite les renseignements demandés.",
		lbSubType:			"Option de dépôt de demande liée à la liste de brevets",
		lbSubNum:			"Numéro de la présentation",
		lbRelatedSub:      "Présentation connexe",
		lbSubPurpose:       "fr_Please select at least one of the following atatements that describes the Supplemental New Drug Submission purpose:",
		lbCheckForm:        "Changement de formulation",
   		lbCheckDosage:      "Changement de forme posologique",
    	lbCheckUse:         "Changement d'utilisation",
		//part 2 labels
		lbAddIngred: 		"Ajouter un ingrédient médicinal",
		lbBrandName:      "Marque nominative",
    	lbHumanVet:       "Usage humain/Usage vétérinaire",
    	lbStrength:		"Concentration par unité",
    	lbRoutes:			"Voie d’administration",
    	lbDosage:			"Forme posologique",
    	lbUses:				"Utilisation de l'ingrédient médicinal ou des ingrédients médicinaux",
 		lbDeleteIngred:		"Effacer Ingrédient",
 		lbDIN:				"Numéro d'identification du médicament (DIN)",
 		lbPatentNo:         "Numéro de brevet*",
	    lbCode:             "Code",
	    lbFiling:           "Date du dépôt de la demande de brevet au Canda (AAAA-MM-JJ)",
	    lbGranted:          "Date d'obtention\n(AAAA-MM-JJ)",
	    lbExpiration:       "Date d'expiration\n(AAAA-MM-JJ)",
	    lbMedIngred:		"Nom de l'ingrédient médicinal",
	    lbRouteDetails:		"Précédemment déposé",
	   	lbDosageDetails:	"Détails de la forme posologique",
	   	lbAttest1:			"En vertu de l'alinéa 4(4)(f), j'atteste que les renseignements inclus dans la Liste de brevets sont exacts et que le brevet décrit est admissible et conforme aux paragraphes 4(2) et 4(3) du Règlement sur les médicaments brevetés (avis de conformité).",			
		lbSameService:		"fr_Same Company Name and Address as Service in Canada",
		lbManufacturer:		"l'adresse du fabricant",
		lbOfCertifier:		"du certificateur",	
		lbSelectCode:		"fr_Select at least one of the following codes:",
		lbCodeA:			"A - Le requérant est le propriétaire du brevet",
		lbCodeB:			"B - Le demandeur dispose d'une licence exclusive",
		lbCodeC:			"C - Demandeur a obtenu le consentement du propriétaire du brevet pour l'inclusion du brevet sur la liste de brevets ci-dessus",
		lbDrugUse:			"fr_Drug Use",
		lbHCOnly:			"RÉSERVÉ À SANTÉ CANADA",
		lbFilingDate:		"La liste des brevets est déposée avec la présentation (AAAA-MM-JJ)",
		lbNOCDate:			"Date de l'avis de conformité (AC) (AAAA-MM-JJ)",
		lbAddDate:			"Date ajoutée au début (AAAA-MM-JJ)",
		lbAmendDate:		"Date modifiée (AAAA-MM-JJ)",
		lbFormIVDate:		"Date de réception du formulaire IV (AAAA-MM-JJ)",
		lbDrugID:			"Numéro d'identification du médicament (DIN)",
		lbSubformID:		"Numéro d'identification du sous-formulaire",
		lbFormID:			"Numéro d'identification du formulaire Notes",
		lbNotes:			"Notes",

}
</script>
                  <script contentType="application/x-javascript" name="msg_en">
var content={

	//error_sub_length:	 "Submission Number must contain 6 digits with leading zeroes when necessary.",
	error_sub_length:		"The Submission Number must contain 6 digits.",
	error_patent_length:	"The Patent Number must contain 7 digits.",
	error_serviceZipFormat:		"For Part 4,",	
	error_manufactZipFormat:	"For Part 5,",	error_FilingDateFormat:		"In Part 3, for the Canadian filing date of the Patent Application:",
	error_GrantedDateFormat:	"In Part 3, for the date granted:",
	error_ExpiryDateFormat:		"In Part 3, for the expiry date:",
	error_fileDate:			"In Part 3, the Canadian Filing date of the Patent Application must be older than the date granted.",
	error_grantDate:				"In Part 3, the date granted must be older than the expiration date.",	
	error_CodeChoice:		"In Part 3, at least one code choice must be selected.",
	error_din_length:		"In Part 2, the DIN length must be 8 digits. If your DIN has only 7 digits, please enter the number zero as the first digit",
	error_formChoice:		"In Part 1, a least one change type is required to be selected.",
	error_manContactPhone:	"For the manufacturer contact,",

}
</script>
                  <script contentType="application/x-javascript" name="msg_fr">

var content={


	//error_sub_length:	"Le numéro de soumission doit contenir 6 chiffres. Ajoutez des zéros au début si nécessaire.",
	error_sub_length:			"Le Numéro de la présentation doit avoir 6 chiffres.",
	error_patent_length:		"fr_The Patent Number must contain 7 digits.",
	error_serviceZipFormat:		"Pour Partie 4,",
	error_manufactZipFormat:	"Pour Partiet 5,",
	error_FilingDateFormat:		"fr_In Part 3, for the Canadian filing date,",
	error_GrantedDateFormat:	"fr_In Part 3, For the date granted,",						
	error_fileDate:				"fr_In Part 3, the Canadian Filing date of the Patent Application must be older than the date granted.",
	error_grantDate:			"fr_In Part 3, the date granted must be older than the expiration date.",
	error_CodeChoice:			"In Part 3, at least one code choice must be selected.",
	error_din_length:			"In Part 2, the DIN length must be 8 digits. If your DIN has only 7 digits, please enter the number zero as the first digit",
	error_formChoice:			"fr_In Part 1, a least one change type is required to be selected.",		 
	error_manContactPhone:		"fr_For the manufacturer contact,",
}
</script>
                  <script contentType="application/x-javascript" name="routeList_en">

var content={


		
    listRoutes:	[
				["BLOCK_INFILTRATION","Block/Infiltration"],
				["BUCCAL","Buccal"],
				["DENTAL","Dental"],
				["DIALYSIS","Dialysis"],
				["EPIDURAL","Epidural"],
				["INHALATION","Inhalation"],
				["INTRA-ARTERIAL","Intra-Arterial"],
				["INTRA-ARTICULAR","Intra-Articular"],
				["INTRABURSAL","Intrabursal"],
				["INTRADERMAL","Intradermal"],
				["INTRAMAMMARY","Intramammary"],
				["INTRAMUSCULAR","Intramuscular"],
				["INTRAOCULAR","Intraocular"],
				["INTRAPERITONEAL","Intraperitoneal"],
				["INTRATHECAL","Intrathecal"],
				["INTRATRACHEAL","Intratracheal"],
				["INTRAVASCULAR","Intravascular"],
				["INTRAVENOUS","Intravenous"],
				["INTRAVITREAL","Intravitreal"],
				["IRRIGATION","Irrigation"],
				["NASAL","Nasal"],
				["OPHTHALMIC","Ophthalmic"],
				["ORAL","Oral"],
				["OTIC","Otic"],
				["RECTAL","Rectal"],
				["SUBCUTANEOUS","Subcutaneous"],
				["SUBLINGUAL","Sublingual"],
				["TOPICAL","Topical"],
				["TRANSDERMAL","Transdermal"],
				["URETHRAL","Urethral"],
				["VAGINAL","Vaginal"],
				["Other","Other"],	
		],

}
</script>
                  <script contentType="application/x-javascript" name="routeList_fr">

var content={

			listRoutes:	[
				["BLOCK_INFILTRATION","Bloc ou Infiltration"],
				["BUCCAL","Buccale"],
				["DENTAL","Dentaire"],
				["DIALYSIS","Dialyse"],
				["EPIDURAL","Épidurale"],
				["INHALATION","Inhalation"],
				["INTRA-ARTERIAL","Intra-artérielle"],
				["INTRA-ARTICULAR","Intra-articulaire"],
				["INTRABURSAL","Intrabursique"],
				["INTRADERMAL","Intradermique"],
				["INTRAMAMMARY","Intramammaire"],
				["INTRAMUSCULAR","Intramusculaire"],
				["INTRAOCULAR","Intraoculaire"],
				["INTRAPERITONEAL","Intrapéritonéale"],
				["INTRATHECAL","Intrathécale"],
				["INTRATRACHEAL","Intratrachéale"],
				["INTRAVASCULAR","Intravasculaire"],
				["INTRAVENOUS","Intraveineuse"],
				["INTRAVITREAL","Intravitreuse"],
				["IRRIGATION","Irrigation"],
				["NASAL","Nasale"],
				["OPHTHALMIC","Ophtalmique"],
				["ORAL","Orale"],
				["OTIC","Otique"],
				["RECTAL","Rectale"],
				["SUBCUTANEOUS","Sous-cutanée"],
				["SUBLINGUAL","Sublinguale"],
				["TOPICAL","Topique"],
				["TRANSDERMAL ", "Transdermique"],
				["URETHRAL","Urétrale"],
				["VAGINAL","Vaginale"],
				["Other","Autre"],	
	],


}
</script>
                  <script contentType="application/x-javascript" name="dosageFormList_en">

var content={

	 listDosage:	[
					["AEROSOL","Aerosol"],
					["BOLUS","Bolus"],
					["CAPSULE","Capsule"],
					["CAPSULE_DELAYED_RELEASE","Capsule\, Delayed Release"],
					["CAPSULE_EXTENDED_RELEASE","Capsule\, Extended Release"],
					["CON","Concentrate for Solution for Injection"],
					["CREAM","Cream"],
					["EMULSION","Emulsion"],
					["GAS","Gas"],
					["GEL","Gel"],
					["IMPLANT","Implant"],
					["LOTION","Lotion"],
					["LOZENGE","Lozenge"],
					["OINTMENT","Ointment"],
					["PATCH","Patch"],
					["PATCH_EXTENDED_RELEASE","Patch\, Extended-Release"],
					["POWDER","Powder"],
					["POWDER_FOR_SOLUTION","Powder For Solution"],
					["POWDER_FOR_SUSPENSION","Powder For Suspension"],
					["SHAMPOO","Shampoo"],
					["SOLUTION","Solution"],
					["SPRAY","Spray"],
					["SPRAY_BAG-ON-VALVE","Spray\, Bag-On-Valve"],
					["SPRAY, METERED DOSE","Spray\, Metered Dose"],
					["STICK","Stick"],
					["STRIP","Strip"],
					["SUPPOSITORY","Suppository"],
					["SUSPENSION","Suspension"],
					["SYRUP","Syrup"],
					["TABLET","Tablet"],
					["TABLET_CHEWABLE","Tablet\, Chewable"],
					["TABLET_DELAYED_RELEASE","Tablet\, Delayed Release"],
					["TABLET_EXTENDED_RELEASE","Tablet\, Extended Release"],
					["TABLET_ORALLY_DISINTEGRATING","Tablet\, Orally Disintegrating"],
					["WIPE","Wipe"],
					["Other","Other"]
	],


}
</script>
                  <script contentType="application/x-javascript" name="dosageFormList_fr">
var content={

	listDosage:	[
					["AEROSOL","Aérosol"],
					["BOLUS","Bol"],
					["CAPSULE","Capsule"],
					["CAPSULE_DELAYED_RELEASE","Capsule (à libération retardée)"],
					["CAPSULE_EXTENDED_RELEASE","Capsule (à libération prolongée)"],
					["CREAM","Crème"],
					["EMULSION","Émulsion"],
					["GAS","Gaz"],
					["GEL","Gel"],
					["IMPLANT","Implant"],
					["LOTION","Lotion"],
					["LOZENGE","Pastille"],
					["OINTMENT","Pommade"],
					["PATCH","Timbre"],
					["PATCH_EXTENDED_RELEASE","Timbre (à libération prolongée)"],
					["POWDER","Poudre"],
					["POWDER_FOR_SOLUTION","Poudre pour solution"],
					["POWDER_FOR_SUSPENSION","Poudre pour suspension"],
					["SHAMPOO","Shampoing"],
					["SOLUTION","Solution"],
					["CON","Solution concentrée pour injection"],
					["SPRAY","Pulvérisation"],
					["SPRAY_BAG-ON-VALVE","Pulvérisation\, sac-sur-valve"],
					["SPRAY, METERED DOSE","Pulvérisation\, à dose mesurée"],
					["STICK","Bâton"],
					["STRIP","Bandelette"],
					["SUPPOSITORY","Suppositoire"],
					["SUSPENSION","Suspension"],
					["SYRUP","Sirop"],
					["TABLET","Comprimé"],
					["TABLET_CHEWABLE","Comprimé (à croquer)"],
					["TABLET_DELAYED_RELEASE","Comprimé (à libération retardée)"],
					["TABLET_EXTENDED_RELEASE","Comprimé (à libération prolongée)"],
					["TABLET_ORALLY_DISINTEGRATING","Comprimé (à désintégration orale)"],
					["WIPE","Serviette"],
					["Other","Autre"]
				],

}
</script>
                  <script contentType="application/x-javascript" name="tooltips_en">

var content={

		ttCodeA:			"A- Applicant is the owner of the patent. Choice 1 of 3, at least one selection is required.",
		ttCodeB:			"B- Applicant has an exclusive licence. Choice 2 of 3, at least one selection is required.",
		ttCodeC:			"C- Applicant has obtained the consent of the owner of the patent for the inclusion of the patent on the above patent list. Choice 3 of 3, at least one selection is required." ,
		ttChangeForm:		"Change in formulation is the supplemental new drug submission purpose. Choice 1 of 3, at least one selection is required.",
		ttChangeDose:		"Change in dosage form is the supplemental new drug submission purpose. Choice 2 of 3, at least one selection is required.",
		ttChangeUse:		"Change in usage is the supplemental new drug submission purpose. Choice 3 of 3, at least one selection is required.",

}
</script>
                  <script contentType="application/x-javascript" name="tooltips_fr">

var content={

		ttCodeA:		"A - Le requérant est le propriétaire du brevet. Choix 1 de 3, au moins une sélection est requise.",
		ttCodeB:		"B - Le demandeur dispose d'une licence exclusive. Choix 2 de 3, au moins une sélection est requise.",
		ttCodeC:		"C - Demandeur a obtenu le consentement du propriétaire du brevet pour l'inclusion du brevet sur ​​la liste de brevets ci-dessus. Choix 3 de 3, au moins une sélection est requise.",
		ttChangeForm:	"fr_Change in formulation is the supplemental new drug submission purpose. Choice 1 of 3, at least one selection is required.",
		ttChangeDose:	"fr_Change in dosage form is the supplemental new drug submission purpose. Choice 2 of 3, at least one selection is required.",
		ttChangeUse:	"fr_Change in usage is the supplemental new drug submission purpose. Choice 3 of 3, at least one selection is required.",
}
</script>
                  <?templateDesigner expand 1?></variables>
               <bind match="none"/>
               <?templateDesigner expand 1?></subform>
            <subform h="50mm" name="util" w="100mm">
               <variables>
                  <script usehref="..\..\fragments\util\General.xdp#som($template.form1.#subform.#variables.General)"/>
                  <script usehref="..\..\fragments\util\AddressUtil.xdp#som($template.form1.#subform.#variables.AddressUtil)"/>
                  <script usehref="..\..\fragments\Accessibility.xdp#som($template.form1.#subform.#variables.Accessibility)"/>
                  <script contentType="application/x-javascript" name="Number">


/************************************************************************************************
Function-  digitTestYX- based on a user event, evaluates a string to see if the changes conform
						to an (Y,X) decimal number where X is the number of digits
						to the right of the decimal and Y is the
						total number of digits. Examples: 12345678901234 or 1234567.12345
						'Y' denotes the max number of digits, and X the max number decimal values
Parameters: aEvent- the event from which to evaluate the changes the user wants to make
Returns: 	 null
Created:		Jan 1, 2007
Last Modified:
Creator: 		D. Kilty, PMRA, Health Canada
*************************************************************************************************/
function digitTestYX(aEvent,numDigits,numDec)
{

	checkIfDecimal(aEvent) //gets rid of letters
	//handles the case of integer
	if(aEvent.change==='.' &amp;&amp; numDec===0){
		aEvent.change="";
		return;
	}
	var decIndex=aEvent.fullText.indexOf('.')
	if(aEvent.change &amp;&amp; aEvent.fullText.length&gt;numDigits)//14 characters
	{
		var index=aEvent.fullText.indexOf('.')
		if (index==-1)//no decimal case
		{
			if(aEvent.change.length==aEvent.fullText.length) //cut and paste option 15 digits
			{
				aEvent.change=aEvent.change.substr(0,numDigits);
			}
			else
			{
				aEvent.change="";
			}
		}
	}
		if(decIndex&gt;-1 &amp;&amp; aEvent.fullText.length&gt;1) //check for X digits
	{
		var rghtdec=(aEvent.fullText).substr(decIndex+1,aEvent.fullText.length)
		if(rghtdec.length&gt;numDec)
		{
			if(aEvent.change.length==aEvent.fullText.length) //cut and paste case
			{
				var diff=(rghtdec.length)-numDec
				aEvent.change=(aEvent.change).substr(0,(aEvent.change.length)-diff)
			}
			else
			{
				aEvent.change=""; 
			}
		}	
	}	

}// end fn


/************************************************************************************************
Function-  checkIfDecimal- based on a user event, evaluates a string to see if the changes conform
						to a decimal number. If not, do not allow the user to make the change (ie typed value)
Parameters: aEvent- the event from which to evaluate the changes the user wants to make
Returns: 	null
Created:		Jan 1, 2007
Last Modified:
Creator: 		D. Kilty, PMRA, Health Canada
*************************************************************************************************/
function checkIfDecimal(aEvent)
{

	for(var i=0;i&lt;aEvent.change.length;i++)
	{
		if ( (aEvent.change).charCodeAt(i)!=46 &amp;&amp; ((aEvent.change).charCodeAt(i)&lt;48 || (aEvent.change).charCodeAt(i)&gt;57))
		//if ( ((aEvent.change).charCodeAt(i)!=46 || (aEvent.change).charCodeAt(i)!=46) &amp;&amp; ((aEvent.change).charCodeAt(i)&lt;48 || (aEvent.change).charCodeAt(i)&gt;57))
		{
			var temp=aEvent.change.substr(0,i);
				var temp=temp;
				temp=temp+aEvent.change.substr(i+1,aEvent.change.length)
				aEvent.change=temp;
				if(i&gt;1)i=i-2;
				else i=i-1;
		}	
	}
	//check for multiple '.'
	var decIndex=aEvent.fullText.indexOf('.')
	var decLastIndex=aEvent.fullText.lastIndexOf('.')
	var chgeIndex=aEvent.change.indexOf('.')
	if(decIndex&gt;-1 &amp;&amp; chgeIndex&gt;-1 &amp;&amp; decIndex!=decLastIndex)
	{
		aEvent.change=""; //if both found don't add a second period
	}
	else if(decIndex==0 &amp;&amp; chgeIndex==0) //'.' is the first value
	{
		var temp=(aEvent.change).substr(1,aEvent.change.length);
		aEvent.change="0."+temp;	
	}
}//end fn



/* Checks an event value. If it is not a digit don't allow it to be typed
*
*/

function formatEventToNumber(anEvent){
	if (anEvent.change &amp;&amp; anEvent.change.length==1){
					
		if(checkIfDigit(anEvent)===false){
				anEvent.change="";
		}		
			
	}//endif
}

/*
* Checks if a digit is a number
*	@param anEvent- an adobe event object
*	@returns true if a digit
*/
function checkIfDigit(anEvent){
	var regExpress=/^[0-9]/;
	return(regExpress.test(anEvent.change));
}

/*
* Checks if a date in the future
* @param oField- the adobe field to process
* @returns true if the date is in the future
*/
function isFutureDate(oField)
{
	var oToday = new Date();
	var curYear = oToday.getFullYear();
	var curMonth =pad(String(oToday.getMonth() + 1), 2, "0");
	var curDay = pad(String(oToday.getDate()), 2, "0");	
	oToday = curYear + '-' + curMonth + '-' + curDay;
	
	return (oField.rawValue &gt; oToday);
	

}//end fn




//pads a string s, to length len, with character chr
//padding is done in front of the string
function pad(s, len, chr)
{		
	if(s.length &gt; len)
	{
		return s.substr(s.length - len, len);
	}
	else if(s.length &lt; len)
	{
		var tmp = "";
		var i = 0;
		for(i = s.length; i &lt; len; i++)
		{
			tmp += chr;
		}
		return tmp + s;
	}
	return s;
}//end fn


function allowNumberWithExponents(event)
/* Unicode conversions
	'e'=101
	'-' =45
	'.'=46
	'9'=57
	'0'=48
	'E'=69
*/

{
	
	if (((event.change).charCodeAt(0)&lt;48 &amp;&amp; ((event.change).charCodeAt(0)!=46 &amp;
				 (event.change).charCodeAt(0)!=45)) 
		|((event.change).charCodeAt(0)&gt;57 &amp;&amp;((event.change).charCodeAt(0)!=69 &amp; (event.change).charCodeAt(0)!=101)))            
	event.change="";
}


function allowDateFormatDigits(event)
{
	
	if (((event.change).charCodeAt(0)&lt;48 &amp;&amp; ((event.change).charCodeAt(0)!=45)) 
		||((event.change).charCodeAt(0)&gt;57)){             
		event.change="";
	}
}


/************************************************************************************************
Function-  checkIfIntegerOrDecimal- based on a user event, evaluates a string to see if the changes conform
						to an integer or a decimal. If not, do not allow the user to make the change (ie typed value)
Parameters: aEvent- the event from which to evaluate the changes the user wants to make
Returns: 	 null
Created:		Jan 1, 2007
Last Modified:
Creator: 		C. Senack, ADS, Health Canada
*************************************************************************************************/
function checkIfIntegerOrDecimal(aEvent)
{

	for(var i=0;i&lt;aEvent.change.length;i++)
	{
	
		if ( (aEvent.change).charCodeAt(i)&lt;48 || (aEvent.change).charCodeAt(i)&gt;57 ) //0-9 or a decimal only
		{
			if((aEvent.change).charCodeAt(i)!=46)
			{
				var temp=aEvent.change.substr(0,i);
				var temp=temp;
				temp=temp+aEvent.change.substr(i+1,aEvent.change.length)
				aEvent.change=temp;
				if(i&gt;1)i=i-2;
				else i=i-1;
			}
		}	
	}
}


/************************************************************************************************
Function- isOlderDate -						
Parameters- 			
Returns: null
Created: Jan 1, 2007
Last Modified:
Creator: D. Kilty, PMRA, Health Canada
*************************************************************************************************/
function isOlderDate(src,tocmp)
{
	if(tocmp &amp;&amp; src)
	{			
		var selYr=tocmp.substr(0,4);
		var selMth=tocmp.substr(0,7);
		selMth=selMth.substr(5,7);
		var selDy=tocmp.substr(8);
			
		var srcYr=src.substr(0,4);
		var srcMth=src.substr(0,7);
		srcMth=srcMth.substr(5,7);
		var srcDy=src.substr(8);		
		
		if(srcYr&gt;selYr)
		{
			return(0);
					}
		else if(srcYr==selYr)
		{
			if(srcMth&gt;selMth)
			{
				return(0);
							}
			else if(srcMth==selMth)
			{
				if(srcDy&gt;selDy || srcDy===selDy)
				{
					return(0);
					
				}//if
			}//elseif
		}//elseif
	}//if

	return(1);

}

/************************************************************************************************
Function-  checkIfSubNum = based on a user event, evaluates a string to see if the changes conform
						to a submission number. If not, do not allow the user to make the change (ie typed value)
						a submission is of the form ####-#####, the value to the right can be 4 or 5 digits 
Parameters: aEvent- the event from which to evaluate the changes the user wants to make
Returns: 	 null
Created:		Jan 1, 2007
Last Modified:
Creator: 		D. Kilty, PMRA, Health Canada
*************************************************************************************************/
function checkIfSubNum(aEvent)
{

	for(var i=0;i&lt;aEvent.change.length;i++)
	{
		if ( (aEvent.change).charCodeAt(i)!=45 &amp;&amp;((aEvent.change).charCodeAt(i)&lt;48 || (aEvent.change).charCodeAt(i)&gt;57))
		{
			var temp=aEvent.change.substr(0,i);
				var temp=temp;
				temp=temp+aEvent.change.substr(i+1,aEvent.change.length)
				aEvent.change=temp;
				if(i&gt;1)i=i-2;
				else i=i-1;
		}
	
	}
}


</script>
                  <?templateDesigner expand 1?></variables>
               <bind match="none"/>
               <?templateDesigner expand 1?></subform>
            <bind match="none"/>
            <?templateDesigner expand 1?></subform>
         <?templateDesigner expand 1?></subform>
      <proto/>
      <desc>
         <text name="version"> 2.00</text>
         <text name="title">FORM TITLE</text>
         <text name="creator">Health Canada</text>
         <text name="created">2015-07-21</text>
         <text name="department">Health Canada</text>
         <text name="issued">2015</text>
      </desc>
      <margin leftInset="0mm" topInset="0mm" bottomInset="0mm"/>
      <event activity="initialize" name="event__initialize">
         <script contentType="application/x-javascript">
var cFormHandler=script.HCeForm.control.FormHandler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
var cSystem = script.core.System;


try{
		// set up event object
		var actionName = cFormHandler.INITIALIZE_FORM_ACTION;
		var anActionEvent = cActionEvent.createInstance(actionName, this);
		// deploy event to controller
		cFormHandler.actionPerformed(anActionEvent);
}
catch(exception)
{
	cLog.warn("Problem with  form initialize::initialize", exception);
}



</script>
      </event>
      <event activity="prePrint" ref="$host" name="event__prePrint">
         <script contentType="application/x-javascript">
var cFormHandler=	script.HCeForm.control.FormHandler;
var cActionEvent = script.core.event.ActionEvent;
var cLog = script.core.util.Log;
try
{
		// set up event object
		var actionName =  cFormHandler.HIDE_INSTRUCTIONS;
		var anActionEvent = cActionEvent.createInstance(actionName, this);
		// deploy event to controller
		cFormHandler.actionPerformed(anActionEvent);
	
}
catch(exception)
{
	cLog.warn("Problem with hide instructions ::preprint", exception);
}
</script>
      </event>
      <?templateDesigner Hyphenation excludeInitialCap:1, excludeAllCaps:1, wordCharCnt:7, remainCharCnt:3, pushCharCnt:3?>
      <?templateDesigner expand 1?>
      <?renderCache.subset "Myriad Pro" 0 0 ISO-8859-1 4 272 69 000100030009000A000B000C000D000E000F001000120013001400150016001700180019001A001B00220023002400250026002700280029002A002D002E002F0030003100330034003500360037003A003B003D00420043004400450046004700480049004A004C004D004E004F0050005100520053005400550056005700580059005A005B00CE "()*+,-./123456789:ABCDEFGHILMNOPRSTUVYZ\abcdefghiklmnopqrstuvwxyzç?>
      <?renderCache.subset "Myriad Pro" 1 0 ISO-8859-1 4 128 32 000100120013001400150016001B00220023002400250026002700280029002A002D002E002F00300031003300340035003600370038003A0046004A004D0055 12345:ABCDEFGHILMNOPRSTUVWYeilt?>
   </subform>
   <?templateDesigner DefaultPreviewDynamic 1?>
   <?originalXFAVersion http://www.xfa.org/schema/xfa-template/2.8/?>
   <?templateDesigner Grid show:0, snap:0, units:0, color:ff8080, origin:(0,0), interval:(125000,125000), objsnap:0, guidesnap:0, pagecentersnap:827642484?>
   <?templateDesigner DefaultLanguage JavaScript?>
   <?templateDesigner DefaultRunAt client?>
   <?acrobat JavaScript strictScoping?>
   <?PDFPrintOptions embedViewerPrefs 0?>
   <?PDFPrintOptions embedPrintOnFormOpen 0?>
   <?PDFPrintOptions scalingPrefs 0?>
   <?PDFPrintOptions enforceScalingPrefs 0?>
   <?PDFPrintOptions paperSource 0?>
   <?PDFPrintOptions duplexMode 0?>
   <?templateDesigner DefaultPreviewType interactive?>
   <?templateDesigner DefaultPreviewPagination simplex?>
   <?templateDesigner XDPPreviewFormat 20?>
   <?templateDesigner DefaultCaptionFontSettings face:Myriad Pro;size:10;weight:normal;style:normal?>
   <?templateDesigner DefaultValueFontSettings face:Myriad Pro;size:10;weight:normal;style:normal?>
   <?templateDesigner ValidationMessaging noMessages?>
   <?templateDesigner Zoom 100?>
   <?templateDesigner FormTargetVersion 30?>
   <?templateDesigner Rulers horizontal:1, vertical:1, guidelines:1, crosshairs:0?>
   <?templateDesigner Guidelines h:990726?>
   <?templateDesigner SaveTaggedPDF 0?>
   <?templateDesigner SavePDFWithEmbeddedFonts 0?>
   <?templateDesigner SavePDFWithLog 0?></template>
<config xmlns="http://www.xfa.org/schema/xci/3.0/">
   <agent name="designer">
      <!--  [0..n]  -->
      <destination>pdf</destination>
      <pdf>
         <!--  [0..n]  -->
         <fontInfo/>
      </pdf>
   </agent>
   <present>
      <!--  [0..n]  -->
      <pdf>
         <!--  [0..n]  -->
         <tagged>0</tagged>
         <fontInfo>
            <embed>0</embed>
         </fontInfo>
         <version>1.7</version>
         <adobeExtensionLevel>5</adobeExtensionLevel>
      </pdf>
      <common>
         <data>
            <xsl>
               <uri/>
            </xsl>
            <outputXSL>
               <uri/>
            </outputXSL>
         </data>
      </common>
      <script>
         <runScripts>server</runScripts>
      </script>
      <cache>
         <macroCache/>
      </cache>
      <xdp>
         <packets>*</packets>
      </xdp>
   </present>
   <psMap>
      <font typeface="Calibri" psName="Calibri" weight="normal" posture="normal"/>
   </psMap>
   <acrobat>
      <common>
         <validationMessaging>noMessages</validationMessaging>
      </common>
   </acrobat>
</config>
<localeSet xmlns="http://www.xfa.org/schema/xfa-locale-set/2.7/">
   <locale name="en_CA" desc="English (Canada)">
      <calendarSymbols name="gregorian">
         <monthNames>
            <month>January</month>
            <month>February</month>
            <month>March</month>
            <month>April</month>
            <month>May</month>
            <month>June</month>
            <month>July</month>
            <month>August</month>
            <month>September</month>
            <month>October</month>
            <month>November</month>
            <month>December</month>
         </monthNames>
         <monthNames abbr="1">
            <month>Jan</month>
            <month>Feb</month>
            <month>Mar</month>
            <month>Apr</month>
            <month>May</month>
            <month>Jun</month>
            <month>Jul</month>
            <month>Aug</month>
            <month>Sep</month>
            <month>Oct</month>
            <month>Nov</month>
            <month>Dec</month>
         </monthNames>
         <dayNames>
            <day>Sunday</day>
            <day>Monday</day>
            <day>Tuesday</day>
            <day>Wednesday</day>
            <day>Thursday</day>
            <day>Friday</day>
            <day>Saturday</day>
         </dayNames>
         <dayNames abbr="1">
            <day>Sun</day>
            <day>Mon</day>
            <day>Tue</day>
            <day>Wed</day>
            <day>Thu</day>
            <day>Fri</day>
            <day>Sat</day>
         </dayNames>
         <meridiemNames>
            <meridiem>AM</meridiem>
            <meridiem>PM</meridiem>
         </meridiemNames>
         <eraNames>
            <era>BC</era>
            <era>AD</era>
         </eraNames>
      </calendarSymbols>
      <datePatterns>
         <datePattern name="full">EEEE, MMMM D, YYYY</datePattern>
         <datePattern name="long">MMMM D, YYYY</datePattern>
         <datePattern name="med">D-MMM-YY</datePattern>
         <datePattern name="short">DD/MM/YY</datePattern>
      </datePatterns>
      <timePatterns>
         <timePattern name="full">h:MM:SS A Z</timePattern>
         <timePattern name="long">h:MM:SS A Z</timePattern>
         <timePattern name="med">h:MM:SS A</timePattern>
         <timePattern name="short">h:MM A</timePattern>
      </timePatterns>
      <dateTimeSymbols>GyMdkHmsSEDFwWahKzZ</dateTimeSymbols>
      <numberPatterns>
         <numberPattern name="numeric">z,zz9.zzz</numberPattern>
         <numberPattern name="currency">$z,zz9.99</numberPattern>
         <numberPattern name="percent">z,zz9%</numberPattern>
      </numberPatterns>
      <numberSymbols>
         <numberSymbol name="decimal">.</numberSymbol>
         <numberSymbol name="grouping">,</numberSymbol>
         <numberSymbol name="percent">%</numberSymbol>
         <numberSymbol name="minus">-</numberSymbol>
         <numberSymbol name="zero">0</numberSymbol>
      </numberSymbols>
      <currencySymbols>
         <currencySymbol name="symbol">$</currencySymbol>
         <currencySymbol name="isoname">CAD</currencySymbol>
         <currencySymbol name="decimal">.</currencySymbol>
      </currencySymbols>
      <typefaces>
         <typeface name="Myriad Pro"/>
         <typeface name="Minion Pro"/>
         <typeface name="Courier Std"/>
         <typeface name="Adobe Pi Std"/>
         <typeface name="Adobe Hebrew"/>
         <typeface name="Adobe Arabic"/>
         <typeface name="Adobe Thai"/>
         <typeface name="Kozuka Gothic Pro-VI M"/>
         <typeface name="Kozuka Mincho Pro-VI R"/>
         <typeface name="Adobe Ming Std L"/>
         <typeface name="Adobe Song Std L"/>
         <typeface name="Adobe Myungjo Std M"/>
      </typefaces>
   </locale>
   <locale name="fr_CA" desc="French (Canada)">
      <calendarSymbols name="gregorian">
         <monthNames>
            <month>janvier</month>
            <month>février</month>
            <month>mars</month>
            <month>avril</month>
            <month>mai</month>
            <month>juin</month>
            <month>juillet</month>
            <month>août</month>
            <month>septembre</month>
            <month>octobre</month>
            <month>novembre</month>
            <month>décembre</month>
         </monthNames>
         <monthNames abbr="1">
            <month>janv.</month>
            <month>févr.</month>
            <month>mars</month>
            <month>avr.</month>
            <month>mai</month>
            <month>juin</month>
            <month>juil.</month>
            <month>août</month>
            <month>sept.</month>
            <month>oct.</month>
            <month>nov.</month>
            <month>déc.</month>
         </monthNames>
         <dayNames>
            <day>dimanche</day>
            <day>lundi</day>
            <day>mardi</day>
            <day>mercredi</day>
            <day>jeudi</day>
            <day>vendredi</day>
            <day>samedi</day>
         </dayNames>
         <dayNames abbr="1">
            <day>dim.</day>
            <day>lun.</day>
            <day>mar.</day>
            <day>mer.</day>
            <day>jeu.</day>
            <day>ven.</day>
            <day>sam.</day>
         </dayNames>
         <meridiemNames>
            <meridiem>AM</meridiem>
            <meridiem>PM</meridiem>
         </meridiemNames>
         <eraNames>
            <era>av. J.-C.</era>
            <era>ap. J.-C.</era>
         </eraNames>
      </calendarSymbols>
      <datePatterns>
         <datePattern name="full">EEEE D MMMM YYYY</datePattern>
         <datePattern name="long">D MMMM YYYY</datePattern>
         <datePattern name="med">YY-MM-DD</datePattern>
         <datePattern name="short">YY-MM-DD</datePattern>
      </datePatterns>
      <timePatterns>
         <timePattern name="full">HH' h 'MM' min 'SS' s 'Z</timePattern>
         <timePattern name="long">HH:MM:SS Z</timePattern>
         <timePattern name="med">HH:MM:SS</timePattern>
         <timePattern name="short">HH:MM</timePattern>
      </timePatterns>
      <dateTimeSymbols>GaMjkHmsSEDFwWxhKzZ</dateTimeSymbols>
      <numberPatterns>
         <numberPattern name="numeric">z,zz9.zzz</numberPattern>
         <numberPattern name="currency">z,zz9.99 $|(z,zz9.99$)</numberPattern>
         <numberPattern name="percent">z,zz9%</numberPattern>
      </numberPatterns>
      <numberSymbols>
         <numberSymbol name="decimal">,</numberSymbol>
         <numberSymbol name="grouping"> </numberSymbol>
         <numberSymbol name="percent">%</numberSymbol>
         <numberSymbol name="minus">-</numberSymbol>
         <numberSymbol name="zero">0</numberSymbol>
      </numberSymbols>
      <currencySymbols>
         <currencySymbol name="symbol">$</currencySymbol>
         <currencySymbol name="isoname">CAD</currencySymbol>
         <currencySymbol name="decimal">,</currencySymbol>
      </currencySymbols>
      <typefaces>
         <typeface name="Myriad Pro"/>
         <typeface name="Minion Pro"/>
         <typeface name="Courier Std"/>
         <typeface name="Adobe Pi Std"/>
         <typeface name="Adobe Hebrew"/>
         <typeface name="Adobe Arabic"/>
         <typeface name="Adobe Thai"/>
         <typeface name="Kozuka Gothic Pro-VI M"/>
         <typeface name="Kozuka Mincho Pro-VI R"/>
         <typeface name="Adobe Ming Std L"/>
         <typeface name="Adobe Song Std L"/>
         <typeface name="Adobe Myungjo Std M"/>
      </typefaces>
   </locale>
</localeSet>
<xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">
   <xfa:data xfa:dataNode="dataGroup"/>
   <dd:dataDescription xmlns:dd="http://ns.adobe.com/data-description/" dd:name="PATENT_LIST">
      <PATENT_LIST>
         <form_lang/>
         <form_version/>
         <patent_filing_info>
            <patent_filing_option/>
            <submission_number/>
            <related_submission/>
            <formulation_change/>
            <dosage_form_change/>
            <use_change/>
         </patent_filing_info>
         <drug_info>
            <medicinal_ingredient_info dd:maxOccur="-1">
               <medicinal_ingredient/>
            </medicinal_ingredient_info>
            <brand_name/>
            <drug_use/>
            <strength/>
            <dosage_form/>
            <dosage_form_other/>
            <route/>
            <route_other/>
            <din/>
            <ingredient_uses/>
         </drug_info>
         <patent_info>
            <patent_number/>
            <filing_date/>
            <granted_date/>
            <expiry_date/>
            <code_owner/>
            <code_exclusive/>
            <code_consent/>
         </patent_info>
         <service_address_info>
            <company_name/>
            <service_address>
               <street_address/>
               <city/>
               <province_lov/>
               <country/>
               <postal_code/>
            </service_address>
         </service_address_info>
         <manufact_address_sameas/>
         <manufact_address_info dd:minOccur="0">
            <company_name/>
            <manufact_address>
               <street_address/>
               <city/>
               <province_lov/>
               <province_text/>
               <country/>
               <postal_code/>
            </manufact_address>
         </manufact_address_info>
         <manufact_contact_info>
            <salutation/>
            <given_name/>
            <initials/>
            <surname/>
            <job_title/>
            <phone_num/>
            <phone_ext/>
            <fax_num/>
            <email/>
         </manufact_contact_info>
         <attestation_info>
            <attestation_salutation/>
            <attestation_given_name/>
            <attestation_surname/>
            <attestation_title/>
            <signature_type/>
            <signature_image/>
            <attestation_sign_date/>
         </attestation_info>
         <hcoonly_info>
            <internal_sub_number/>
            <filed_date/>
            <noc_date/>
            <added_date/>
            <amended_date/>
            <recieved_date/>
            <drug_id/>
            <subform_id/>
            <form_id/>
            <notes/>
         </hcoonly_info>
      </PATENT_LIST>
   </dd:dataDescription>
</xfa:datasets>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2011/06/07-10:39:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about="">
         <xmp:MetadataDate>2015-12-22T21:00:44Z</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe LiveCycle Designer ES 10.0</xmp:CreatorTool>
      </rdf:Description>
      <rdf:Description xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about="">
         <pdf:Producer>Adobe LiveCycle Designer ES 10.0</pdf:Producer>
      </rdf:Description>
      <rdf:Description xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/" rdf:about="">
         <xmpMM:DocumentID>uuid:3a7907a7-254c-4d44-a155-75292dc56b13</xmpMM:DocumentID>
         <xmpMM:InstanceID>uuid:2c06e0c0-144a-4bd5-83f8-a1c07717b7ce</xmpMM:InstanceID>
      </rdf:Description>
      <rdf:Description xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about="">
         <dc:format>application/pdf</dc:format>
         <dc:date>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <rdf:value>2015-07-21</rdf:value>
                  <dc:element-refinement>dc:created</dc:element-refinement>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <rdf:value>2015</rdf:value>
                  <dc:element-refinement>dc:issued</dc:element-refinement>
               </rdf:li>
            </rdf:Seq>
         </dc:date>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Health Canada</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">FORM TITLE</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description xmlns:desc="http://ns.adobe.com/xfa/promoted-desc/" rdf:about="">
         <desc:version rdf:parseType="Resource">
            <rdf:value> 2.00</rdf:value>
            <desc:ref>/template/subform[1]</desc:ref>
         </desc:version>
         <desc:department rdf:parseType="Resource">
            <rdf:value>Health Canada</rdf:value>
            <desc:ref>/template/subform[1]</desc:ref>
         </desc:department>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
<xfdf xmlns="http://ns.adobe.com/xfdf/" xml:space="preserve">
   <annots/>
</xfdf>
<connectionSet xmlns="http://www.xfa.org/schema/xfa-connection-set/2.8/">
   <xsdConnection name="DataConnection" dataDescription="PATENT_LIST">
      <uri>..\..\xml_schema\1_3_qualified_formIV_patentList.xsd</uri>
      <rootElement>PATENT_LIST</rootElement>
      <?templateDesigner fileDigest shaHash="PlgFkOM8QVOZAwFMsD+tA2exlS4="?></xsdConnection>
</connectionSet>
<hpfb:schema xmlns:hpfb="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" id="XFASchemaXSD">
   <hpfb:include schemaLocation="#XFAXSDReference"/>
   <hpfb:include schemaLocation="#XFAXSDReference1"/>
   <hpfb:include schemaLocation="#XFAXSDReference2"/>
   <hpfb:include schemaLocation="#XFAXSDReference3"/>
   <!-- ****************************** -->
   <!-- ELEMENT DECLARATIONS -->
   <!-- ****************************** -->
   <hpfb:element name="PATENT_LIST" type="patent_list_content"/>
   <hpfb:element name="form_lang"/>
   <hpfb:element name="form_version"/>
   <hpfb:element name="patent_filing_info" type="patent_filing_content"/>
   <hpfb:element name="patent_filing_option"/>
   <hpfb:element name="submission_number"/>
   <hpfb:element name="related_submission"/>
   <hpfb:element name="formulation_change"/>
   <hpfb:element name="dosage_form_change"/>
   <hpfb:element name="use_change"/>
   <hpfb:element name="drug_info" type="drug_content"/>
   <hpfb:element name="medicinal_ingredient"/>
   <hpfb:element name="medicinal_ingredient_info" type="medicinal_ingredient_content"/>
   <hpfb:element name="brand_name"/>
   <hpfb:element name="drug_use"/>
   <hpfb:element name="strength"/>
   <hpfb:element name="dosage_form"/>
   <hpfb:element name="dosage_form_other"/>
   <hpfb:element name="route"/>
   <hpfb:element name="route_other"/>
   <hpfb:element name="din"/>
   <hpfb:element name="ingredient_uses"/>
   <hpfb:element name="patent_info" type="patent_content"/>
   <hpfb:element name="patent_number"/>
   <hpfb:element name="filing_date" type="yyyymmdd_date_content"/>
   <hpfb:element name="granted_date" type="yyyymmdd_date_content"/>
   <hpfb:element name="expiry_date" type="yyyymmdd_date_content"/>
   <hpfb:element name="code_owner"/>
   <hpfb:element name="code_exclusive"/>
   <hpfb:element name="code_consent"/>
   <hpfb:element name="company_name"/>
   <hpfb:element name="service_address_info" type="service_address_content"/>
   <hpfb:element name="service_address" type="can_us_address_content"/>
   <hpfb:element name="manufact_address_info" type="manufact_address_content"/>
   <hpfb:element name="manufact_address" type="international_address_content"/>
   <hpfb:element name="manufact_address_sameas"/>
   <hpfb:element name="manufact_contact_info" type="contact_nolang_content"/>
   <hpfb:element name="attestation_info" type="attest_content"/>
   <hpfb:element name="hcoonly_info" type="hconly_content"/>
   <hpfb:element name="internal_sub_number"/>
   <hpfb:element name="filed_date" type="yyyymmdd_date_content"/>
   <hpfb:element name="noc_date" type="yyyymmdd_date_content"/>
   <hpfb:element name="added_date" type="yyyymmdd_date_content"/>
   <hpfb:element name="amended_date" type="yyyymmdd_date_content"/>
   <hpfb:element name="recieved_date" type="yyyymmdd_date_content"/>
   <hpfb:element name="drug_id"/>
   <hpfb:element name="subform_id"/>
   <hpfb:element name="form_id"/>
   <hpfb:element name="notes"/>
   <!--Main form structure-->
   <hpfb:complexType name="patent_list_content">
      <hpfb:sequence>
         <hpfb:element ref="form_lang"/>
         <hpfb:element ref="form_version"/>
         <hpfb:element ref="patent_filing_info"/>
         <hpfb:element ref="drug_info"/>
         <hpfb:element ref="patent_info"/>
         <hpfb:element ref="service_address_info"/>
         <hpfb:element ref="manufact_address_sameas"/>
         <hpfb:element ref="manufact_address_info" minOccurs="0" maxOccurs="1"/>
         <hpfb:element ref="manufact_contact_info"/>
         <hpfb:element ref="attestation_info"/>
         <hpfb:element ref="hcoonly_info"/>
      </hpfb:sequence>
   </hpfb:complexType>
   <hpfb:complexType name="patent_filing_content">
      <hpfb:sequence>
         <hpfb:element ref="patent_filing_option"/>
         <hpfb:element ref="submission_number"/>
         <hpfb:element ref="related_submission"/>
         <hpfb:element ref="formulation_change"/>
         <hpfb:element ref="dosage_form_change"/>
         <hpfb:element ref="use_change"/>
      </hpfb:sequence>
   </hpfb:complexType>
   <hpfb:complexType name="drug_content">
      <hpfb:sequence>
         <hpfb:element ref="medicinal_ingredient_info" minOccurs="1" maxOccurs="unbounded"/>
         <hpfb:element ref="brand_name"/>
         <hpfb:element ref="drug_use"/>
         <hpfb:element ref="strength"/>
         <hpfb:element ref="dosage_form"/>
         <hpfb:element ref="dosage_form_other"/>
         <hpfb:element ref="route"/>
         <hpfb:element ref="route_other"/>
         <hpfb:element ref="din"/>
         <hpfb:element ref="ingredient_uses"/>
      </hpfb:sequence>
   </hpfb:complexType>
   <hpfb:complexType name="medicinal_ingredient_content">
      <hpfb:sequence>
         <hpfb:element ref="medicinal_ingredient"/>
      </hpfb:sequence>
   </hpfb:complexType>
   <hpfb:complexType name="patent_content">
      <hpfb:sequence>
         <hpfb:element ref="patent_number"/>
         <hpfb:element ref="filing_date"/>
         <hpfb:element ref="granted_date"/>
         <hpfb:element ref="expiry_date"/>
         <hpfb:element ref="code_owner"/>
         <hpfb:element ref="code_exclusive"/>
         <hpfb:element ref="code_consent"/>
      </hpfb:sequence>
   </hpfb:complexType>
   <hpfb:complexType name="manufact_address_content">
      <hpfb:sequence>
         <hpfb:element ref="company_name"/>
         <hpfb:element ref="manufact_address"/>
      </hpfb:sequence>
   </hpfb:complexType>
   <hpfb:complexType name="service_address_content">
      <hpfb:sequence>
         <hpfb:element ref="company_name"/>
         <hpfb:element ref="service_address"/>
      </hpfb:sequence>
   </hpfb:complexType>
   <hpfb:complexType name="hconly_content">
      <hpfb:sequence>
         <hpfb:element ref="internal_sub_number"/>
         <hpfb:element ref="filed_date"/>
         <hpfb:element ref="noc_date"/>
         <hpfb:element ref="added_date"/>
         <hpfb:element ref="amended_date"/>
         <hpfb:element ref="recieved_date"/>
         <hpfb:element ref="drug_id"/>
         <hpfb:element ref="subform_id"/>
         <hpfb:element ref="form_id"/>
         <hpfb:element ref="notes"/>
      </hpfb:sequence>
   </hpfb:complexType>
</hpfb:schema>
<hpfb:schema xmlns:hpfb="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" id="XFAXSDReference">
   <!-- ****************************** -->
   <!-- ELEMENT DECLARATIONS -->
   <!-- ****************************** -->
   <hpfb:element name="street_address"/>
   <hpfb:element name="city"/>
   <hpfb:element name="province_lov"/>
   <hpfb:element name="province_text"/>
   <hpfb:element name="country"/>
   <hpfb:element name="postal_code"/>
   <hpfb:element name="canada_us_address" type="can_us_address_content"/>
   <!-- ****************************** -->
   <!-- ELEMENT TYPE DECLARATIONS -->
   <!-- ****************************** -->
   <!-- main xml structure-->
   <hpfb:complexType name="international_address_content">
      <hpfb:sequence>
         <hpfb:element ref="street_address"/>
         <hpfb:element ref="city"/>
         <hpfb:element ref="province_lov"/>
         <hpfb:element ref="province_text"/>
         <hpfb:element ref="country"/>
         <hpfb:element ref="postal_code"/>
      </hpfb:sequence>
   </hpfb:complexType>
   <hpfb:complexType name="can_us_address_content">
      <hpfb:sequence>
         <hpfb:element ref="street_address"/>
         <hpfb:element ref="city"/>
         <hpfb:element ref="province_lov"/>
         <hpfb:element ref="country"/>
         <hpfb:element ref="postal_code"/>
      </hpfb:sequence>
   </hpfb:complexType>
</hpfb:schema>
<hpfb:schema xmlns:hpfb="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" id="XFAXSDReference1">
   <!-- ****************************** -->
   <!-- ELEMENT DECLARATIONS -->
   <!-- ****************************** -->
   <hpfb:element name="salutation"/>
   <hpfb:element name="given_name"/>
   <hpfb:element name="initials"/>
   <hpfb:element name="surname"/>
   <hpfb:element name="job_title"/>
   <hpfb:element name="language_correspondance"/>
   <hpfb:element name="phone_num"/>
   <hpfb:element name="phone_ext"/>
   <hpfb:element name="fax_num"/>
   <hpfb:element name="email"/>
   <!-- ****************************** -->
   <!-- ELEMENT TYPE DECLARATIONS -->
   <!-- ****************************** -->
   <!-- main xml structure-->
   <hpfb:complexType name="contact_content">
      <hpfb:sequence>
         <hpfb:element ref="salutation"/>
         <hpfb:element ref="given_name"/>
         <hpfb:element ref="initials"/>
         <hpfb:element ref="surname"/>
         <hpfb:element ref="job_title"/>
         <hpfb:element ref="language_correspondance"/>
         <hpfb:element ref="phone_num"/>
         <hpfb:element ref="phone_ext"/>
         <hpfb:element ref="fax_num"/>
         <hpfb:element ref="email"/>
      </hpfb:sequence>
   </hpfb:complexType>
   <hpfb:complexType name="contact_nolang_content">
      <hpfb:sequence>
         <hpfb:element ref="salutation"/>
         <hpfb:element ref="given_name"/>
         <hpfb:element ref="initials"/>
         <hpfb:element ref="surname"/>
         <hpfb:element ref="job_title"/>
         <hpfb:element ref="phone_num"/>
         <hpfb:element ref="phone_ext"/>
         <hpfb:element ref="fax_num"/>
         <hpfb:element ref="email"/>
      </hpfb:sequence>
   </hpfb:complexType>
</hpfb:schema>
<hpfb:schema xmlns:hpfb="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" id="XFAXSDReference2">
   <hpfb:include schemaLocation="#XFAXSDReference3"/>
   <!-- ****************************** -->
   <!-- ELEMENT DECLARATIONS -->
   <!-- ****************************** -->
   <hpfb:element name="attestation_salutation"/>
   <hpfb:element name="attestation_given_name"/>
   <hpfb:element name="attestation_initials"/>
   <hpfb:element name="attestation_surname"/>
   <hpfb:element name="attestation_title"/>
   <hpfb:element name="signature_type"/>
   <hpfb:element name="signature_image"/>
   <hpfb:element name="attestation_sign_date" type="yyyymmdd_date_content"/>
   <!-- ****************************** -->
   <!-- ELEMENT TYPE DECLARATIONS -->
   <!-- ****************************** -->
   <!-- main xml structure-->
   <hpfb:complexType name="attest_content">
      <hpfb:sequence>
         <hpfb:element ref="attestation_salutation"/>
         <hpfb:element ref="attestation_given_name"/>
         <hpfb:element ref="attestation_surname"/>
         <hpfb:element ref="attestation_title"/>
         <hpfb:element ref="signature_type"/>
         <hpfb:element ref="signature_image"/>
         <hpfb:element ref="attestation_sign_date"/>
      </hpfb:sequence>
   </hpfb:complexType>
</hpfb:schema>
<hpfb:schema xmlns:hpfb="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" id="XFAXSDReference3">
   <hpfb:simpleType name="yyyymmdd_date_content">
      <hpfb:restriction base="hpfb:date">
         <hpfb:pattern value="[0-9]{4}-[0-9]{2}-[0-9]{2}"/>
      </hpfb:restriction>
   </hpfb:simpleType>
</hpfb:schema></xdp:xdp>
