<?xml version="1.0" encoding="UTF-8"?>
<?xfa generator="AdobeLiveCycleDesignerES_V10.0.2.20120224.1.869952" APIVersion="3.5.12002.0"?>
<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">
<template xmlns="http://www.xfa.org/schema/xfa-template/3.0/">
   <subform name="form1" locale="en_CA" layout="tb">
      <pageSet>
         <pageArea>
            <contentArea w="203.2mm" h="249.476mm" x="6.351mm" y="16.198mm" name="contentArea"/>
            <medium stock="default" short="612pt" long="792pt"/>
         </pageArea>
      </pageSet>
      <subform>
         <variables>
            <script contentType="application/x-javascript" name="TelephoneFormatDelegate">
//
/*******************************************************************************
 * An object that responds to information requests sent to a telephone/fax
 * FormNode.
 *
 * Implements FormNodeDelegateInterface.
 */

//imports
//imports
var cLog = script.core.util.Log;
var cResourceManager = 		script.core.lang.ResourceManager;
var cConfigurationManager = script.core.util.ConfigurationManager;
var cUiUtil = 						script.core.util.UiUtil;
var cValidationFailure = 			script.core.validation.ValidationFailure;
var cFormNodeManager = 				script.core.model.FormNodeManager;
var cGeneralUtil=					script.HCeForm.util.General;


var _TELEPHONE_FORMAT_TYPE = "telephone";
var CANADA=	cConfigurationManager.get("CANADA");
var  USA=	cConfigurationManager.get("USA");
var PHONE=	1;
var FAX=		2;

/*******************************************************************************
 * Gets a new PostalZipDelegate. Adobe does not allow object instances to be
 * created outside of their packaging, so it must be done here.
 * Note that this is only intended for use by FormNodeFactory. All instances
 * should be created by that class.
 * @return the new PostalZipDelegate instance
 */
function createInstance()
{
	return new TelephoneFormatDelegateClass();
}

/**
 * Class implementation
 */
function TelephoneFormatDelegateClass(somExpression)
{
	this.className = "TelephoneFormatDelegate";
	this.errorResourceAlias="";
	this.northAmerica_errorAlias="error_usPhoneNumError";
	this.other_errorAlias="error_otherPhoneNumError";
	this.numberType=PHONE;
	this.countryDdlNodeAlias="";
	this.formNode;
	this.errorRootAlias=null;
	this.nodeAlias=null;		

	/* Optional -sets the string alias to the name of the root node (ie the field name)
	**		
	*/
	this.setNodeAlias = function(bar)
	{
		this.nodeAlias=bar;
	}
	/*
	* this is the resource file alias for the text that identifies the subform the field is on
	* For example: "For trial site". The delegate adds the index of the subform
	* This text is optional, it isn't needed if you have only one instance of a specific postal code
	*/
	this.setErrorRootText=function(aliasName){
	
		this.errorRootAlias=aliasName;
	}	
	

	/**
	 * Gets this node's default value, which is an internationalized value.
	 * This returns null since this uses a picklist.
	 * @param aNode the Adobe Node instance who's default value is required.
	 * @return a String that contains the internationalized default value for
	 *		   the passed Node. Null if this is not applicable.
	 */
    this.getDefaultValue = function(aNode)
    {
    	return null;
	}
	
	/**
	 * Sets alias 
	 *
	 * @param aliasName -the alias of the country set in the nodeDefinitions
	 */
	this.setCountryNodeAlias = function(aliasName)
    {    	
    		this.countryDdlNodeAlias=aliasName;
    }
    
    	/**
	 * Sets the delegate to treat any error messages a phone messages
	 *
	 * 
	 */
	this.setAsPhoneNumber = function()
    {    	
    		this.numberType=PHONE;
    		this.northAmerica_errorAlias="error_usPhoneNumError";
		this.other_errorAlias="error_otherPhoneNumError";
    }
    /**
	 * Sets the delegate to treat any error messages a fax messages
	 *
	 * 
	 */
	this.setAsFaxNumber = function()
    {    	
    		this.numberType=FAX;
    		this.northAmerica_errorAlias="error_usFaxNumError";
		this.other_errorAlias="error_otherFaxNumError";	
    }
    

	/* Sets custom error text 
	 *
	 * @param aFormNode the FormNode that is using this delegate.
	 */
	this.setErrorText = function(aliasName)
    {    	
    		this.errorResourceAlias=aliasName;
    }
	
		
	/**
	 * Gets the type of format validation to be applied to data entered into
	 * this node in the UI.
	 * @param aNode the Adobe Node instance who's value must conform to a 
	 *		  specific format.
	 * @return a String that contains the type of format validation to be
	 *		   applied to data entered into this node in the UI. These must be
	 *		   types that are supported by the currently installed 
	 *		   FormatValidator. Null if this is not applicable.
	 */
    this.getFormatType = function(aNode)
    {
    	return null;
	}

	/**
	 * Gets this node's label to be displayed in the UI, which is an
	 * internationalized value.
	 * @param aNode the Adobe Node instance who's label is required.
	 * @return a String that contains the internationalized UI label for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getLabel = function(aNode)
    {
    	return null;
   	}

	/**
	 * Gets whether this node is mandatory (required).
	 * @param aNode the Adobe Node instance who's mandatory setting is required.
	 * 	 
	 */
	this.isMandatory = function(aNode)
	{
			return null;
	}
		
	/**
	 * Gets a string that defines the pick list to be displayed in the UI for
	 * this node.
	 * @param aNode the Adobe Node instance who's pick list is required.
	 * @return a String that contains the definition of the pick list to be
	 *		   displayed in the UI for this node. The format is:
	 *		   "displayValue1, code1, displayValue2, code2...". Null if
	 *		   this is not applicable.
	 */
    this.getPickListValues = function(aNode)
    {
    	return null;
	}
		
	/**
	 * Gets this node's tool tip to be displayed in the UI, which is an
	 * internationalized value. In this case it is null, since these are
	 * dependant on the subform that the field is in (must be handled by the
	 * FormNode itself).
	 * @param aNode the Adobe Node instance who's tool tip is required.
	 * @return a String that contains the internationalized UI tool tip for the
	 *		   passed Node. Null if this is not applicable.
	 */
    this.getToolTip = function(aNode)
    {
    	return null;
	}

	/**
	 * Sets the FormNode that is using this delegate. It is mandatory that this
	 * is set to allow the delegate to access items in the FormNode as required.
	 * @param aFormNode the FormNode that is using this delegate.
	 */
    this.setFormNode = function(aFormNode)
    {
    	this.formNode = aFormNode;
	}

	/**
	 * Gets whether this delegate is used to validate node instances (e.g.
	 * mandatory fields, etc.) as well as their child nodes.
	 * @return a boolean -true if this should be called to perform validation.
	 */
	this.isUsedToValidateNodes = function()
	{
		return true;
	}
	
	/**
	 * Dummy function stub so the interface requirements are met.
	 */
	this.validateNode = function(aNodeInstance, updateDisplay,
								 aValidationFailure)
	{
		// It must be called to avoid being
		// overwirtten.
		this.formNode._validateNode(aNodeInstance, updateDisplay,
									aValidationFailure);
		
		var countryCode=this._getCountryCode(aNodeInstance);
		var errorAlias=""; //dynamic
		if(aNodeInstance.isNull){
			return aValidationFailure;
		}//if
	
		var testPassed=true;
		var phone = aNodeInstance.rawValue;
		if (countryCode == CANADA || countryCode == USA) {
				var reg = /^(?:\+?1[-. ]?)?\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/; //(phone leading with 1
				if (reg.test(phone) == false) {
						testPassed= false;
						errorAlias=this.northAmerica_errorAlias;
				} 
				else {
						testPassed= true;
						var formattedPhoneNumber = phone.replace(reg, "$1-$2-$3");
						var temp = phone.replace(/[^\d]/g, "");
						if (temp.length == 11) {
							formattedPhoneNumber = phone.replace(reg, "1-$1-$2-$3");
						}//if	
				}//else	
		}//if 
		else {
				var reg = /^[0-9() .-]+$/;
				var temp = phone.replace(/[^\d]/g, "");
				if (temp.length &lt; 9 || temp.length &gt; 18) {
						testPassed= false;
						errorAlias=this.other_errorAlias;
				}//if
				else{
					testPassed= true;
				}//else
		}//else		
		if(testPassed===true){
				cUiUtil.resetColour(aNodeInstance); //In case it previously failed
		}//if
		else{
				this.createFailure(updateDisplay,aValidationFailure,aNodeInstance,errorAlias);
		}//else
	return aValidationFailure;
	}
			
    /**
     * Describes this object. This is implemented in all objects since their
     * toString() cannot be overridden!
     * @return the description of this object.
     */
    this.asString = function()
	{
		var buffer = this.className + "[";
		
	    if (this.formNode != null)
	    {
	    	buffer += "formNode.somExpression= " + this.formNode.somExpression;
	    }
	    else
	    {
	    	buffer += "formNode= null";
	    }
		buffer += "]";
		return buffer;
	}
	//assumes that a) country field is called ddlCountry  and 
	//b) has the same parent as phone number
	this._getCountryCode=function(aNodeInstance){
		var countryValue="";
		if(!this.countryDdlNodeAlias){
			//use the parent and use ddlCountry if the alias is not set
			countryValue=this.parent.ddlCountry;
		}else{
			var countryFormNode=cFormNodeManager.getFormNodeForKey(this.countryDdlNodeAlias);
			if(!countryFormNode) return null;
			var rootInstance=null;
			if(this.errorRootAlias &amp;&amp; this.nodeAlias){
					var errorPart1msg=cResourceManager.get(this.errorRootAlias);
					rootInstance= cGeneralUtil.getParentInstance(this.nodeAlias,aNodeInstance); 
			}
			var countryInstance=countryFormNode.getNodeInstance(rootInstance);
			countryValue=countryInstance.rawValue;
		}
		return(countryValue);
	}
	
	
	this.createFailure=function(updateDisplay,aValidationFailure,aNodeInstance,baseErrorAlias){
	
		var resourceError=this.errorResourceAlias;
		if(updateDisplay===true){
					cUiUtil.setColour(aNodeInstance,cConfigurationManager.get("colourError"));
		}						
		var errorMsg=cResourceManager.get(resourceError)+cResourceManager.get(baseErrorAlias);
		//Feb 2016 added to account for multiple repeating instances of the same type
		if(this.errorRootAlias &amp;&amp; this.nodeAlias){
					var errorPart1msg=cResourceManager.get(this.errorRootAlias);
					var rootIndex= (cGeneralUtil.getParentIndex(this.nodeAlias,aNodeInstance))+1;
					if(rootIndex&gt;=0){
					errorPart1msg=errorPart1msg+" "+rootIndex+",";
					}
					errorMsg=errorPart1msg+" "+errorMsg;
					validationType="PostalCodeValidation_"+rootIndex;
		}			
		var newValidationFailure = cValidationFailure.createInstance("PhoneFormatValidation",errorMsg);
		if (aValidationFailure != null)
		{
			aValidationFailure.addNestedValidationFailure(newValidationFailure);
		}
		else{
			aValidationFailure = newValidationFailure;
		}					
	}//endfn
	
	
	
}

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               <?templateDesigner isFragment yes?>
               <?templateDesigner fragmentTitle TelephoneFormatDelegate?></script>
         </variables>
      </subform>
   </subform>
</template>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2011/06/07-10:39:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description xmlns:lcd="http://ns.adobe.com/livecycle/designer/" xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about="">
         <lcd:fragmentCatalog>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <dc:title>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default">TelephoneFormatDelegate</rdf:li>
                     </rdf:Alt>
                  </dc:title>
                  <dc:description>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default"/>
                     </rdf:Alt>
                  </dc:description>
                  <dc:identifier>$template.form1.#subform.#variables.TelephoneFormatDelegate</dc:identifier>
                  <lcd:fragmentRole>ScriptObject</lcd:fragmentRole>
               </rdf:li>
            </rdf:Seq>
         </lcd:fragmentCatalog>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta></xdp:xdp>
